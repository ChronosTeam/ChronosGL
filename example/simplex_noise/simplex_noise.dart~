import 'package:chronosgl/chronosgl.dart';
import 'dart:html' as HTML;

import 'snoise.dart';

final ShaderObject nullVertexShader = new ShaderObject("nullShaderV")
  ..AddAttributeVars([aPosition])
  ..SetBodyWithMain([NullVertexBody]);

String shader = """
 #define D 3
 
 const float freqs[D] = float[](1.0, 2.0, 4.0);
 const float ampls[D] = float[](1.0, 0.5, 0.25);
  
 // http://www.chilliant.com/rgb2hsv.html
 vec3 HUEtoRGB(float H) {
    float R = clamp(abs(H * 6.0 - 3.0) - 1.0, 0.0, 1.0);
    float G = clamp(2.0 - abs(H * 6.0 - 2.0), 0.0, 1.0);
    float B = clamp(2.0 - abs(H * 6.0 - 4.0), 0.0, 1.0);
    return vec3(R,G,B);
 }
 
 vec3 HSLtoRGB(vec3 HSL) {
     vec3 RGB = HUEtoRGB(HSL.x);
     float C = (1.0 - abs(2.0 * HSL.z - 1.0)) * HSL.y;
     return (RGB - 0.5) * C + HSL.z;
  }
  
 float ComplexNoise(vec2 xy, 
                    float baseFreq, float freqs[D], 
                    float baseAmpl, float ampls[D]) {
     float total = 0.0;
     for(int i = 0; i < D; i++) {
         total += baseAmpl * ampls[i] * snoise2(xy * baseFreq * freqs[i]);
     }             
     return total;
 }
   
 float Wood1(vec2 xy) {
   float total = ComplexNoise(xy, 0.01, freqs, 1.0, ampls);
 
   total = abs(total) * 1.0;
   vec2 p = (vec2(-400.0, -400.0) + xy) / 40.0;
   total  += cos(dot(p, p));
   return total;
 }  

 float Wood2(vec2 xy) {
   vec2 p = (vec2(-600.0, -400.0) + xy) / 40.0;

   float n = 0.4 * snoise2(xy * 0.005);   
   return cos((length(p) + n) * 8.0); 
 }  

 vec3 Cloud(vec2 xy) {
    float n = 0.75 * snoise2(xy * 0.001) / 4.0;
    return HSLtoRGB(vec3(0.66, 1.0, n));
 }  

 void main() {
   // This are pixel coordinates  0, 0 being lowel left
   vec4 fc = gl_FragCoord;
   
 
   // ${oFragColor} = vec4(0.0, Wood2(fc.xy), 0.0, 1.0);
    ${oFragColor}.rgb = Cloud(fc.xy);
 }
 """;

final ShaderObject noiseFragmentShader = new ShaderObject("noiseShaderF")
  ..AddUniformVars([uTime])
  ..SetBody([SimplexNoiseHelpers, SimplexNoiseFunction2,  shader]);

void main() {
  StatsFps fps =
      new StatsFps(HTML.document.getElementById("stats"), "blue", "gray");
  HTML.CanvasElement canvas = HTML.document.querySelector('#webgl-canvas');
  final int w = canvas.clientWidth;
  final int h = canvas.clientHeight;
  canvas.width = w;
  canvas.height = h;

  ChronosGL cgl = new ChronosGL(canvas, faceCulling: true);

  final RenderProgram programPerlin =
      new RenderProgram("perlin", cgl, nullVertexShader, noiseFragmentShader);

  final MeshData quad = ShapeQuad(programPerlin, 1);

  final Material matPerlin = new Material("perlin");

  double _lastTimeMs = 0.0;
  void animate(num timeMs) {
    _lastTimeMs = timeMs + 0.0;

    matPerlin.ForceUniform(uTime, timeMs / 1000.0);
    programPerlin.Draw(quad, [matPerlin]);

    HTML.window.animationFrame.then(animate);
    fps.UpdateFrameCount(_lastTimeMs);
  }

  animate(0.0);
}
