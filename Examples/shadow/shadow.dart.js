// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.2.0.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
//
// defaultPackagesBase:
//    Override the location where `package:` uris are resolved from. By default
//    they are resolved under "packages/" from the current window location.
{
}
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == 'function')
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    copyProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == 'string')
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo = reflectionInfo + typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {JS_CONST: function JS_CONST() {
    },
    MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
      H.assertSubtype(iterable, "$isIterable", [$S], "$asIterable");
      H.functionTypeCheck($function, {func: 1, ret: $T, args: [$S]});
      return new H.EfficientLengthMappedIterable(iterable, $function, [$S, $T]);
    },
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooMany: function() {
      return new P.StateError("Too many elements");
    },
    Sort_sort: function(a, compare, $E) {
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      H.Sort__doSort(a, 0, J.get$length$asx(a) - 1, compare, $E);
    },
    Sort__doSort: function(a, left, right, compare, $E) {
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      if (right - left <= 32)
        H.Sort__insertionSort(a, left, right, compare, $E);
      else
        H.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort: function(a, left, right, compare, $E) {
      var i, t1, el, j, j0;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort: function(a, left, right, compare, $E) {
      var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, comp_pivot1, comp_pivot2, t2;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
      index1 = left + sixth;
      index5 = right - sixth;
      index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
      index2 = index3 - sixth;
      index4 = index3 + sixth;
      t1 = J.getInterceptor$asx(a);
      el1 = t1.$index(a, index1);
      el2 = t1.$index(a, index2);
      el3 = t1.$index(a, index3);
      el4 = t1.$index(a, index4);
      el5 = t1.$index(a, index5);
      if (J.$gt$n(compare.call$2(el1, el2), 0)) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el3), 0)) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el4), 0)) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el3, el4), 0)) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el5), 0)) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (typeof comp !== "number")
            return comp.$lt();
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (typeof comp !== "number")
                return comp.$gt();
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp_pivot1 = compare.call$2(ak, el2);
          if (typeof comp_pivot1 !== "number")
            return comp_pivot1.$lt();
          if (comp_pivot1 < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else {
            comp_pivot2 = compare.call$2(ak, el4);
            if (typeof comp_pivot2 !== "number")
              return comp_pivot2.$gt();
            if (comp_pivot2 > 0)
              for (; true;) {
                comp = compare.call$2(t1.$index(a, great), el4);
                if (typeof comp !== "number")
                  return comp.$gt();
                if (comp > 0) {
                  --great;
                  if (great < k)
                    break;
                  continue;
                } else {
                  comp = compare.call$2(t1.$index(a, great), el2);
                  if (typeof comp !== "number")
                    return comp.$lt();
                  great0 = great - 1;
                  if (comp < 0) {
                    t1.$indexSet(a, k, t1.$index(a, less));
                    less0 = less + 1;
                    t1.$indexSet(a, less, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    less = less0;
                  } else {
                    t1.$indexSet(a, k, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                  }
                  great = great0;
                  break;
                }
              }
          }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      H.Sort__doSort(a, left, less - 2, compare, $E);
      H.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                comp = compare.call$2(t1.$index(a, great), el2);
                if (typeof comp !== "number")
                  return comp.$lt();
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        H.Sort__doSort(a, less, great, compare, $E);
      } else
        H.Sort__doSort(a, less, great, compare, $E);
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    ListIterator: function ListIterator(t0, t1, t2, t3) {
      var _ = this;
      _._iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = t2;
      _._current = null;
      _.$ti = t3;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this._iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this._iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _._current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this._iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.stringTypeCheck(init.mangledGlobalNames[rawClassName]);
      if (typeof preserved === "string")
        return preserved;
      return rawClassName;
    },
    getType: function(index) {
      return init.types[H.intTypeCheck(index)];
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor$(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseDouble: function(source) {
      var result, trimmed;
      if (typeof source !== "string")
        H.throwExpression(H.argumentErrorValue(source));
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return;
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = J.trim$0$s(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return;
      }
      return result;
    },
    Primitives_objectTypeName: function(object) {
      return H.Primitives__objectClassName(object) + H._joinArguments(H.getRuntimeTypeInfo(object), 0, null);
    },
    Primitives__objectClassName: function(object) {
      var interceptor, interceptorConstructor, interceptorConstructorName, $name, t1, dispatchName, objectConstructor, match, decompiledName;
      interceptor = J.getInterceptor$(object);
      interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      t1 = $name == null;
      if (t1 || interceptor === C.Interceptor_methods || !!interceptor.$isUnknownJavaScriptObject) {
        dispatchName = C.C_JS_CONST(object);
        if (t1)
          $name = dispatchName;
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
        }
        return $name;
      }
      $name = $name;
      return H.unminifyOrTag($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36 ? C.JSString_methods.substring$1($name, 1) : $name);
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
      return t1;
    },
    Primitives_getMonth: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
      return t1;
    },
    Primitives_getDay: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
      return t1;
    },
    Primitives_getHours: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
      return t1;
    },
    Primitives_getMinutes: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
      return t1;
    },
    Primitives_getSeconds: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
      return t1;
    },
    Primitives_getMilliseconds: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
      return t1;
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1;
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, "index", null);
      $length = H.intTypeCheck(J.get$length$asx(indexable));
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, "index", null, $length);
      return P.RangeError$value(index, "index");
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkNum: function(value) {
      if (typeof value !== "number")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = message.replace(String({}), '$receiver$').replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], [P.String]);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = '$arguments$';
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    NullError$: function(_message, match) {
      return new H.NullError(_message, match == null ? null : match.method);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1, t2;
      t1 = match == null;
      t2 = t1 ? null : match.method;
      return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException: function(ex) {
      var t1, message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t2;
      t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              return t1.call$1(H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(H.NullError$(H.stringTypeCheck(message), match));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, null, null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var $length, index, index0, index1;
      $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      H.interceptedTypeCheck(closure, "$isFunction");
      switch (H.intTypeCheck(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      H.intTypeCheck(arity);
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $function, callName, $prototype, $constructor, t1, trampoline, signatureFunction, getReceiver, applyTrampoline, i, stub, stubCallName;
      $function = functions[0];
      callName = $function.$callName;
      $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      if (typeof reflectionInfo == "number")
        signatureFunction = function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, reflectionInfo);
      else if (typeof reflectionInfo == "function")
        if (isStatic)
          signatureFunction = reflectionInfo;
        else {
          getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
          signatureFunction = function(f, r) {
            return function() {
              return f.apply({$receiver: r(this)}, arguments);
            };
          }(reflectionInfo, getReceiver);
        }
      else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        if (t2 == null) {
          t2 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t2;
        }
        return new Function(t1 + H.S(t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t2;
      }
      return new Function(t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf, getReceiver;
      getSelf = H.BoundClosure_selfOf;
      getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var t1, t2, stubName, arity, lookedUpFunction, t3, t4, $arguments;
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t2 = $.BoundClosure_receiverFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("receiver");
        $.BoundClosure_receiverFieldNameCache = t2;
      }
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t3 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t4 = !t3 || arity >= 28;
      if (t4)
        return H.Closure_cspForwardInterceptedCall(arity, !t3, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, H.intTypeCheck(applyTrampolineIndex), reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    BoundClosure_selfOf: function(closure) {
      return closure._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return closure._receiver;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var template, names, t1, i, $name;
      template = new H.BoundClosure("self", "target", "receiver", "name");
      names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
    },
    stringTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
    },
    doubleTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "double"));
    },
    numTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
    },
    boolTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "boolean")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
    },
    intTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number" && Math.floor(value) === value)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
    },
    propertyTypeError: function(value, property) {
      throw H.wrapException(H.TypeErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    propertyTypeCastError: function(value, property) {
      throw H.wrapException(H.CastErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    interceptedTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if ((typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = (typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    numberOrStringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (typeof value === "number")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listTypeCheck: function(value) {
      if (value == null)
        return value;
      if (!!J.getInterceptor$(value).$isList)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "List<dynamic>"));
    },
    listSuperNativeTypeCheck: function(value, property) {
      var t1;
      if (value == null)
        return value;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isList)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeError(value, property);
    },
    extractFunctionTypeObjectFromInternal: function(o) {
      var signature;
      if ("$signature" in o) {
        signature = o.$signature;
        if (typeof signature == "number")
          return init.types[H.intTypeCheck(signature)];
        else
          return o.$signature();
      }
      return;
    },
    functionTypeTest: function(value, functionTypeRti) {
      var functionTypeObject;
      if (value == null)
        return false;
      if (typeof value == "function")
        return true;
      functionTypeObject = H.extractFunctionTypeObjectFromInternal(J.getInterceptor$(value));
      if (functionTypeObject == null)
        return false;
      return H._isFunctionSubtype(functionTypeObject, null, functionTypeRti, null);
    },
    functionTypeCheck: function(value, functionTypeRti) {
      var $self, t1;
      if (value == null)
        return value;
      if ($._inTypeAssertion)
        return value;
      $._inTypeAssertion = true;
      try {
        if (H.functionTypeTest(value, functionTypeRti))
          return value;
        $self = H.runtimeTypeToString(functionTypeRti);
        t1 = H.TypeErrorImplementation$(value, $self);
        throw H.wrapException(t1);
      } finally {
        $._inTypeAssertion = false;
      }
    },
    futureOrCheck: function(o, futureOrRti) {
      if (o != null && !H.checkSubtypeOfRuntimeType(o, futureOrRti))
        H.throwExpression(H.TypeErrorImplementation$(o, H.runtimeTypeToString(futureOrRti)));
      return o;
    },
    TypeErrorImplementation$: function(value, type) {
      return new H.TypeErrorImplementation("TypeError: " + P.Error_safeToString(value) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
    },
    CastErrorImplementation$: function(value, type) {
      return new H.CastErrorImplementation("CastError: " + P.Error_safeToString(value) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
    },
    _typeDescription: function(value) {
      var t1, functionTypeObject;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isClosure) {
        functionTypeObject = H.extractFunctionTypeObjectFromInternal(t1);
        if (functionTypeObject != null)
          return H.runtimeTypeToString(functionTypeObject);
        return "Closure";
      }
      return H.Primitives_objectTypeName(value);
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(H.stringTypeCheck(staticName)));
    },
    RuntimeError$: function(message) {
      return new H.RuntimeError(message);
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(interceptor, object, substitutionName) {
      return H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(object));
    },
    getRuntimeTypeArgumentIntercepted: function(interceptor, target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti;
      H.intTypeCheck(index);
      rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti) {
      return H._runtimeTypeToString(rti, null);
    },
    _runtimeTypeToString: function(rti, genericContext) {
      var t1, t2;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (rti == null)
        return "dynamic";
      if (rti === -1)
        return "void";
      if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return H.unminifyOrTag(rti[0].name) + H._joinArguments(rti, 1, genericContext);
      if (typeof rti == "function")
        return H.unminifyOrTag(rti.name);
      if (rti === -2)
        return "dynamic";
      if (typeof rti === "number") {
        H.intTypeCheck(rti);
        if (genericContext == null || rti < 0 || rti >= genericContext.length)
          return "unexpected-generic-index:" + rti;
        t1 = genericContext.length;
        t2 = t1 - rti - 1;
        if (t2 < 0 || t2 >= t1)
          return H.ioore(genericContext, t2);
        return H.S(genericContext[t2]);
      }
      if ('func' in rti)
        return H._functionRtiToString(rti, genericContext);
      if ('futureOr' in rti)
        return "FutureOr<" + H._runtimeTypeToString("type" in rti ? rti.type : null, genericContext) + ">";
      return "unknown-reified-type";
    },
    _functionRtiToString: function(rti, genericContext) {
      var t1, boundsRti, outerContextLength, offset, i, i0, typeParameters, typeSep, t2, boundRti, returnTypeText, $arguments, argumentsText, sep, _i, argument, optionalArguments, namedArguments, t3;
      t1 = [P.String];
      H.assertSubtype(genericContext, "$isList", t1, "$asList");
      if ("bounds" in rti) {
        boundsRti = rti.bounds;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], t1);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsRti.length, i0 = i; i0 > 0; --i0)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i0));
        for (typeParameters = "<", typeSep = "", i0 = 0; i0 < i; ++i0, typeSep = ", ") {
          typeParameters += typeSep;
          t1 = genericContext.length;
          t2 = t1 - i0 - 1;
          if (t2 < 0)
            return H.ioore(genericContext, t2);
          typeParameters = C.JSString_methods.$add(typeParameters, genericContext[t2]);
          boundRti = boundsRti[i0];
          if (boundRti != null && boundRti !== P.Object)
            typeParameters += " extends " + H._runtimeTypeToString(boundRti, genericContext);
        }
        typeParameters += ">";
      } else {
        typeParameters = "";
        outerContextLength = null;
      }
      returnTypeText = !!rti.v ? "void" : H._runtimeTypeToString(rti.ret, genericContext);
      if ("args" in rti) {
        $arguments = rti.args;
        for (t1 = $arguments.length, argumentsText = "", sep = "", _i = 0; _i < t1; ++_i, sep = ", ") {
          argument = $arguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
      } else {
        argumentsText = "";
        sep = "";
      }
      if ("opt" in rti) {
        optionalArguments = rti.opt;
        argumentsText += sep + "[";
        for (t1 = optionalArguments.length, sep = "", _i = 0; _i < t1; ++_i, sep = ", ") {
          argument = optionalArguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
        argumentsText += "]";
      }
      if ("named" in rti) {
        namedArguments = rti.named;
        argumentsText += sep + "{";
        for (t1 = H.extractKeys(namedArguments), t2 = t1.length, sep = "", _i = 0; _i < t2; ++_i, sep = ", ") {
          t3 = H.stringTypeCheck(t1[_i]);
          argumentsText = argumentsText + sep + H._runtimeTypeToString(namedArguments[t3], genericContext) + (" " + H.S(t3));
        }
        argumentsText += "}";
      }
      if (outerContextLength != null)
        genericContext.length = outerContextLength;
      return typeParameters + "(" + argumentsText + ") => " + returnTypeText;
    },
    _joinArguments: function(types, startIndex, genericContext) {
      var buffer, index, separator, allDynamic, t1, argument;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, separator = "", allDynamic = true, t1 = ""; index < types.length; ++index, separator = ", ") {
        buffer._contents = t1 + separator;
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H._runtimeTypeToString(argument, genericContext);
      }
      return "<" + buffer.toString$0(0) + ">";
    },
    getRti: function(o) {
      var t1, functionRti, type, rti;
      t1 = J.getInterceptor$(o);
      if (!!t1.$isClosure) {
        functionRti = H.extractFunctionTypeObjectFromInternal(t1);
        if (functionRti != null)
          return functionRti;
      }
      type = t1.constructor;
      if (o == null)
        return type;
      if (typeof o != "object")
        return type;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return type;
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = substitution.apply(null, $arguments);
      if (substitution == null)
        return;
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        return substitution;
      if (typeof substitution == "function")
        return substitution.apply(null, $arguments);
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor$(object);
      if (interceptor[isField] == null)
        return false;
      return H.areSubtypes(H.substitute(interceptor[asField], $arguments), null, checks, null);
    },
    subtypeCast: function(object, isField, checks, asField) {
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.CastErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(H.unminifyOrTag(isField.substring(3)) + H._joinArguments(checks, 0, null), init.mangledGlobalNames)));
    },
    assertSubtype: function(object, isField, checks, asField) {
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.TypeErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(H.unminifyOrTag(isField.substring(3)) + H._joinArguments(checks, 0, null), init.mangledGlobalNames)));
    },
    areSubtypes: function(s, sEnv, t, tEnv) {
      var len, i;
      if (t == null)
        return true;
      if (s == null) {
        len = t.length;
        for (i = 0; i < len; ++i)
          if (!H._isSubtype(null, null, t[i], tEnv))
            return false;
        return true;
      }
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H._isSubtype(s[i], sEnv, t[i], tEnv))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return signature.apply(context, H.substitute(J.getInterceptor$(context)["$as" + H.S(contextName)], H.getRuntimeTypeInfo(context)));
    },
    isSupertypeOfNullRecursive: function(type) {
      var typeArgument;
      if (typeof type === "number")
        return false;
      if ('futureOr' in type) {
        typeArgument = "type" in type ? type.type : null;
        return type == null || type.name === "Object" || type.name === "Null" || type === -1 || type === -2 || H.isSupertypeOfNullRecursive(typeArgument);
      }
      return false;
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var type, rti;
      if (o == null)
        return t == null || t.name === "Object" || t.name === "Null" || t === -1 || t === -2 || H.isSupertypeOfNullRecursive(t);
      if (t == null || t === -1 || t.name === "Object" || t === -2)
        return true;
      if (typeof t == "object") {
        if ('futureOr' in t)
          if (H.checkSubtypeOfRuntimeType(o, "type" in t ? t.type : null))
            return true;
        if ('func' in t)
          return H.functionTypeTest(o, t);
      }
      type = J.getInterceptor$(o).constructor;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return H._isSubtype(type, null, t, null);
    },
    assertSubtypeOfRuntimeType: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    _isSubtype: function(s, sEnv, t, tEnv) {
      var t1, typeOfS, tTypeArgument, futureSubstitution, futureArguments, t2, typeOfT, typeOfTString, substitution;
      if (s === t)
        return true;
      if (t == null || t === -1 || t.name === "Object" || t === -2)
        return true;
      if (s === -2)
        return true;
      if (s == null || s === -1 || s.name === "Object" || s === -2) {
        if (typeof t === "number")
          return false;
        if ('futureOr' in t)
          return H._isSubtype(s, sEnv, "type" in t ? t.type : null, tEnv);
        return false;
      }
      if (typeof s === "number")
        return false;
      if (typeof t === "number")
        return false;
      if (s.name === "Null")
        return true;
      if ('func' in t)
        return H._isFunctionSubtype(s, sEnv, t, tEnv);
      if ('func' in s)
        return t.name === "Function";
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      if ('futureOr' in t) {
        tTypeArgument = "type" in t ? t.type : null;
        if ('futureOr' in s)
          return H._isSubtype("type" in s ? s.type : null, sEnv, tTypeArgument, tEnv);
        else if (H._isSubtype(s, sEnv, tTypeArgument, tEnv))
          return true;
        else {
          if (!('$is' + "Future" in typeOfS.prototype))
            return false;
          futureSubstitution = typeOfS.prototype["$as" + "Future"];
          futureArguments = H.substitute(futureSubstitution, t1 ? s.slice(1) : null);
          return H._isSubtype(typeof futureArguments === "object" && futureArguments !== null && futureArguments.constructor === Array ? futureArguments[0] : null, sEnv, tTypeArgument, tEnv);
        }
      }
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        typeOfTString = typeOfT.name;
        if (!('$is' + typeOfTString in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + typeOfTString];
      } else
        substitution = null;
      if (!t2)
        return true;
      t1 = t1 ? s.slice(1) : null;
      t2 = t.slice(1);
      return H.areSubtypes(H.substitute(substitution, t1), sEnv, t2, tEnv);
    },
    _isFunctionSubtype: function(s, sEnv, t, tEnv) {
      var sBounds, tBounds, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, tPos, sPos, sNamedParameters, tNamedParameters;
      if (!('func' in s))
        return false;
      if ("bounds" in s) {
        if (!("bounds" in t))
          return false;
        sBounds = s.bounds;
        tBounds = t.bounds;
        if (sBounds.length !== tBounds.length)
          return false;
      } else if ("bounds" in t)
        return false;
      if (!H._isSubtype(s.ret, sEnv, t.ret, tEnv))
        return false;
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      for (pos = 0; pos < sParametersLen; ++pos)
        if (!H._isSubtype(tParameterTypes[pos], tEnv, sParameterTypes[pos], sEnv))
          return false;
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tOptionalParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      sNamedParameters = s.named;
      tNamedParameters = t.named;
      if (tNamedParameters == null)
        return true;
      if (sNamedParameters == null)
        return false;
      return H.namedParametersSubtypeCheck(sNamedParameters, sEnv, tNamedParameters, tEnv);
    },
    namedParametersSubtypeCheck: function(s, sEnv, t, tEnv) {
      var names, t1, i, $name;
      names = Object.getOwnPropertyNames(t);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        if (!H._isSubtype(t[$name], tEnv, s[$name], sEnv))
          return false;
      }
      return true;
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, H.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var tag, record, interceptor, interceptorClass, mark, t1;
      tag = H.stringTypeCheck($.getTagFunction.call$1(obj));
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
      hooks = C.C_JS_CONST0();
      hooks = H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5, H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1 = receiver.indexOf(other, startIndex);
      return t1 >= 0;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this._message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this._message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this._message = t0;
    },
    unwrapException_saveStackTrace: function unwrapException_saveStackTrace(t0) {
      this.ex = t0;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3) {
      var _ = this;
      _._self = t0;
      _.__js_helper$_target = t1;
      _._receiver = t2;
      _._name = t3;
    },
    TypeErrorImplementation: function TypeErrorImplementation(t0) {
      this.message = t0;
    },
    CastErrorImplementation: function CastErrorImplementation(t0) {
      this.message = t0;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    TypeImpl: function TypeImpl(t0) {
      this._rti = t0;
      this._hashCode = this.__typeName = null;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _._rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _.__js_helper$_previous = _._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    _ensureNativeList: function(list) {
      var result, i;
      if (!!J.getInterceptor$(list).$isJSIndexable)
        return list;
      result = new Array(list.length);
      result.fixed$length = Array;
      for (i = 0; i < list.length; ++i)
        C.JSArray_methods.$indexSet(result, i, list[i]);
      return result;
    },
    _checkValidIndex: function(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    extractKeys: function(victim) {
      return J.JSArray_JSArray$markFixed(victim ? Object.keys(victim) : [], null);
    },
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  },
  J = {
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var record, proto, objectProto, $constructor, interceptor;
      record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        Object.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, [$E]));
    },
    JSArray_markFixedList: function(list) {
      H.listTypeCheck(list);
      list.fixed$length = Array;
      return list;
    },
    JSArray__compareAny: function(a, b) {
      return J.compareTo$1$ns(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
    },
    JSString__isWhitespace: function(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace: function(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = C.JSString_methods._codeUnitAt$1(string, index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace: function(string, index) {
      var index0, codeUnit;
      for (; index > 0; index = index0) {
        index0 = index - 1;
        codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSDouble.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$n: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x: function(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    get$attributes$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$attributes(receiver);
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$iterator$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$tagName$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$tagName(receiver);
    },
    get$target$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$target(receiver);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $gt$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver > a0;
      return J.getInterceptor$n(receiver).$gt(receiver, a0);
    },
    $index$asx: function(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    _codeUnitAt$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver)._codeUnitAt$1(receiver, a0);
    },
    activeTexture$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).activeTexture$1(receiver, a0);
    },
    addEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
    },
    attachShader$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).attachShader$2(receiver, a0, a1);
    },
    beginTransformFeedback$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).beginTransformFeedback$1(receiver, a0);
    },
    bindBuffer$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).bindBuffer$2(receiver, a0, a1);
    },
    bindFramebuffer$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).bindFramebuffer$2(receiver, a0, a1);
    },
    bindTexture$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).bindTexture$2(receiver, a0, a1);
    },
    bindVertexArray$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).bindVertexArray$1(receiver, a0);
    },
    blendEquation$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).blendEquation$1(receiver, a0);
    },
    blendFunc$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).blendFunc$2(receiver, a0, a1);
    },
    bufferData$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).bufferData$3(receiver, a0, a1, a2);
    },
    checkFramebufferStatus$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).checkFramebufferStatus$1(receiver, a0);
    },
    clear$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).clear$1(receiver, a0);
    },
    clearColor$4$x: function(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$x(receiver).clearColor$4(receiver, a0, a1, a2, a3);
    },
    compareTo$1$ns: function(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$2$asx: function(receiver, a0, a1) {
      return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
    },
    createBuffer$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).createBuffer$0(receiver);
    },
    createFramebuffer$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).createFramebuffer$0(receiver);
    },
    createProgram$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).createProgram$0(receiver);
    },
    createTexture$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).createTexture$0(receiver);
    },
    createVertexArray$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).createVertexArray$0(receiver);
    },
    depthMask$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).depthMask$1(receiver, a0);
    },
    disable$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).disable$1(receiver, a0);
    },
    drawArrays$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).drawArrays$3(receiver, a0, a1, a2);
    },
    drawArraysInstanced$4$x: function(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$x(receiver).drawArraysInstanced$4(receiver, a0, a1, a2, a3);
    },
    drawElements$4$x: function(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$x(receiver).drawElements$4(receiver, a0, a1, a2, a3);
    },
    drawElementsInstanced$5$x: function(receiver, a0, a1, a2, a3, a4) {
      return J.getInterceptor$x(receiver).drawElementsInstanced$5(receiver, a0, a1, a2, a3, a4);
    },
    elementAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    enable$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).enable$1(receiver, a0);
    },
    enableVertexAttribArray$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).enableVertexAttribArray$1(receiver, a0);
    },
    endTransformFeedback$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).endTransformFeedback$0(receiver);
    },
    forEach$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).forEach$1(receiver, a0);
    },
    framebufferTexture2D$5$x: function(receiver, a0, a1, a2, a3, a4) {
      return J.getInterceptor$x(receiver).framebufferTexture2D$5(receiver, a0, a1, a2, a3, a4);
    },
    getContextAttributes$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).getContextAttributes$0(receiver);
    },
    getError$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).getError$0(receiver);
    },
    getProgramInfoLog$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).getProgramInfoLog$1(receiver, a0);
    },
    getProgramParameter$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).getProgramParameter$2(receiver, a0, a1);
    },
    getUniformLocation$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).getUniformLocation$2(receiver, a0, a1);
    },
    linkProgram$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).linkProgram$1(receiver, a0);
    },
    remove$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).remove$0(receiver);
    },
    startsWith$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
    },
    stencilFunc$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).stencilFunc$3(receiver, a0, a1, a2);
    },
    texParameterf$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).texParameterf$3(receiver, a0, a1, a2);
    },
    texParameteri$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).texParameteri$3(receiver, a0, a1, a2);
    },
    texStorage2D$5$x: function(receiver, a0, a1, a2, a3, a4) {
      return J.getInterceptor$x(receiver).texStorage2D$5(receiver, a0, a1, a2, a3, a4);
    },
    toLowerCase$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    transformFeedbackVaryings$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).transformFeedbackVaryings$3(receiver, a0, a1, a2);
    },
    trim$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).trim$0(receiver);
    },
    uniform1f$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).uniform1f$2(receiver, a0, a1);
    },
    uniform1fv$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).uniform1fv$2(receiver, a0, a1);
    },
    uniform1i$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).uniform1i$2(receiver, a0, a1);
    },
    uniform1iv$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).uniform1iv$2(receiver, a0, a1);
    },
    uniform2fv$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).uniform2fv$2(receiver, a0, a1);
    },
    uniform3fv$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).uniform3fv$2(receiver, a0, a1);
    },
    uniform4fv$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).uniform4fv$2(receiver, a0, a1);
    },
    uniformMatrix3fv$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).uniformMatrix3fv$3(receiver, a0, a1, a2);
    },
    uniformMatrix4fv$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).uniformMatrix4fv$3(receiver, a0, a1, a2);
    },
    useProgram$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).useProgram$1(receiver, a0);
    },
    vertexAttribDivisor$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).vertexAttribDivisor$2(receiver, a0, a1);
    },
    vertexAttribPointer$6$x: function(receiver, a0, a1, a2, a3, a4, a5) {
      return J.getInterceptor$x(receiver).vertexAttribPointer$6(receiver, a0, a1, a2, a3, a4, a5);
    },
    viewport$4$x: function(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$x(receiver).viewport$4(receiver, a0, a1, a2, a3);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2, t3) {
      var _ = this;
      _.__interceptors$_iterable = t0;
      _.__interceptors$_length = t1;
      _._index = t2;
      _.__interceptors$_current = null;
      _.$ti = t3;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSDouble: function JSDouble() {
    },
    JSString: function JSString() {
    }
  },
  P = {
    _AsyncRun__initializeScheduleImmediate: function() {
      var t1, div, span;
      t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer: function(callback) {
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      P._TimerImpl$(0, callback);
    },
    _TimerImpl$: function(milliseconds, callback) {
      var t1 = new P._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _Future__chainForeignFuture: function(source, target) {
      var e, s, exception;
      target._state = 1;
      try {
        source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
      }
    },
    _Future__chainCoreFuture: function(source, target) {
      var t1, listeners;
      for (; t1 = source._state, t1 === 2;)
        source = H.interceptedTypeCheck(source._resultOrListeners, "$is_Future");
      if (t1 >= 4) {
        listeners = target._removeListeners$0();
        target._state = source._state;
        target._resultOrListeners = source._resultOrListeners;
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = H.interceptedTypeCheck(target._resultOrListeners, "$is_FutureListener");
        target._state = 2;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners: function(source, listeners) {
      var _box_1, t1, _box_0, hasError, asyncError, t2, t3, listeners0, sourceResult, zone, t4, oldZone, current, result;
      _box_1 = {};
      _box_1.source = source;
      for (t1 = source; true;) {
        _box_0 = {};
        hasError = t1._state === 8;
        if (listeners == null) {
          if (hasError) {
            asyncError = H.interceptedTypeCheck(t1._resultOrListeners, "$isAsyncError");
            t1 = t1._zone;
            t2 = asyncError.error;
            t3 = asyncError.stackTrace;
            t1.toString;
            P._rootHandleUncaughtError(null, null, t1, t2, t3);
          }
          return;
        }
        for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
          listeners._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, listeners);
        }
        t1 = _box_1.source;
        sourceResult = t1._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        t2 = !hasError;
        if (t2) {
          t3 = listeners.state;
          t3 = (t3 & 1) !== 0 || t3 === 8;
        } else
          t3 = true;
        if (t3) {
          t3 = listeners.result;
          zone = t3._zone;
          if (hasError) {
            t4 = t1._zone;
            t4.toString;
            t4 = t4 == zone;
            if (!t4)
              zone.toString;
            else
              t4 = true;
            t4 = !t4;
          } else
            t4 = false;
          if (t4) {
            H.interceptedTypeCheck(sourceResult, "$isAsyncError");
            t1 = t1._zone;
            t2 = sourceResult.error;
            t3 = sourceResult.stackTrace;
            t1.toString;
            P._rootHandleUncaughtError(null, null, t1, t2, t3);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone != zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = listeners.state;
          if (t1 === 8)
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, listeners, hasError).call$0();
          else if (t2) {
            if ((t1 & 1) !== 0)
              new P._Future__propagateToListeners_handleValueCallback(_box_0, listeners, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new P._Future__propagateToListeners_handleError(_box_1, _box_0, listeners).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (!!J.getInterceptor$(t1).$isFuture) {
            if (t1._state >= 4) {
              current = H.interceptedTypeCheck(t3._resultOrListeners, "$is_FutureListener");
              t3._resultOrListeners = null;
              listeners = t3._reverseListeners$1(current);
              t3._state = t1._state;
              t3._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              P._Future__chainCoreFuture(t1, t3);
            return;
          }
        }
        result = listeners.result;
        current = H.interceptedTypeCheck(result._resultOrListeners, "$is_FutureListener");
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t2 = _box_0.listenerValueOrError;
        if (!t1) {
          H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(result, 0));
          result._state = 4;
          result._resultOrListeners = t2;
        } else {
          H.interceptedTypeCheck(t2, "$isAsyncError");
          result._state = 8;
          result._resultOrListeners = t2;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler: function(errorHandler, zone) {
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object, P.StackTrace]}))
        return H.functionTypeCheck(errorHandler, {func: 1, ret: null, args: [P.Object, P.StackTrace]});
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object]}))
        return H.functionTypeCheck(errorHandler, {func: 1, ret: null, args: [P.Object]});
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.callback.call$0();
      }
    },
    _startMicrotaskLoop: function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(H.functionTypeCheck(callback, {func: 1, ret: -1}));
      if ($._nextCallback == null) {
        $._lastCallback = newEntry;
        $._nextCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else {
        $._lastCallback.next = newEntry;
        $._lastCallback = newEntry;
      }
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var t1, entry, t2;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._lastPriorityCallback = entry;
        $._nextCallback = entry;
      } else {
        entry.next = t2.next;
        t2.next = entry;
        $._lastPriorityCallback = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var t1, currentZone;
      t1 = {func: 1, ret: -1};
      H.functionTypeCheck(callback, t1);
      currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
        return;
      }
      currentZone.toString;
      P._rootScheduleMicrotask(null, null, currentZone, H.functionTypeCheck(currentZone.bindCallbackGuarded$1(callback), t1));
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R});
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      t1 = C.C__RootZone !== zone;
      if (t1)
        f = !(!t1 || false) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, -1);
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _Completer: function _Completer() {
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1, t2) {
      var _ = this;
      _._state = t0;
      _._zone = t1;
      _._resultOrListeners = null;
      _.$ti = t2;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.target = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2, t3) {
      var _ = this;
      _._box_1 = t0;
      _._box_0 = t1;
      _.listener = t2;
      _.hasError = t3;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1, t2) {
      this._box_0 = t0;
      this.listener = t1;
      this.sourceResult = t2;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1, t2) {
      this._box_1 = t0;
      this._box_0 = t1;
      this.listener = t2;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    StreamSubscription: function StreamSubscription() {
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _Zone: function _Zone() {
    },
    _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0, t1) {
      this._box_0 = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      H.listTypeCheck(keyValuePairs);
      return H.assertSubtype(H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap([$K, $V])), "$isLinkedHashMap", [$K, $V], "$asLinkedHashMap");
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap([$K, $V]);
    },
    LinkedHashSet_LinkedHashSet: function($E) {
      return new P._LinkedHashSet([$E]);
    },
    _LinkedHashSet__newHashTable: function() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$: function(_set, _modifications, $E) {
      var t1 = new P._LinkedHashSetIterator(_set, _modifications, [$E]);
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = H.setRuntimeTypeInfo([], [P.String]);
      t1 = $.$get$_toStringVisiting();
      C.JSArray_methods.add$1(t1, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, H.listSuperNativeTypeCheck(parts, "$isIterable"), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1, t2;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      t1 = $.$get$_toStringVisiting();
      C.JSArray_methods.add$1(t1, iterable);
      try {
        t2 = buffer;
        t2._contents = P.StringBuffer__writeAll(t2._contents, iterable, ", ");
      } finally {
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var i, t1;
      for (i = 0; t1 = $.$get$_toStringVisiting(), i < t1.length; ++i)
        if (o === t1[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
      H.assertSubtype(parts, "$isList", [P.String], "$asList");
      it = iterable.get$iterator(iterable);
      $length = 0;
      count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current(it));
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current(it);
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current(it);
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current(it);
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashSet_LinkedHashSet$from: function(elements, $E) {
      var result, t1, _i;
      result = P.LinkedHashSet_LinkedHashSet($E);
      for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, H.throwConcurrentModificationError)(elements), ++_i)
        result.add$1(0, H.assertSubtypeOfRuntimeType(elements[_i], $E));
      return result;
    },
    MapBase_mapToString: function(m) {
      var result, t1;
      t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($.$get$_toStringVisiting(), m);
        result._contents += "{";
        t1.first = true;
        J.forEach$1$x(m, new P.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        t1 = $.$get$_toStringVisiting();
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    _SetBase: function _SetBase() {
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    double_parse: function(source) {
      var value = H.Primitives_parseDouble(source);
      if (value != null)
        return value;
      throw H.wrapException(new P.FormatException("Invalid double", source, null));
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += H.S(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        string += H.S(iterator.get$current(iterator));
        for (; iterator.moveNext$0();)
          string = string + separator + H.S(iterator.get$current(iterator));
      }
      return string;
    },
    DateTime__fourDigits: function(n) {
      var absN, sign;
      absN = Math.abs(n);
      sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits: function(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Duration$: function(milliseconds, seconds) {
      return new P.Duration(1000000 * seconds + 1000 * milliseconds);
    },
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message);
    },
    RangeError$value: function(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValidRange: function(start, end, $length) {
      if (0 > start || start > $length)
        throw H.wrapException(P.RangeError$range(start, 0, $length, "start", null));
      if (start > end || end > $length)
        throw H.wrapException(P.RangeError$range(end, start, $length, "end", null));
      return end;
    },
    RangeError_checkNotNegative: function(value, $name) {
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0)
        throw H.wrapException(P.RangeError$range(value, 0, null, $name, null));
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      var t1 = H.intTypeCheck($length == null ? J.get$length$asx(indexable) : $length);
      return new P.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message);
    },
    StateError$: function(message) {
      return new P.StateError(message);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception: function(message) {
      return new P._Exception(message);
    },
    print: function(object) {
      H.printString(H.S(object));
    },
    bool: function bool() {
    },
    DateTime: function DateTime(t0, t1) {
      this._value = t0;
      this.isUtc = t1;
    },
    double: function double() {
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    Duration_toString_sixDigits: function Duration_toString_sixDigits() {
    },
    Duration_toString_twoDigits: function Duration_toString_twoDigits() {
    },
    Error: function Error() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    Function: function Function() {
    },
    int: function int() {
    },
    Iterable: function Iterable() {
    },
    Iterator: function Iterator() {
    },
    List: function List() {
    },
    Map: function Map() {
    },
    Null: function Null() {
    },
    num: function num() {
    },
    Object: function Object() {
    },
    StackTrace: function StackTrace() {
    },
    String: function String() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    convertNativeToDart_Dictionary: function(object) {
      var dict, keys, t1, _i, key;
      if (object == null)
        return;
      dict = P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
      keys = Object.getOwnPropertyNames(object);
      for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
        key = H.stringTypeCheck(keys[_i]);
        dict.$indexSet(0, key, object[key]);
      }
      return dict;
    },
    convertDartToNative_Dictionary: function(dict) {
      var object = {};
      dict.forEach$1(0, new P.convertDartToNative_Dictionary_closure(object));
      return object;
    },
    Device_isOpera: function() {
      var t1 = $.Device__isOpera;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
        $.Device__isOpera = t1;
      }
      return t1;
    },
    Device_cssPrefix: function() {
      var prefix, t1;
      prefix = $.Device__cachedCssPrefix;
      if (prefix != null)
        return prefix;
      t1 = $.Device__isFirefox;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Firefox", 0);
        $.Device__isFirefox = t1;
      }
      if (t1)
        prefix = "-moz-";
      else {
        t1 = $.Device__isIE;
        if (t1 == null) {
          t1 = !P.Device_isOpera() && J.contains$2$asx(window.navigator.userAgent, "Trident/", 0);
          $.Device__isIE = t1;
        }
        if (t1)
          prefix = "-ms-";
        else
          prefix = P.Device_isOpera() ? "-o-" : "-webkit-";
      }
      $.Device__cachedCssPrefix = prefix;
      return prefix;
    },
    convertDartToNative_Dictionary_closure: function convertDartToNative_Dictionary_closure(t0) {
      this.object = t0;
    },
    OpenDBRequest: function OpenDBRequest() {
    },
    Request: function Request() {
    },
    VersionChangeEvent: function VersionChangeEvent() {
    },
    sqrt: function(x) {
      return Math.sqrt(x);
    },
    _JenkinsSmiHash_combine0: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    Point: function Point(t0, t1, t2) {
      this.x = t0;
      this.y = t1;
      this.$ti = t2;
    },
    _RectangleBase: function _RectangleBase() {
    },
    Rectangle: function Rectangle() {
    },
    Length: function Length() {
    },
    LengthList: function LengthList() {
    },
    Number: function Number() {
    },
    NumberList: function NumberList() {
    },
    PointList: function PointList() {
    },
    ScriptElement: function ScriptElement() {
    },
    StringList: function StringList() {
    },
    SvgElement: function SvgElement() {
    },
    Transform: function Transform() {
    },
    TransformList: function TransformList() {
    },
    _LengthList_Interceptor_ListMixin: function _LengthList_Interceptor_ListMixin() {
    },
    _LengthList_Interceptor_ListMixin_ImmutableListMixin: function _LengthList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NumberList_Interceptor_ListMixin: function _NumberList_Interceptor_ListMixin() {
    },
    _NumberList_Interceptor_ListMixin_ImmutableListMixin: function _NumberList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _StringList_Interceptor_ListMixin: function _StringList_Interceptor_ListMixin() {
    },
    _StringList_Interceptor_ListMixin_ImmutableListMixin: function _StringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TransformList_Interceptor_ListMixin: function _TransformList_Interceptor_ListMixin() {
    },
    _TransformList_Interceptor_ListMixin_ImmutableListMixin: function _TransformList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    Float32List: function Float32List() {
    },
    AudioBuffer: function AudioBuffer() {
    },
    AudioParamMap: function AudioParamMap() {
    },
    AudioParamMap_keys_closure: function AudioParamMap_keys_closure(t0) {
      this.keys = t0;
    },
    AudioTrackList: function AudioTrackList() {
    },
    BaseAudioContext: function BaseAudioContext() {
    },
    OfflineAudioContext: function OfflineAudioContext() {
    },
    _AudioParamMap_Interceptor_MapMixin: function _AudioParamMap_Interceptor_MapMixin() {
    },
    Buffer: function Buffer() {
    },
    Framebuffer0: function Framebuffer0() {
    },
    Program: function Program() {
    },
    RenderingContext: function RenderingContext() {
    },
    RenderingContext2: function RenderingContext2() {
    },
    Shader: function Shader() {
    },
    Texture0: function Texture0() {
    },
    UniformLocation: function UniformLocation() {
    },
    VertexArrayObject: function VertexArrayObject() {
    },
    SqlResultSetRowList: function SqlResultSetRowList() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin: function _SqlResultSetRowList_Interceptor_ListMixin() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin: function _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin() {
    }
  },
  W = {
    Element_Element$html: function(html, treeSanitizer, validator) {
      var t1, fragment;
      t1 = document.body;
      fragment = (t1 && C.BodyElement_methods).createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator);
      fragment.toString;
      t1 = W.Node0;
      t1 = new H.WhereIterable(new W._ChildNodeListLazy(fragment), H.functionTypeCheck(new W.Element_Element$html_closure(), {func: 1, ret: P.bool, args: [t1]}), [t1]);
      return H.interceptedTypeCheck(t1.get$single(t1), "$isElement");
    },
    Element__determineMouseWheelEventType: function(e) {
      H.interceptedTypeCheck(e, "$isEventTarget");
      return "wheel";
    },
    Element__safeTagName: function(element) {
      var result, t1, exception;
      result = "element tag unavailable";
      try {
        t1 = J.get$tagName$x(element);
        if (typeof t1 === "string")
          result = element.tagName;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return result;
    },
    _ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
      return document.createElement(tag);
    },
    _JenkinsSmiHash_combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_hash4: function(a, b, c, d) {
      var t1, hash;
      t1 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, a), b), c), d);
      hash = 536870911 & t1 + ((67108863 & t1) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
      var t1 = W._wrapZone(new W._EventStreamSubscription_closure(onData), W.Event);
      if (t1 != null && true)
        J.addEventListener$3$x(_target, _eventType, t1, false);
      return new W._EventStreamSubscription(_target, _eventType, t1, false, [$T]);
    },
    _Html5NodeValidator$: function(uriPolicy) {
      var e, t1;
      e = document.createElement("a");
      t1 = new W._SameOriginUriPolicy(e, window.location);
      t1 = new W._Html5NodeValidator(t1);
      t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
      return t1;
    },
    _Html5NodeValidator__standardAttributeValidator: function(element, attributeName, value, context) {
      H.interceptedTypeCheck(element, "$isElement");
      H.stringTypeCheck(attributeName);
      H.stringTypeCheck(value);
      H.interceptedTypeCheck(context, "$is_Html5NodeValidator");
      return true;
    },
    _Html5NodeValidator__uriAttributeValidator: function(element, attributeName, value, context) {
      var t1, t2, t3;
      H.interceptedTypeCheck(element, "$isElement");
      H.stringTypeCheck(attributeName);
      H.stringTypeCheck(value);
      t1 = H.interceptedTypeCheck(context, "$is_Html5NodeValidator").uriPolicy;
      t2 = t1._hiddenAnchor;
      t2.href = value;
      t3 = t2.hostname;
      t1 = t1._loc;
      if (!(t3 == t1.hostname && t2.port == t1.port && t2.protocol == t1.protocol))
        if (t3 === "")
          if (t2.port === "") {
            t1 = t2.protocol;
            t1 = t1 === ":" || t1 === "";
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = true;
      return t1;
    },
    _TemplatingNodeValidator$: function() {
      var t1, t2, t3, t4, t5;
      t1 = P.String;
      t2 = P.LinkedHashSet_LinkedHashSet$from(C.List_wSV, t1);
      t3 = H.getTypeArgumentByIndex(C.List_wSV, 0);
      t4 = H.functionTypeCheck(new W._TemplatingNodeValidator_closure(), {func: 1, ret: t1, args: [t3]});
      t5 = H.setRuntimeTypeInfo(["TEMPLATE"], [t1]);
      t2 = new W._TemplatingNodeValidator(t2, P.LinkedHashSet_LinkedHashSet(t1), P.LinkedHashSet_LinkedHashSet(t1), P.LinkedHashSet_LinkedHashSet(t1), null);
      t2._SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(null, new H.MappedListIterable(C.List_wSV, t4, [t3, t1]), t5, null);
      return t2;
    },
    _convertNativeToDart_EventTarget: function(e) {
      var $window;
      if (e == null)
        return;
      if ("postMessage" in e) {
        $window = W._DOMWindowCrossFrame__createSafe(e);
        if (!!J.getInterceptor$($window).$isEventTarget)
          return $window;
        return;
      } else
        return H.interceptedTypeCheck(e, "$isEventTarget");
    },
    _DOMWindowCrossFrame__createSafe: function(w) {
      if (w === window)
        return H.interceptedTypeCheck(w, "$isWindowBase");
      else
        return new W._DOMWindowCrossFrame();
    },
    _wrapZone: function(callback, $T) {
      var t1;
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [$T]});
      t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    HtmlElement: function HtmlElement() {
    },
    AccessibleNodeList: function AccessibleNodeList() {
    },
    AnchorElement: function AnchorElement() {
    },
    AreaElement: function AreaElement() {
    },
    BaseElement: function BaseElement() {
    },
    Blob: function Blob() {
    },
    BodyElement: function BodyElement() {
    },
    CanvasElement: function CanvasElement() {
    },
    CanvasRenderingContext2D: function CanvasRenderingContext2D() {
    },
    CharacterData: function CharacterData() {
    },
    CssNumericValue: function CssNumericValue() {
    },
    CssPerspective: function CssPerspective() {
    },
    CssRule: function CssRule() {
    },
    CssStyleDeclaration: function CssStyleDeclaration() {
    },
    CssStyleDeclarationBase: function CssStyleDeclarationBase() {
    },
    CssStyleValue: function CssStyleValue() {
    },
    CssTransformComponent: function CssTransformComponent() {
    },
    CssTransformValue: function CssTransformValue() {
    },
    CssUnparsedValue: function CssUnparsedValue() {
    },
    DataTransferItemList: function DataTransferItemList() {
    },
    DivElement: function DivElement() {
    },
    Document: function Document() {
    },
    DomException: function DomException() {
    },
    DomRectList: function DomRectList() {
    },
    DomRectReadOnly: function DomRectReadOnly() {
    },
    DomStringList: function DomStringList() {
    },
    DomTokenList: function DomTokenList() {
    },
    Element: function Element() {
    },
    Element_Element$html_closure: function Element_Element$html_closure() {
    },
    Event: function Event() {
    },
    EventTarget: function EventTarget() {
    },
    File: function File() {
    },
    FileList: function FileList() {
    },
    FileWriter: function FileWriter() {
    },
    FormElement: function FormElement() {
    },
    Gamepad: function Gamepad() {
    },
    History: function History() {
    },
    HtmlCollection: function HtmlCollection() {
    },
    InputElement: function InputElement() {
    },
    KeyboardEvent: function KeyboardEvent() {
    },
    Location: function Location() {
    },
    MediaList: function MediaList() {
    },
    MidiInputMap: function MidiInputMap() {
    },
    MidiInputMap_keys_closure: function MidiInputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MidiOutputMap: function MidiOutputMap() {
    },
    MidiOutputMap_keys_closure: function MidiOutputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MimeType: function MimeType() {
    },
    MimeTypeArray: function MimeTypeArray() {
    },
    MouseEvent: function MouseEvent() {
    },
    _ChildNodeListLazy: function _ChildNodeListLazy(t0) {
      this._this = t0;
    },
    Node0: function Node0() {
    },
    NodeList: function NodeList() {
    },
    Plugin: function Plugin() {
    },
    PluginArray: function PluginArray() {
    },
    RtcStatsReport: function RtcStatsReport() {
    },
    RtcStatsReport_keys_closure: function RtcStatsReport_keys_closure(t0) {
      this.keys = t0;
    },
    SelectElement: function SelectElement() {
    },
    SourceBuffer: function SourceBuffer() {
    },
    SourceBufferList: function SourceBufferList() {
    },
    SpeechGrammar: function SpeechGrammar() {
    },
    SpeechGrammarList: function SpeechGrammarList() {
    },
    SpeechRecognitionResult: function SpeechRecognitionResult() {
    },
    Storage: function Storage() {
    },
    Storage_keys_closure: function Storage_keys_closure(t0) {
      this.keys = t0;
    },
    StyleSheet: function StyleSheet() {
    },
    TableElement: function TableElement() {
    },
    TableRowElement: function TableRowElement() {
    },
    TableSectionElement: function TableSectionElement() {
    },
    TemplateElement: function TemplateElement() {
    },
    TextTrack: function TextTrack() {
    },
    TextTrackCue: function TextTrackCue() {
    },
    TextTrackCueList: function TextTrackCueList() {
    },
    TextTrackList: function TextTrackList() {
    },
    TimeRanges: function TimeRanges() {
    },
    Touch: function Touch() {
    },
    TouchList: function TouchList() {
    },
    TrackDefaultList: function TrackDefaultList() {
    },
    UIEvent: function UIEvent() {
    },
    Url: function Url() {
    },
    VideoTrackList: function VideoTrackList() {
    },
    WheelEvent: function WheelEvent() {
    },
    Window: function Window() {
    },
    Window_animationFrame_closure: function Window_animationFrame_closure(t0) {
      this.completer = t0;
    },
    _Attr: function _Attr() {
    },
    _CssRuleList: function _CssRuleList() {
    },
    _DomRect: function _DomRect() {
    },
    _GamepadList: function _GamepadList() {
    },
    _NamedNodeMap: function _NamedNodeMap() {
    },
    _SpeechRecognitionResultList: function _SpeechRecognitionResultList() {
    },
    _StyleSheetList: function _StyleSheetList() {
    },
    _AttributeMap: function _AttributeMap() {
    },
    _ElementAttributeMap: function _ElementAttributeMap(t0) {
      this._html$_element = t0;
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _ElementEventStreamImpl: function _ElementEventStreamImpl(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._pauseCount = 0;
      _._target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    },
    _CustomEventStreamProvider: function _CustomEventStreamProvider(t0, t1) {
      this._eventTypeGetter = t0;
      this.$ti = t1;
    },
    _Html5NodeValidator: function _Html5NodeValidator(t0) {
      this.uriPolicy = t0;
    },
    ImmutableListMixin: function ImmutableListMixin() {
    },
    NodeValidatorBuilder: function NodeValidatorBuilder(t0) {
      this._validators = t0;
    },
    NodeValidatorBuilder_allowsElement_closure: function NodeValidatorBuilder_allowsElement_closure(t0) {
      this.element = t0;
    },
    NodeValidatorBuilder_allowsAttribute_closure: function NodeValidatorBuilder_allowsAttribute_closure(t0, t1, t2) {
      this.element = t0;
      this.attributeName = t1;
      this.value = t2;
    },
    _SimpleNodeValidator: function _SimpleNodeValidator() {
    },
    _SimpleNodeValidator_closure: function _SimpleNodeValidator_closure() {
    },
    _SimpleNodeValidator_closure0: function _SimpleNodeValidator_closure0() {
    },
    _TemplatingNodeValidator: function _TemplatingNodeValidator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._templateAttrs = t0;
      _.allowedElements = t1;
      _.allowedAttributes = t2;
      _.allowedUriAttributes = t3;
      _.uriPolicy = t4;
    },
    _TemplatingNodeValidator_closure: function _TemplatingNodeValidator_closure() {
    },
    _SvgNodeValidator: function _SvgNodeValidator() {
    },
    FixedSizeListIterator: function FixedSizeListIterator(t0, t1, t2, t3) {
      var _ = this;
      _._array = t0;
      _._length = t1;
      _._position = t2;
      _._html$_current = null;
      _.$ti = t3;
    },
    _DOMWindowCrossFrame: function _DOMWindowCrossFrame() {
    },
    NodeValidator: function NodeValidator() {
    },
    _SameOriginUriPolicy: function _SameOriginUriPolicy(t0, t1) {
      this._hiddenAnchor = t0;
      this._loc = t1;
    },
    _ValidatingTreeSanitizer: function _ValidatingTreeSanitizer(t0) {
      this.validator = t0;
    },
    _ValidatingTreeSanitizer_sanitizeTree_walk: function _ValidatingTreeSanitizer_sanitizeTree_walk(t0) {
      this.$this = t0;
    },
    _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase: function _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase() {
    },
    _DomRectList_Interceptor_ListMixin: function _DomRectList_Interceptor_ListMixin() {
    },
    _DomRectList_Interceptor_ListMixin_ImmutableListMixin: function _DomRectList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _DomStringList_Interceptor_ListMixin: function _DomStringList_Interceptor_ListMixin() {
    },
    _DomStringList_Interceptor_ListMixin_ImmutableListMixin: function _DomStringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _FileList_Interceptor_ListMixin: function _FileList_Interceptor_ListMixin() {
    },
    _FileList_Interceptor_ListMixin_ImmutableListMixin: function _FileList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin: function _HtmlCollection_Interceptor_ListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin: function _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _MidiInputMap_Interceptor_MapMixin: function _MidiInputMap_Interceptor_MapMixin() {
    },
    _MidiOutputMap_Interceptor_MapMixin: function _MidiOutputMap_Interceptor_MapMixin() {
    },
    _MimeTypeArray_Interceptor_ListMixin: function _MimeTypeArray_Interceptor_ListMixin() {
    },
    _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin: function _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NodeList_Interceptor_ListMixin: function _NodeList_Interceptor_ListMixin() {
    },
    _NodeList_Interceptor_ListMixin_ImmutableListMixin: function _NodeList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _PluginArray_Interceptor_ListMixin: function _PluginArray_Interceptor_ListMixin() {
    },
    _PluginArray_Interceptor_ListMixin_ImmutableListMixin: function _PluginArray_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _RtcStatsReport_Interceptor_MapMixin: function _RtcStatsReport_Interceptor_MapMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin: function _SourceBufferList_EventTarget_ListMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin: function _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _SpeechGrammarList_Interceptor_ListMixin: function _SpeechGrammarList_Interceptor_ListMixin() {
    },
    _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin: function _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _Storage_Interceptor_MapMixin: function _Storage_Interceptor_MapMixin() {
    },
    _TextTrackCueList_Interceptor_ListMixin: function _TextTrackCueList_Interceptor_ListMixin() {
    },
    _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin: function _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin: function _TextTrackList_EventTarget_ListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin_ImmutableListMixin: function _TextTrackList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _TouchList_Interceptor_ListMixin: function _TouchList_Interceptor_ListMixin() {
    },
    _TouchList_Interceptor_ListMixin_ImmutableListMixin: function _TouchList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __CssRuleList_Interceptor_ListMixin: function __CssRuleList_Interceptor_ListMixin() {
    },
    __CssRuleList_Interceptor_ListMixin_ImmutableListMixin: function __CssRuleList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __GamepadList_Interceptor_ListMixin: function __GamepadList_Interceptor_ListMixin() {
    },
    __GamepadList_Interceptor_ListMixin_ImmutableListMixin: function __GamepadList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin: function __NamedNodeMap_Interceptor_ListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin: function __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin() {
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __StyleSheetList_Interceptor_ListMixin: function __StyleSheetList_Interceptor_ListMixin() {
    },
    __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin: function __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin() {
    }
  },
  G = {
    _AddLineNumbers: function(text) {
      var out, i, i0, t1;
      out = H.setRuntimeTypeInfo(text.split("\n"), [P.String]);
      for (i = 0; i < out.length; i = i0) {
        i0 = i + 1;
        t1 = "" + i0 + ": ";
        if (i >= out.length)
          return H.ioore(out, i);
        C.JSArray_methods.$indexSet(out, i, t1 + H.S(out[i]));
      }
      return C.JSArray_methods.join$1(out, "\n");
    },
    _CompileShader: function(gl, type, text) {
      var t1, shader, result, error;
      t1 = J.getInterceptor$x(gl);
      shader = t1.createShader$1(gl, type);
      t1.shaderSource$2(gl, shader, text);
      t1.compileShader$1(gl, shader);
      result = H.boolTypeCheck(t1.getShaderParameter$2(gl, shader, 35713));
      if (result != null && !result) {
        error = t1.getShaderInfoLog$1(gl, shader);
        P.print("E:Compilation failed:");
        P.print("E:" + G._AddLineNumbers(text));
        P.print("E:Failure:");
        P.print(C.JSString_methods.$add("E:", error));
        throw H.wrapException(error);
      }
      return shader;
    },
    Face3$: function(a, b, c) {
      return new G.Face3(a, b, c);
    },
    NormalFromPoints: function(a, b, c, temp, normal) {
      var t1, x, y, z, otherStorage, ox, oy, oz, len;
      temp.setFrom$1(b);
      temp.sub$1(0, a);
      normal.setFrom$1(c);
      normal.sub$1(0, a);
      t1 = normal._v3storage;
      x = t1[0];
      y = t1[1];
      z = t1[2];
      otherStorage = temp._v3storage;
      ox = otherStorage[0];
      oy = otherStorage[1];
      oz = otherStorage[2];
      t1[0] = y * oz - z * oy;
      t1[1] = z * ox - x * oz;
      t1[2] = x * oy - y * ox;
      len = Math.sqrt(normal.get$length2());
      if (len === 0)
        return false;
      normal.scale$1(0, -1 / len);
      return true;
    },
    Illumination__SetLightInfo: function(descs, types, lights) {
      var t1, n, _i, l, t2;
      H.assertSubtype(lights, "$isList", [G.Light], "$asList");
      C.NativeFloat32List_methods.fillRange$3(descs, 0, descs.length, 0);
      C.NativeFloat32List_methods.fillRange$3(types, 0, 4, 0);
      for (t1 = lights.length, n = 0, _i = 0; _i < lights.length; lights.length === t1 || (0, H.throwConcurrentModificationError)(lights), ++_i) {
        l = lights[_i];
        if (l.enabled) {
          l.ExtractInfo$2(descs, n * 16);
          t2 = l.type;
          if (n >= 4)
            return H.ioore(types, n);
          types[n] = t2;
          ++n;
        }
      }
    },
    Material$: function($name) {
      var t1 = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.Object);
      t1.$indexSet(0, "cDepthTest", true);
      t1.$indexSet(0, "cDepthWrite", true);
      t1.$indexSet(0, "cBlendEquation", $.$get$BlendEquationNone());
      t1.$indexSet(0, "cStencilFunc", $.$get$StencilFunctionNone());
      return new G.Material(t1, $name);
    },
    FlattenVector3List: function(v) {
      var t1, data, i, t2, t3, t4, t5;
      H.assertSubtype(v, "$isList", [T.Vector3], "$asList");
      t1 = v.length;
      data = new Float32Array(t1 * 3);
      for (t1 = v.length, i = 0; i < t1; ++i) {
        t2 = i * 3;
        t3 = v[i]._v3storage[0];
        t4 = data.length;
        if (t2 >= t4)
          return H.ioore(data, t2);
        data[t2] = t3;
        t3 = t2 + 1;
        t5 = v[i]._v3storage[1];
        if (t3 >= t4)
          return H.ioore(data, t3);
        data[t3] = t5;
        t2 += 2;
        t5 = v[i]._v3storage[2];
        if (t2 >= t4)
          return H.ioore(data, t2);
        data[t2] = t5;
      }
      return data;
    },
    FlattenVector2List: function(v) {
      var t1, data, i, t2, t3, t4;
      H.assertSubtype(v, "$isList", [T.Vector2], "$asList");
      t1 = v.length;
      data = new Float32Array(t1 * 2);
      for (t1 = v.length, i = 0; i < t1; ++i) {
        t2 = i * 2;
        t3 = v[i]._v2storage[0];
        t4 = data.length;
        if (t2 >= t4)
          return H.ioore(data, t2);
        data[t2] = t3;
        ++t2;
        t3 = v[i]._v2storage[1];
        if (t2 >= t4)
          return H.ioore(data, t2);
        data[t2] = t3;
      }
      return data;
    },
    FlattenVector4List: function(v) {
      var t1, data, i, t2, t3, t4, t5;
      H.assertSubtype(v, "$isList", [T.Vector4], "$asList");
      t1 = v.length;
      data = new Float32Array(t1 * 4);
      for (t1 = v.length, i = 0; i < t1; ++i) {
        t2 = i * 4;
        t3 = v[i]._v4storage[0];
        t4 = data.length;
        if (t2 >= t4)
          return H.ioore(data, t2);
        data[t2] = t3;
        t3 = t2 + 1;
        t5 = v[i]._v4storage[1];
        if (t3 >= t4)
          return H.ioore(data, t3);
        data[t3] = t5;
        t5 = t2 + 2;
        t3 = v[i]._v4storage[2];
        if (t5 >= t4)
          return H.ioore(data, t5);
        data[t5] = t3;
        t2 += 3;
        t3 = v[i]._v4storage[3];
        if (t2 >= t4)
          return H.ioore(data, t2);
        data[t2] = t3;
      }
      return data;
    },
    FlattenUvec4List: function(v) {
      var t1, data, i;
      H.assertSubtype(v, "$isList", [[P.List, P.int]], "$asList");
      t1 = v.length;
      data = new Uint32Array(t1 * 4);
      for (i = 0; i < v.length; ++i) {
        t1 = i * 4;
        C.NativeUint32List_methods.$indexSet(data, t1, J.$index$asx(v[i], 0));
        if (i >= v.length)
          return H.ioore(v, i);
        C.NativeUint32List_methods.$indexSet(data, t1 + 1, J.$index$asx(v[i], 1));
        if (i >= v.length)
          return H.ioore(v, i);
        C.NativeUint32List_methods.$indexSet(data, t1 + 2, J.$index$asx(v[i], 2));
        if (i >= v.length)
          return H.ioore(v, i);
        C.NativeUint32List_methods.$indexSet(data, t1 + 3, J.$index$asx(v[i], 3));
      }
      return data;
    },
    MeshData$: function($name, _cgl, _drawMode, _locationMap) {
      var t1 = P.String;
      return new G.MeshData(_cgl, J.createVertexArray$0$x(_cgl._gl), _drawMode, P.LinkedHashMap_LinkedHashMap$_empty(t1, P.Object), _locationMap, -1, P.LinkedHashMap_LinkedHashMap$_empty(t1, P.Float32List), "meshdata:" + $name);
    },
    _GeometryBuilderAttributesToMeshData: function(gb, md) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, lst;
      for (t1 = gb.attributes, t2 = new H.LinkedHashMapKeyIterable(t1, [H.getTypeArgumentByIndex(t1, 0)]), t2 = t2.get$iterator(t2), t3 = md._locationMap, t4 = [[P.List, P.int]], t5 = [P.double], t6 = [T.Vector4], t7 = [T.Vector3], t8 = [T.Vector2]; t2.moveNext$0();) {
        t9 = t2.__js_helper$_current;
        if (!t3.containsKey$1(0, t9)) {
          t9 = "Dropping unnecessary attribute: " + H.S(t9);
          if ($.gLogLevel > 0)
            H.printString("I: " + t9);
          continue;
        }
        lst = t1.$index(0, t9);
        switch ($.$get$_VarsDb().$index(0, t9).type) {
          case "vec2":
            md.AddAttribute$3(t9, G.FlattenVector2List(H.subtypeCast(lst, "$isList", t8, "$asList")), 2);
            break;
          case "vec3":
            md.AddAttribute$3(t9, G.FlattenVector3List(H.subtypeCast(lst, "$isList", t7, "$asList")), 3);
            break;
          case "vec4":
            md.AddAttribute$3(t9, G.FlattenVector4List(H.subtypeCast(lst, "$isList", t6, "$asList")), 4);
            break;
          case "float":
            md.AddAttribute$3(t9, new Float32Array(H._ensureNativeList(H.subtypeCast(lst, "$isList", t5, "$asList"))), 1);
            break;
          case "uvec4":
            md.AddAttribute$3(t9, G.FlattenUvec4List(H.subtypeCast(lst, "$isList", t4, "$asList")), 4);
            break;
        }
      }
    },
    GeometryBuilderToMeshData: function($name, prog, gb) {
      var md = G.MeshData$($name, prog._cgl, 4, prog._shaderObjectV._canonicalToLayoutPos);
      md.AddVertices$1(G.FlattenVector3List(gb.vertices));
      md.AddFaces$1(gb.GenerateFaceIndices$0());
      G._GeometryBuilderAttributesToMeshData(gb, md);
      return md;
    },
    RenderProgram$: function($name, _cgl, _shaderObjectV, _shaderObjectF) {
      var t1, t2, t3, t4, t5, program, vs, fs;
      t1 = P.String;
      t2 = P.LinkedHashSet_LinkedHashSet(t1);
      t3 = _shaderObjectV.shader;
      t4 = _shaderObjectF.shader;
      t5 = H.assertSubtype(_shaderObjectV.transformVars, "$isList", [t1], "$asList");
      program = J.createProgram$0$x(_cgl._gl);
      vs = G._CompileShader(_cgl._gl, 35633, t3);
      J.attachShader$2$x(_cgl._gl, program, vs);
      fs = G._CompileShader(_cgl._gl, 35632, t4);
      J.attachShader$2$x(_cgl._gl, program, fs);
      if (t5.length > 0)
        J.transformFeedbackVaryings$3$x(_cgl._gl, program, t5, 35980);
      J.linkProgram$1$x(_cgl._gl, program);
      if (!H.boolTypeCheck(J.getProgramParameter$2$x(_cgl._gl, program, 35714)))
        H.throwExpression(J.getProgramInfoLog$1$x(_cgl._gl, program));
      t1 = new G.RenderProgram(_cgl, _shaderObjectV, _shaderObjectF, program, P.LinkedHashSet_LinkedHashSet$from(_shaderObjectV.attributeVars, t1), P.LinkedHashMap_LinkedHashMap$_empty(t1, P.Object), P.LinkedHashMap_LinkedHashMap$_empty(t1, t1), t2, $name);
      t1.RenderProgram$4($name, _cgl, _shaderObjectV, _shaderObjectF);
      return t1;
    },
    ShaderObject$: function($name) {
      var t1, t2;
      t1 = P.String;
      t2 = [t1];
      return new G.ShaderObject(H.setRuntimeTypeInfo([], t2), H.setRuntimeTypeInfo([], t2), H.setRuntimeTypeInfo([], t2), H.setRuntimeTypeInfo([], t2), P.LinkedHashMap_LinkedHashMap$_empty(t1, P.int));
    },
    TextureProperties$: function() {
      return new G.TextureProperties(1, 9729, 9729);
    },
    TypedTexture$: function(cgl, url, _width, _height, _internalFormat, prop) {
      var t1, t2;
      t1 = J.createTexture$0$x(cgl._gl);
      J.bindTexture$2$x(cgl._gl, 3553, t1);
      J.texStorage2D$5$x(cgl._gl, 3553, 1, _internalFormat, _width, _height);
      t2 = prop.anisotropicFilterLevel;
      if (t2 !== 1)
        J.texParameterf$3$x(cgl._gl, 3553, 34046, t2);
      t2 = prop.magFilter;
      J.texParameteri$3$x(cgl._gl, 3553, 10240, t2);
      t2 = prop.minFilter;
      J.texParameteri$3$x(cgl._gl, 3553, 10241, t2);
      if (prop.clamp) {
        J.texParameteri$3$x(cgl._gl, 3553, 10242, 33071);
        J.texParameteri$3$x(cgl._gl, 3553, 10243, 33071);
      }
      if (prop.shadow)
        J.texParameteri$3$x(cgl._gl, 3553, 34892, 34894);
      J.getError$0$x(cgl._gl);
      J.bindTexture$2$x(cgl._gl, 3553, null);
      return new G.TypedTexture(_width, _height, _internalFormat, url, t1, 3553, cgl, prop);
    },
    NamedEntity: function NamedEntity() {
    },
    UniformGroup: function UniformGroup(t0, t1) {
      var _ = this;
      _._lib$_uniforms = t0;
      _.name = t1;
      _.debug = false;
      _.enabled = true;
    },
    ChronosGL: function ChronosGL(t0) {
      this._gl = null;
      this._canvas = t0;
    },
    Framebuffer: function Framebuffer(t0, t1, t2, t3, t4) {
      var _ = this;
      _._cgl = t0;
      _._framebuffer = t1;
      _.colorTexture = t2;
      _.depthTexture = t3;
      _.stencilTexture = t4;
    },
    Face3: function Face3(t0, t1, t2) {
      this.a = t0;
      this.b = t1;
      this.c = t2;
    },
    Face4: function Face4(t0, t1, t2, t3) {
      var _ = this;
      _.a = t0;
      _.b = t1;
      _.c = t2;
      _.d = t3;
    },
    GeometryBuilder: function GeometryBuilder(t0, t1, t2, t3, t4) {
      var _ = this;
      _.pointsOnly = t0;
      _._faces3 = t1;
      _._faces4 = t2;
      _.vertices = t3;
      _.attributes = t4;
    },
    Light: function Light() {
    },
    PointLight: function PointLight(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.pos = t0;
      _.range = t1;
      _.type = t2;
      _.colorDiffuse = t3;
      _.colorSpecular = t4;
      _.name = t5;
      _.debug = false;
      _.enabled = true;
    },
    DirectionalLight: function DirectionalLight(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.dir = t0;
      _.dim = t1;
      _._projViewMat = t2;
      _._tmpMat = t3;
      _.type = t4;
      _.colorDiffuse = t5;
      _.colorSpecular = t6;
      _.name = t7;
      _.debug = false;
      _.enabled = true;
    },
    SpotLight: function SpotLight(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13) {
      var _ = this;
      _.pos = t0;
      _.dir = t1;
      _.range = t2;
      _.angle = t3;
      _._spotFocus = t4;
      _._aspect = t5;
      _._near = t6;
      _._far = t7;
      _._m1 = t8;
      _._m2 = t9;
      _.type = t10;
      _.colorDiffuse = t11;
      _.colorSpecular = t12;
      _.name = t13;
      _.debug = false;
      _.enabled = true;
    },
    Illumination: function Illumination(t0, t1, t2, t3, t4) {
      var _ = this;
      _._lights = t0;
      _._lightDescs = t1;
      _._lightTypes = t2;
      _._lib$_uniforms = t3;
      _.name = t4;
      _.debug = false;
      _.enabled = true;
    },
    TheStencilFunction: function TheStencilFunction(t0, t1, t2) {
      this.func = t0;
      this.value = t1;
      this.mask = t2;
    },
    TheBlendEquation: function TheBlendEquation(t0, t1, t2) {
      this.equation = t0;
      this.srcFactor = t1;
      this.dstFactor = t2;
    },
    Material: function Material(t0, t1) {
      var _ = this;
      _._lib$_uniforms = t0;
      _.name = t1;
      _.debug = false;
      _.enabled = true;
    },
    MeshData: function MeshData(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._cgl = t0;
      _._vao = t1;
      _._drawMode = t2;
      _._buffers = t3;
      _._locationMap = t4;
      _._indexBuffer = null;
      _._instances = 0;
      _._indexBufferType = t5;
      _._faces = _._vertices = null;
      _._attributes = t6;
      _.name = t7;
      _.debug = false;
      _.enabled = true;
    },
    Perspective: function Perspective(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._camera = t0;
      _._fov = t1;
      _._aspect = t2;
      _._near = t3;
      _._far = t4;
      _._perspectiveViewMatrix = t5;
      _._viewMatrix = t6;
      _._mat = t7;
      _._lib$_uniforms = t8;
      _.name = t9;
      _.debug = false;
      _.enabled = true;
    },
    DrawStats: function DrawStats(t0, t1, t2, t3, t4) {
      var _ = this;
      _.name = t0;
      _.numInstances = t1;
      _.numItems = t2;
      _.drawMode = t3;
      _.duration = t4;
    },
    RenderProgram: function RenderProgram(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._cgl = t0;
      _._shaderObjectV = t1;
      _._shaderObjectF = t2;
      _._program = t3;
      _._attributes = t4;
      _._uniformLocations = t5;
      _._uniformsInitialized = t6;
      _._attributesInitialized = t7;
      _._nextTextureUnit = null;
      _.name = t8;
      _.debug = false;
      _.enabled = true;
    },
    ShaderVarDesc: function ShaderVarDesc(t0, t1) {
      this.type = t0;
      this.arraySize = t1;
    },
    ShaderObject: function ShaderObject(t0, t1, t2, t3, t4) {
      var _ = this;
      _.shader = null;
      _.attributeVars = t0;
      _.uniformVars = t1;
      _.varyingVars = t2;
      _.transformVars = t3;
      _._nextLayoutPos = 0;
      _._canonicalToLayoutPos = t4;
    },
    Spatial: function Spatial() {
    },
    TextureProperties: function TextureProperties(t0, t1, t2) {
      var _ = this;
      _.shadow = _.clamp = _.mipmap = false;
      _.anisotropicFilterLevel = t0;
      _.minFilter = t1;
      _.magFilter = t2;
    },
    Texture: function Texture() {
    },
    TypedTexture: function TypedTexture(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._width = t0;
      _._height = t1;
      _._internalFormat = t2;
      _._url = t3;
      _._texture = t4;
      _._textureType = t5;
      _._cgl = t6;
      _.properties = t7;
    }
  },
  R = {
    ShapeCube: function(prog, x, y, z) {
      return G.GeometryBuilderToMeshData("cube", prog, B.CubeGeometry(1, 0, 1, 0, x, y, z));
    },
    _MakeGraph: function(fg, bg, bars, height) {
      var graph, t1, t2, i, e;
      graph = document.createElement("div");
      t1 = graph.style;
      t2 = "" + bars + "px";
      t1.width = t2;
      t2 = "" + height + "px";
      t1.height = t2;
      t1.color = fg;
      t1.background = fg;
      for (i = 0; i < bars; ++i) {
        e = H.interceptedTypeCheck(W._ElementFactoryProvider_createElement_tag("span", null), "$isElement");
        t1 = e.style;
        t1.width = "1px";
        t2 = "" + height + "px";
        t1.height = t2;
        t2 = (t1 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t1, "float");
        t1.setProperty(t2, "left", "");
        t2 = C.CssStyleDeclaration_methods._browserPropertyName$1(t1, "opacity");
        t1.setProperty(t2, "0.9", "");
        t1.background = bg;
        graph.appendChild(e);
      }
      return graph;
    },
    UpdateDirectionalLightVisualizer: function(md, dim, delta, dir) {
      var t1, d, end, start, dir2y, points, x, z, t2, i, y, t3, faces;
      t1 = dir._v3storage;
      if (t1[1] === 0)
        return;
      d = dim * 0.5;
      end = delta * C.JSDouble_methods.floor$0(d / delta);
      start = -end;
      dir2y = dir.scaled$1(d).scaled$1(1 / t1[1]);
      points = H.setRuntimeTypeInfo([], [T.Vector3]);
      for (x = start; x <= end; x += delta)
        for (z = start; z <= end; z += delta) {
          t1 = new Float32Array(3);
          t2 = new T.Vector3(t1);
          t1[0] = x;
          t1[1] = 0;
          t1[2] = z;
          t2.add$1(0, dir2y);
          C.JSArray_methods.add$1(points, t2);
          t1 = new Float32Array(3);
          t2 = new T.Vector3(t1);
          t1[0] = x;
          t1[1] = 0;
          t1[2] = z;
          t2.sub$1(0, dir2y);
          C.JSArray_methods.add$1(points, t2);
        }
      for (i = 0; i < 8; ++i) {
        x = (i & 1) === 1 ? 1 : -1;
        y = (i & 2) === 2 ? 1 : -1;
        z = (i & 4) === 4 ? 1 : -1;
        if (x > 0) {
          t1 = y * d;
          t2 = z * d;
          t3 = new Float32Array(3);
          t3[0] = x * d;
          t3[1] = t1;
          t3[2] = t2;
          C.JSArray_methods.add$1(points, new T.Vector3(t3));
          t3 = new Float32Array(3);
          t3[0] = -x * d;
          t3[1] = t1;
          t3[2] = t2;
          C.JSArray_methods.add$1(points, new T.Vector3(t3));
        }
        if (y > 0) {
          t1 = x * d;
          t2 = z * d;
          t3 = new Float32Array(3);
          t3[0] = t1;
          t3[1] = y * d;
          t3[2] = t2;
          C.JSArray_methods.add$1(points, new T.Vector3(t3));
          t3 = new Float32Array(3);
          t3[0] = t1;
          t3[1] = -y * d;
          t3[2] = t2;
          C.JSArray_methods.add$1(points, new T.Vector3(t3));
        }
        if (z > 0) {
          t1 = x * d;
          t2 = y * d;
          t3 = new Float32Array(3);
          t3[0] = t1;
          t3[1] = t2;
          t3[2] = z * d;
          C.JSArray_methods.add$1(points, new T.Vector3(t3));
          t3 = new Float32Array(3);
          t3[0] = t1;
          t3[1] = t2;
          t3[2] = -z * d;
          C.JSArray_methods.add$1(points, new T.Vector3(t3));
        }
      }
      md.ChangeVertices$1(G.FlattenVector3List(points));
      t1 = new Array(points.length);
      t1.fixed$length = Array;
      faces = H.setRuntimeTypeInfo(t1, [P.int]);
      for (i = 0; i < points.length; ++i)
        C.JSArray_methods.$indexSet(faces, i, i);
      md.ChangeFaces$1(faces);
    },
    GetOrthogonalVector3: function(dir) {
      var t1, t2, t3;
      t1 = dir._v3storage;
      t2 = t1[0];
      if (t2 !== 0) {
        t3 = t1[1];
        if (t3 !== 0) {
          t1 = new T.Vector3(new Float32Array(3));
          t1.setValues$3(-t3, t2, 0);
          return t1;
        }
        t1 = t1[2];
        if (t1 !== 0) {
          t3 = new T.Vector3(new Float32Array(3));
          t3.setValues$3(-t1, 0, t2);
          return t3;
        }
        t1 = new T.Vector3(new Float32Array(3));
        t1.setValues$3(0, 1, 1);
        return t1;
      } else {
        t2 = t1[1];
        if (t2 === 0) {
          t1 = new T.Vector3(new Float32Array(3));
          t1.setValues$3(1, 1, 0);
          return t1;
        }
        t1 = t1[2];
        if (t1 === 0) {
          t1 = new T.Vector3(new Float32Array(3));
          t1.setValues$3(1, 0, 1);
          return t1;
        }
        t3 = new T.Vector3(new Float32Array(3));
        t3.setValues$3(0, -t1, t2);
        return t3;
      }
    },
    UpdateSpotLightVisualizer: function(md, pos, dir, range, angle) {
      var t1, center, points, ortho, i, p, t2, v0, v1, v2, qx, qy, qz, qw, ix, iy, iz, iw, t3, t4, faces;
      dir.toString;
      t1 = new T.Vector3(new Float32Array(3));
      t1.setFrom$1(dir);
      t1.normalize$0(0);
      center = pos.$add(0, t1.scaled$1(range));
      points = H.setRuntimeTypeInfo([pos, center], [T.Vector3]);
      ortho = R.GetOrthogonalVector3(dir);
      ortho.normalize$0(0);
      ortho.scale$1(0, Math.tan(H.checkNum(angle)) * range);
      for (i = 0; i < 8; ++i) {
        t1 = new Float32Array(3);
        p = new T.Vector3(t1);
        p.setFrom$1(ortho);
        t2 = new Float32Array(4);
        new T.Quaternion(t2).setAxisAngle$2(dir, i * 2 * 3.141592653589793 / 8);
        v0 = t1[0];
        v1 = t1[1];
        v2 = t1[2];
        qx = t2[0];
        qy = t2[1];
        qz = t2[2];
        qw = t2[3];
        ix = qw * v0 + qy * v2 - qz * v1;
        iy = qw * v1 + qz * v0 - qx * v2;
        iz = qw * v2 + qx * v1 - qy * v0;
        t2 = -qx;
        iw = t2 * v0 - qy * v1 - qz * v2;
        t3 = -qz;
        t4 = -qy;
        t1[0] = ix * qw + iw * t2 + iy * t3 - iz * t4;
        t1[1] = iy * qw + iw * t4 + iz * t2 - ix * t3;
        t1[2] = iz * qw + iw * t3 + ix * t4 - iy * t2;
        p.add$1(0, center);
        C.JSArray_methods.add$1(points, p);
      }
      faces = H.setRuntimeTypeInfo([], [P.int]);
      for (i = 1; i < points.length; ++i) {
        C.JSArray_methods.add$1(faces, 0);
        C.JSArray_methods.add$1(faces, i);
      }
      for (i = 3; t1 = points.length, i < t1; ++i) {
        C.JSArray_methods.add$1(faces, i - 1);
        C.JSArray_methods.add$1(faces, i);
      }
      C.JSArray_methods.add$1(faces, t1 - 1);
      C.JSArray_methods.add$1(faces, 2);
      for (i = 2; i < points.length; ++i)
        if (i % 2 === 0) {
          C.JSArray_methods.add$1(faces, 1);
          C.JSArray_methods.add$1(faces, i);
        }
      md.ChangeVertices$1(G.FlattenVector3List(points));
      md.ChangeFaces$1(faces);
    },
    UpdatePointLightVisualizer: function(md, pos, range) {
      var points, faces, t1, _i, v, t2, t3;
      points = H.setRuntimeTypeInfo([], [T.Vector3]);
      faces = H.setRuntimeTypeInfo([], [P.int]);
      for (t1 = $.$get$IcosahedronVertexList(), _i = 0; _i < 12; ++_i) {
        v = t1[_i];
        C.JSArray_methods.add$1(faces, points.length);
        C.JSArray_methods.add$1(faces, 12);
        t2 = new T.Vector3(new Float32Array(3));
        t2.setFrom$1(v);
        t2.scale$1(0, range);
        pos.toString;
        t3 = new T.Vector3(new Float32Array(3));
        t3.setFrom$1(pos);
        t3.add$1(0, t2);
        C.JSArray_methods.add$1(points, t3);
      }
      C.JSArray_methods.add$1(points, pos);
      md.ChangeVertices$1(G.FlattenVector3List(points));
      md.ChangeFaces$1(faces);
    },
    Stats: function Stats() {
    },
    StatsFps: function StatsFps(t0, t1, t2, t3, t4) {
      var _ = this;
      _._frames = 0;
      _._lastSample = t0;
      _._root = t1;
      _._text = t2;
      _._extra = t3;
      _._graph = t4;
    },
    ShadowMap: function ShadowMap(t0, t1) {
      var _ = this;
      _._lib0$_cgl = t0;
      _._phaseVisualize = _._programCompute = _._shadowBuffer = _._phaseCompute = _._depthTexture = null;
      _._uniforms = t1;
      _._mapSize = _._programVisualize = null;
    }
  },
  A = {
    drawRecursively: function(prog, node, $parent, stats, uniforms) {
      var t1, t2, t3, t4, t5, t6, t7, temp, _i;
      H.assertSubtype(stats, "$isList", [G.DrawStats], "$asList");
      H.assertSubtype(uniforms, "$isList", [G.UniformGroup], "$asList");
      if (!node.enabled)
        return;
      t1 = node._modelMatrix;
      t1.setFrom$1($parent);
      t2 = node.transform;
      t1.multiply$1(0, t2);
      t3 = node._material;
      if (t3 != null) {
        node._meshData;
        t4 = true;
      } else
        t4 = false;
      if (t4) {
        H.S(node);
        t4 = C.JSArray_methods.get$last(uniforms);
        t5 = node._normMatrix;
        t6 = new Float32Array(9);
        t7 = t1._m4storage;
        t6[0] = t7[0];
        t6[1] = t7[1];
        t6[2] = t7[2];
        t6[3] = t7[4];
        t6[4] = t7[5];
        t6[5] = t7[6];
        t6[6] = t7[8];
        t6[7] = t7[9];
        t6[8] = t7[10];
        t5.copyInverse$1(new T.Matrix3(t6));
        t6 = t5._m3storage;
        temp = t6[3];
        t6[3] = t6[1];
        t6[1] = temp;
        temp = t6[6];
        t6[6] = t6[2];
        t6[2] = temp;
        temp = t6[7];
        t6[7] = t6[5];
        t6[5] = temp;
        t4 = t4._lib$_uniforms;
        t4.$indexSet(0, "uTransformationMatrix", t2);
        t4.$indexSet(0, "uModelMatrix", t1);
        t4.$indexSet(0, "uNormalMatrix", t5);
        C.JSArray_methods.add$1(uniforms, t3);
        prog.Draw$3(node._meshData, uniforms, stats);
        if (0 >= uniforms.length)
          return H.ioore(uniforms, -1);
        uniforms.pop();
      }
      for (t2 = node.children, _i = 0; false; ++_i) {
        if (_i >= 0)
          return H.ioore(t2, _i);
        A.drawRecursively(prog, t2[_i], t1, stats, uniforms);
      }
    },
    RenderPhase$: function($name, _cgl, _framebuffer) {
      var t1 = new A.RenderPhase(_framebuffer, _cgl, H.setRuntimeTypeInfo([], [A.Scene]), 17664, $name);
      if (_framebuffer == null)
        t1._lib1$_framebuffer = new G.Framebuffer(_cgl, null, null, null, null);
      return t1;
    },
    Node: function Node(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._material = t0;
      _._meshData = t1;
      _.children = t2;
      _._normMatrix = t3;
      _._modelMatrix = t4;
      _.transform = t5;
      _._pos = t6;
      _._back = t7;
      _.name = t8;
      _.debug = false;
      _.enabled = true;
    },
    Scene: function Scene(t0, t1, t2, t3) {
      var _ = this;
      _.program = t0;
      _.uniforms = t1;
      _.nodes = t2;
      _.name = t3;
      _.debug = false;
      _.enabled = true;
    },
    RenderPhase: function RenderPhase(t0, t1, t2, t3, t4) {
      var _ = this;
      _._lib1$_framebuffer = t0;
      _._lib1$_cgl = t1;
      _._scenes = t2;
      _._clear_mode = t3;
      _.viewPortH = _.viewPortW = _.viewPortY = _.viewPortX = 0;
      _.name = t4;
      _.debug = false;
      _.enabled = true;
    },
    hashObjects: function(objects) {
      var t1, hash;
      t1 = C.NativeFloat32List_methods.fold$1$2(H.assertSubtype(objects, "$isIterable", [P.Object], "$asIterable"), 0, new A.hashObjects_closure(), P.int);
      if (typeof t1 !== "number")
        return H.iae(t1);
      hash = 536870911 & t1 + ((67108863 & t1) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    hashObjects_closure: function hashObjects_closure() {
    }
  },
  B = {
    CubeGeometry: function(uMax, uMin, vMax, vMin, x, y, z) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, vertices, uvs, gb, i, n;
      t1 = -x;
      t2 = -y;
      t3 = new T.Vector3(new Float32Array(3));
      t3.setValues$3(t1, t2, z);
      t4 = new T.Vector3(new Float32Array(3));
      t4.setValues$3(x, t2, z);
      t5 = new T.Vector3(new Float32Array(3));
      t5.setValues$3(x, y, z);
      t6 = new T.Vector3(new Float32Array(3));
      t6.setValues$3(t1, y, z);
      t7 = -z;
      t8 = new T.Vector3(new Float32Array(3));
      t8.setValues$3(t1, t2, t7);
      t9 = new T.Vector3(new Float32Array(3));
      t9.setValues$3(t1, y, t7);
      t10 = new T.Vector3(new Float32Array(3));
      t10.setValues$3(x, y, t7);
      t11 = new T.Vector3(new Float32Array(3));
      t11.setValues$3(x, t2, t7);
      t12 = new T.Vector3(new Float32Array(3));
      t12.setValues$3(t1, y, t7);
      t13 = new T.Vector3(new Float32Array(3));
      t13.setValues$3(t1, y, z);
      t14 = new T.Vector3(new Float32Array(3));
      t14.setValues$3(x, y, z);
      t15 = new T.Vector3(new Float32Array(3));
      t15.setValues$3(x, y, t7);
      t16 = new T.Vector3(new Float32Array(3));
      t16.setValues$3(x, t2, z);
      t17 = new T.Vector3(new Float32Array(3));
      t17.setValues$3(t1, t2, z);
      t18 = new T.Vector3(new Float32Array(3));
      t18.setValues$3(t1, t2, t7);
      t19 = new T.Vector3(new Float32Array(3));
      t19.setValues$3(x, t2, t7);
      t20 = new T.Vector3(new Float32Array(3));
      t20.setValues$3(x, t2, t7);
      t21 = new T.Vector3(new Float32Array(3));
      t21.setValues$3(x, y, t7);
      t22 = new T.Vector3(new Float32Array(3));
      t22.setValues$3(x, y, z);
      t23 = new T.Vector3(new Float32Array(3));
      t23.setValues$3(x, t2, z);
      t24 = new T.Vector3(new Float32Array(3));
      t24.setValues$3(t1, t2, t7);
      t25 = new T.Vector3(new Float32Array(3));
      t25.setValues$3(t1, t2, z);
      t2 = new T.Vector3(new Float32Array(3));
      t2.setValues$3(t1, y, z);
      t26 = new T.Vector3(new Float32Array(3));
      t26.setValues$3(t1, y, t7);
      t7 = [T.Vector3];
      vertices = H.setRuntimeTypeInfo([t3, t4, t5, t6, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t2, t26], t7);
      t1 = new T.Vector2(new Float32Array(2));
      t1.setValues$2(uMin, vMin);
      t2 = new T.Vector2(new Float32Array(2));
      t2.setValues$2(uMax, vMin);
      t3 = new T.Vector2(new Float32Array(2));
      t3.setValues$2(uMax, vMax);
      t4 = new T.Vector2(new Float32Array(2));
      t4.setValues$2(uMin, vMax);
      t5 = new T.Vector2(new Float32Array(2));
      t5.setValues$2(uMax, vMin);
      t6 = new T.Vector2(new Float32Array(2));
      t6.setValues$2(uMax, vMax);
      t8 = new T.Vector2(new Float32Array(2));
      t8.setValues$2(uMin, vMax);
      t9 = new T.Vector2(new Float32Array(2));
      t9.setValues$2(uMin, vMin);
      t10 = new T.Vector2(new Float32Array(2));
      t10.setValues$2(uMin, vMax);
      t11 = new T.Vector2(new Float32Array(2));
      t11.setValues$2(uMin, vMin);
      t12 = new T.Vector2(new Float32Array(2));
      t12.setValues$2(uMax, vMin);
      t13 = new T.Vector2(new Float32Array(2));
      t13.setValues$2(uMax, vMax);
      t14 = new T.Vector2(new Float32Array(2));
      t14.setValues$2(uMax, vMax);
      t15 = new T.Vector2(new Float32Array(2));
      t15.setValues$2(uMin, vMax);
      t16 = new T.Vector2(new Float32Array(2));
      t16.setValues$2(uMin, vMin);
      t17 = new T.Vector2(new Float32Array(2));
      t17.setValues$2(uMax, vMin);
      t18 = new T.Vector2(new Float32Array(2));
      t18.setValues$2(uMax, vMin);
      t19 = new T.Vector2(new Float32Array(2));
      t19.setValues$2(uMax, vMax);
      t20 = new T.Vector2(new Float32Array(2));
      t20.setValues$2(uMin, vMax);
      t21 = new T.Vector2(new Float32Array(2));
      t21.setValues$2(uMin, vMin);
      t22 = new T.Vector2(new Float32Array(2));
      t22.setValues$2(uMin, vMin);
      t23 = new T.Vector2(new Float32Array(2));
      t23.setValues$2(uMax, vMin);
      t24 = new T.Vector2(new Float32Array(2));
      t24.setValues$2(uMax, vMax);
      t25 = new T.Vector2(new Float32Array(2));
      t25.setValues$2(uMin, vMax);
      uvs = H.setRuntimeTypeInfo([t1, t2, t3, t4, t5, t6, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25], [T.Vector2]);
      gb = new G.GeometryBuilder(false, H.setRuntimeTypeInfo([], [G.Face3]), H.setRuntimeTypeInfo([], [G.Face4]), H.setRuntimeTypeInfo([], t7), P.LinkedHashMap_LinkedHashMap$_empty(P.String, [P.List,,]));
      gb.EnableAttribute$1("aTexUV");
      gb.EnableAttribute$1("aNormal");
      gb.AddFaces4$1(6);
      gb.AddVertices$1(vertices);
      gb.AddAttributesVector2$2("aTexUV", uvs);
      for (i = 0; t1 = $.$get$_CubeNormals(), i < 6; ++i) {
        n = t1[i];
        gb.AddAttributesVector3$2("aNormal", H.setRuntimeTypeInfo([n, n, n, n], t7));
      }
      return gb;
    },
    CylinderGeometry: function(radTop, radBot, height, radialSubdivisions, computeNormals) {
      var halfHeight, t1, vertices, uvs, normal, t2, t3, i, u, x, z, i0, t4, a, b, c, norm, gb, o, t, j, tnext, bnext;
      halfHeight = height / 2;
      t1 = [T.Vector3];
      vertices = H.setRuntimeTypeInfo([], t1);
      uvs = H.setRuntimeTypeInfo([], [T.Vector2]);
      normal = H.setRuntimeTypeInfo([], t1);
      t2 = new T.Vector3(new Float32Array(3));
      t2.setValues$3(0, halfHeight, 0);
      C.JSArray_methods.add$1(vertices, t2);
      t2 = new T.Vector2(new Float32Array(2));
      t2.setValues$2(0, 0);
      C.JSArray_methods.add$1(uvs, t2);
      t2 = new T.Vector3(new Float32Array(3));
      t2.setValues$3(0, 1, 0);
      C.JSArray_methods.add$1(normal, t2);
      t2 = -halfHeight;
      t3 = new T.Vector3(new Float32Array(3));
      t3.setValues$3(0, t2, 0);
      C.JSArray_methods.add$1(vertices, t3);
      t3 = new T.Vector2(new Float32Array(2));
      t3.setValues$2(1, 1);
      C.JSArray_methods.add$1(uvs, t3);
      t3 = new T.Vector3(new Float32Array(3));
      t3.setValues$3(0, -1, 0);
      C.JSArray_methods.add$1(normal, t3);
      for (i = 0; i < radialSubdivisions; ++i) {
        u = i / radialSubdivisions;
        t3 = u * 3.141592653589793 * 2;
        x = Math.sin(t3);
        z = Math.cos(t3);
        t3 = new Float32Array(3);
        t3[0] = x * radTop;
        t3[1] = halfHeight;
        t3[2] = z * radTop;
        C.JSArray_methods.add$1(vertices, new T.Vector3(t3));
        t3 = new Float32Array(2);
        t3[0] = u;
        t3[1] = 1;
        C.JSArray_methods.add$1(uvs, new T.Vector2(t3));
        t3 = new Float32Array(3);
        t3[0] = 0;
        t3[1] = 1;
        t3[2] = 0;
        C.JSArray_methods.add$1(normal, new T.Vector3(t3));
        t3 = new Float32Array(3);
        t3[0] = x * radBot;
        t3[1] = t2;
        t3[2] = z * radBot;
        C.JSArray_methods.add$1(vertices, new T.Vector3(t3));
        t3 = new Float32Array(2);
        t3[0] = u;
        t3[1] = 0;
        C.JSArray_methods.add$1(uvs, new T.Vector2(t3));
        t3 = new Float32Array(3);
        t3[0] = 0;
        t3[1] = -1;
        t3[2] = 0;
        C.JSArray_methods.add$1(normal, new T.Vector3(t3));
      }
      for (t2 = 2 * radialSubdivisions, i = 0; i < t2; i = i0) {
        i0 = i + 2;
        if (i0 >= vertices.length)
          return H.ioore(vertices, i0);
        C.JSArray_methods.add$1(vertices, vertices[i0]);
        t3 = i + 3;
        if (t3 >= vertices.length)
          return H.ioore(vertices, t3);
        C.JSArray_methods.add$1(vertices, vertices[t3]);
        if (i0 >= uvs.length)
          return H.ioore(uvs, i0);
        C.JSArray_methods.add$1(uvs, uvs[i0]);
        if (t3 >= uvs.length)
          return H.ioore(uvs, t3);
        C.JSArray_methods.add$1(uvs, uvs[t3]);
        t4 = vertices.length;
        if (i0 >= t4)
          return H.ioore(vertices, i0);
        a = vertices[i0];
        if (t3 >= t4)
          return H.ioore(vertices, t3);
        b = vertices[t3];
        t3 = i + 4;
        if (t3 >= t4)
          return H.ioore(vertices, t3);
        c = vertices[t3];
        t3 = new Float32Array(3);
        norm = new T.Vector3(new Float32Array(3));
        G.NormalFromPoints(a, b, c, new T.Vector3(t3), norm);
        C.JSArray_methods.add$1(normal, norm);
        C.JSArray_methods.add$1(normal, norm);
      }
      t2 = H.setRuntimeTypeInfo([], [G.Face3]);
      t3 = H.setRuntimeTypeInfo([], [G.Face4]);
      gb = new G.GeometryBuilder(false, t2, t3, H.setRuntimeTypeInfo([], t1), P.LinkedHashMap_LinkedHashMap$_empty(P.String, [P.List,,]));
      gb.EnableAttribute$1("aTexUV");
      gb.AddVertices$1(vertices);
      gb.AddAttributesVector2$2("aTexUV", uvs);
      gb.EnableAttribute$1("aNormal");
      gb.AddAttributesVector3$2("aNormal", normal);
      for (o = radialSubdivisions * 2, i = 0; i < radialSubdivisions; i = j) {
        t = i * 2 + 2;
        b = t + 1;
        j = i + 1;
        tnext = (j === radialSubdivisions ? 0 : j) * 2 + 2;
        bnext = tnext + 1;
        C.JSArray_methods.add$1(t2, new G.Face3(0, t, tnext));
        C.JSArray_methods.add$1(t2, new G.Face3(1, bnext, b));
        C.JSArray_methods.add$1(t3, new G.Face4(o + tnext, o + t, o + b, o + bnext));
      }
      return gb;
    },
    IcosahedronGeometry: function(computeNormals, scale, subdivisions) {
      var t1, faces, t2, vertices, i, tmp, t3, _i, f, t4, t5, a, t6, b, t7, c, ia, ib, ic, gb, v1, v2, v3, t8, t9, t10, t11;
      t1 = [G.Face3];
      faces = H.setRuntimeTypeInfo([], t1);
      t2 = [T.Vector3];
      vertices = H.setRuntimeTypeInfo([], t2);
      C.JSArray_methods.addAll$1(faces, $.$get$IcosahedronFaceList());
      C.JSArray_methods.addAll$1(vertices, $.$get$IcosahedronVertexList());
      for (i = 0; i < subdivisions; ++i, faces = tmp) {
        tmp = H.setRuntimeTypeInfo([], t1);
        for (t3 = faces.length, _i = 0; _i < faces.length; faces.length === t3 || (0, H.throwConcurrentModificationError)(faces), ++_i) {
          f = faces[_i];
          t4 = f.a;
          if (t4 >= vertices.length)
            return H.ioore(vertices, t4);
          t5 = vertices[t4];
          a = new T.Vector3(new Float32Array(3));
          a.setFrom$1(t5);
          t5 = f.b;
          if (t5 >= vertices.length)
            return H.ioore(vertices, t5);
          a.add$1(0, vertices[t5]);
          a.scale$1(0, 0.5);
          a.normalize$0(0);
          if (t5 >= vertices.length)
            return H.ioore(vertices, t5);
          t6 = vertices[t5];
          b = new T.Vector3(new Float32Array(3));
          b.setFrom$1(t6);
          t6 = f.c;
          if (t6 >= vertices.length)
            return H.ioore(vertices, t6);
          b.add$1(0, vertices[t6]);
          b.scale$1(0, 0.5);
          b.normalize$0(0);
          if (t6 >= vertices.length)
            return H.ioore(vertices, t6);
          t7 = vertices[t6];
          c = new T.Vector3(new Float32Array(3));
          c.setFrom$1(t7);
          if (t4 >= vertices.length)
            return H.ioore(vertices, t4);
          c.add$1(0, vertices[t4]);
          c.scale$1(0, 0.5);
          c.normalize$0(0);
          ia = vertices.length;
          C.JSArray_methods.add$1(vertices, a);
          ib = vertices.length;
          C.JSArray_methods.add$1(vertices, b);
          ic = vertices.length;
          C.JSArray_methods.add$1(vertices, c);
          C.JSArray_methods.add$1(tmp, new G.Face3(t4, ia, ic));
          C.JSArray_methods.add$1(tmp, new G.Face3(t5, ib, ia));
          C.JSArray_methods.add$1(tmp, new G.Face3(t6, ic, ib));
          C.JSArray_methods.add$1(tmp, new G.Face3(ia, ib, ic));
        }
      }
      t1 = H.setRuntimeTypeInfo([], t1);
      t3 = H.setRuntimeTypeInfo([], [G.Face4]);
      t4 = H.setRuntimeTypeInfo([], t2);
      gb = new G.GeometryBuilder(false, t1, t3, t4, P.LinkedHashMap_LinkedHashMap$_empty(P.String, [P.List,,]));
      gb.EnableAttribute$1("aTexUV");
      gb.EnableAttribute$1("aNormal");
      for (t3 = faces.length, t5 = [T.Vector2], _i = 0; _i < faces.length; faces.length === t3 || (0, H.throwConcurrentModificationError)(faces), ++_i) {
        f = faces[_i];
        t6 = f.a;
        t7 = vertices.length;
        if (t6 >= t7)
          return H.ioore(vertices, t6);
        v1 = vertices[t6];
        t6 = f.b;
        if (t6 >= t7)
          return H.ioore(vertices, t6);
        v2 = vertices[t6];
        t6 = f.c;
        if (t6 >= t7)
          return H.ioore(vertices, t6);
        v3 = vertices[t6];
        t6 = v1._v3storage;
        t7 = Math.atan2(t6[2], t6[0]);
        t6 = Math.acos(t6[1]);
        t8 = new Float32Array(2);
        t8[0] = 0.5 * (1 + t7 * 0.3183098861837907);
        t8[1] = t6 * 0.3183098861837907;
        t6 = v2._v3storage;
        t7 = Math.atan2(t6[2], t6[0]);
        t6 = Math.acos(t6[1]);
        t9 = new Float32Array(2);
        t9[0] = 0.5 * (1 + t7 * 0.3183098861837907);
        t9[1] = t6 * 0.3183098861837907;
        t6 = v3._v3storage;
        t7 = Math.atan2(t6[2], t6[0]);
        t6 = Math.acos(t6[1]);
        t10 = new Float32Array(2);
        t10[0] = 0.5 * (1 + t7 * 0.3183098861837907);
        t10[1] = t6 * 0.3183098861837907;
        gb.AddAttributesVector3$2("aNormal", H.setRuntimeTypeInfo([v1, v2, v3], t2));
        t6 = new T.Vector3(new Float32Array(3));
        t6.setFrom$1(v1);
        t6.scale$1(0, scale);
        t7 = new T.Vector3(new Float32Array(3));
        t7.setFrom$1(v2);
        t7.scale$1(0, scale);
        t11 = new T.Vector3(new Float32Array(3));
        t11.setFrom$1(v3);
        t11.scale$1(0, scale);
        t11 = H.assertSubtype(H.setRuntimeTypeInfo([t6, t7, t11], t2), "$isList", t2, "$asList");
        i = t4.length;
        C.JSArray_methods.add$1(t1, new G.Face3(i, i + 1, i + 2));
        gb.AddVertices$1(t11);
        gb.AddAttributesVector2$2("aTexUV", H.setRuntimeTypeInfo([new T.Vector2(t8), new T.Vector2(t9), new T.Vector2(t10)], t5));
      }
      return gb;
    },
    TorusKnotGeometry: function(computeNormals, heightScale, p, q, radius, segmentsR, segmentsT, tubeRadius) {
      var pointsAndTangents, t1, h, bands, _i, b, w, t2, t3, t4, gb, lst, i, t5, ts;
      pointsAndTangents = B.ParametricCurvePointsAndTangents(new B.TorusKnotGeometry_curveFunc(q, p, radius, heightScale), 0, 6.283185307179586, segmentsR, true);
      t1 = pointsAndTangents.length;
      if (0 >= t1)
        return H.ioore(pointsAndTangents, 0);
      C.JSArray_methods.add$1(pointsAndTangents, pointsAndTangents[0]);
      if (1 >= pointsAndTangents.length)
        return H.ioore(pointsAndTangents, 1);
      C.JSArray_methods.add$1(pointsAndTangents, pointsAndTangents[1]);
      h = segmentsR + 1;
      bands = B.TubeHullBands(pointsAndTangents, segmentsT, tubeRadius);
      for (t1 = bands.length, _i = 0; _i < bands.length; bands.length === t1 || (0, H.throwConcurrentModificationError)(bands), ++_i) {
        b = bands[_i];
        if (0 >= b.length)
          return H.ioore(b, 0);
        C.JSArray_methods.add$1(b, b[0]);
        if (1 >= b.length)
          return H.ioore(b, 1);
        C.JSArray_methods.add$1(b, b[1]);
      }
      w = segmentsT + 1;
      t1 = H.setRuntimeTypeInfo([], [G.Face3]);
      t2 = H.setRuntimeTypeInfo([], [G.Face4]);
      t3 = [T.Vector3];
      t4 = H.setRuntimeTypeInfo([], t3);
      gb = new G.GeometryBuilder(false, t1, t2, t4, P.LinkedHashMap_LinkedHashMap$_empty(P.String, [P.List,,]));
      for (t1 = bands.length, _i = 0; _i < bands.length; bands.length === t1 || (0, H.throwConcurrentModificationError)(bands), ++_i) {
        lst = bands[_i];
        for (i = 0; i < lst.length; i += 2) {
          t2 = H.interceptedTypeCheck(lst[i], "$isVector3");
          t2.toString;
          t5 = new T.Vector3(new Float32Array(3));
          t5.setFrom$1(t2);
          C.JSArray_methods.add$1(t4, t5);
        }
      }
      gb.GenerateRegularGridFaces$3(w, h, false);
      gb.GenerateRegularGridUV$2(w, h);
      gb.EnableAttribute$1("aNormal");
      for (t1 = bands.length, t2 = gb.attributes, _i = 0; _i < bands.length; bands.length === t1 || (0, H.throwConcurrentModificationError)(bands), ++_i) {
        lst = bands[_i];
        for (i = 0; t4 = lst.length, i < t4; i += 2) {
          t5 = i + 1;
          if (t5 >= t4)
            return H.ioore(lst, t5);
          t5 = H.interceptedTypeCheck(lst[t5], "$isVector3");
          ts = H.assertSubtype(t2.$index(0, "aNormal"), "$isList", t3, "$asList");
          t5.toString;
          t4 = new T.Vector3(new Float32Array(3));
          t4.setFrom$1(t5);
          (ts && C.JSArray_methods).add$1(ts, t4);
        }
      }
      return gb;
    },
    TubeHullBands: function(pointsAndTangents, segments, radius) {
      var t1, out, t2, p, t3, v1, t4, v2, i, t5, c, t6, d, band, t7, a, k, j, v, cx, cy;
      t1 = [T.Vector3];
      H.assertSubtype(pointsAndTangents, "$isList", t1, "$asList");
      out = H.setRuntimeTypeInfo([], [[P.List, T.Vector3]]);
      t2 = new Float32Array(3);
      p = new T.Vector3(t2);
      t3 = new Float32Array(3);
      v1 = new T.Vector3(t3);
      t4 = new Float32Array(3);
      v2 = new T.Vector3(t4);
      for (i = 0; t5 = pointsAndTangents.length, i < t5; i += 2) {
        c = pointsAndTangents[i];
        t6 = i + 1;
        if (t6 >= t5)
          return H.ioore(pointsAndTangents, t6);
        d = pointsAndTangents[t6];
        band = H.setRuntimeTypeInfo([], t1);
        C.JSArray_methods.add$1(out, band);
        t5 = d._v3storage;
        t6 = t5[2];
        if (Math.abs(t6) > 0.7071067811865476) {
          t7 = t5[1];
          a = t7 * t7 + t6 * t6;
          k = 1 / Math.sqrt(a);
          t3[0] = 0;
          t3[1] = -t5[2] * k;
          t3[2] = t5[1] * k;
          t4[0] = a * k;
          t4[1] = -t5[0] * (t5[1] * k);
          t4[2] = t5[0] * (-t5[2] * k);
        } else {
          t6 = t5[0];
          t7 = t5[1];
          a = t6 * t6 + t7 * t7;
          k = 1 / Math.sqrt(a);
          t3[0] = -t5[1] * k;
          t3[1] = t5[0] * k;
          t3[2] = 0;
          t4[0] = -t5[2] * (t5[0] * k);
          t4[1] = t5[2] * (-t5[1] * k);
          t4[2] = a * k;
        }
        v1.normalize$0(0);
        v2.normalize$0(0);
        for (j = 0; j < segments; ++j) {
          v = j / segments * 2 * 3.141592653589793;
          cx = radius * Math.cos(v);
          cy = radius * Math.sin(v);
          p.setFrom$1(c);
          p.addScaled$2(v1, cx);
          p.addScaled$2(v2, cy);
          t5 = new T.Vector3(new Float32Array(3));
          t5.setFrom$1(p);
          C.JSArray_methods.add$1(band, t5);
          t2[2] = 0;
          t2[1] = 0;
          t2[0] = 0;
          p.addScaled$2(v1, cx);
          p.addScaled$2(v2, cy);
          p.normalize$0(0);
          t5 = new T.Vector3(new Float32Array(3));
          t5.setFrom$1(p);
          C.JSArray_methods.add$1(band, t5);
        }
      }
      return out;
    },
    ParametricCurvePointsAndTangents: function(func, start, end, numPoints, halfOpen) {
      var out, p, d, t1, i, u, t2;
      H.functionTypeCheck(func, {func: 1, ret: -1, args: [P.double, T.Vector3]});
      out = H.setRuntimeTypeInfo([], [T.Vector3]);
      p = new T.Vector3(new Float32Array(3));
      d = new T.Vector3(new Float32Array(3));
      for (t1 = (end - start) / (numPoints - 0), i = 0; i < numPoints; ++i) {
        u = t1 * i + start;
        func.call$2(u, p);
        func.call$2(u + 0.001, d);
        d.sub$1(0, p);
        t2 = new T.Vector3(new Float32Array(3));
        t2.setFrom$1(p);
        C.JSArray_methods.add$1(out, t2);
        t2 = new T.Vector3(new Float32Array(3));
        t2.setFrom$1(d);
        C.JSArray_methods.add$1(out, t2);
      }
      return out;
    },
    TorusKnotGeometry_curveFunc: function TorusKnotGeometry_curveFunc(t0, t1, t2, t3) {
      var _ = this;
      _.q = t0;
      _.p = t1;
      _.radius = t2;
      _.heightScale = t3;
    }
  },
  D = {
    Keyboard$: function(elem) {
      var t1 = P.int;
      t1 = new D.Keyboard(P.LinkedHashSet_LinkedHashSet(t1), P.LinkedHashSet_LinkedHashSet(t1), P.LinkedHashSet_LinkedHashSet(t1));
      t1.Keyboard$1(elem);
      return t1;
    },
    Mouse$: function(elem) {
      var t1 = P.int;
      t1 = new D.Mouse(P.LinkedHashSet_LinkedHashSet(t1), P.LinkedHashSet_LinkedHashSet(t1), P.LinkedHashSet_LinkedHashSet(t1));
      t1.Mouse$1(elem);
      return t1;
    },
    Keyboard: function Keyboard(t0, t1, t2) {
      this._currentlyPressedKeys = t0;
      this._justPressedKeys = t1;
      this._justReleasedKeys = t2;
    },
    Keyboard_closure: function Keyboard_closure(t0) {
      this.$this = t0;
    },
    Keyboard_closure0: function Keyboard_closure0(t0) {
      this.$this = t0;
    },
    Mouse: function Mouse(t0, t1, t2) {
      var _ = this;
      _._currentlyPressedButtons = t0;
      _._justPressedButtons = t1;
      _._justReleasedButtons = t2;
      _.wheelDeltaY = _.moveDeltaY = _.moveDeltaX = 0;
    },
    Mouse_closure: function Mouse_closure(t0) {
      this.$this = t0;
    },
    Mouse_closure0: function Mouse_closure0(t0) {
      this.$this = t0;
    },
    Mouse_closure1: function Mouse_closure1(t0) {
      this.$this = t0;
    },
    Mouse_closure2: function Mouse_closure2(t0) {
      this.$this = t0;
    },
    OrbitCamera: function OrbitCamera(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _._radius = t0;
      _.azimuth = t1;
      _.polar = t2;
      _.roll = t3;
      _._lookAtPos = t4;
      _.mouseWheelFactor = t5;
      _.keyboard = t6;
      _.mouse = t7;
      _.transform = t8;
      _._pos = t9;
      _._back = t10;
      _.name = t11;
      _.debug = false;
      _.enabled = true;
    }
  },
  T = {
    Matrix4$zero: function() {
      return new T.Matrix4(new Float32Array(16));
    },
    setViewMatrix: function(viewMatrix, cameraPosition, cameraFocusPosition, upDirection) {
      var t1, z, x, y, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13;
      cameraPosition.toString;
      t1 = new Float32Array(3);
      z = new T.Vector3(t1);
      z.setFrom$1(cameraPosition);
      z.sub$1(0, cameraFocusPosition);
      z.normalize$0(0);
      x = upDirection.cross$1(z);
      x.normalize$0(0);
      y = z.cross$1(x);
      y.normalize$0(0);
      t2 = x.dot$1(cameraPosition);
      t3 = y.dot$1(cameraPosition);
      t4 = z.dot$1(cameraPosition);
      t5 = x._v3storage;
      t6 = t5[0];
      t7 = y._v3storage;
      t8 = t7[0];
      t9 = t1[0];
      t10 = t5[1];
      t11 = t7[1];
      t12 = t1[1];
      t5 = t5[2];
      t7 = t7[2];
      t1 = t1[2];
      t13 = viewMatrix._m4storage;
      t13[15] = 1;
      t13[14] = -t4;
      t13[13] = -t3;
      t13[12] = -t2;
      t13[11] = 0;
      t13[10] = t1;
      t13[9] = t7;
      t13[8] = t5;
      t13[7] = 0;
      t13[6] = t12;
      t13[5] = t11;
      t13[4] = t10;
      t13[3] = 0;
      t13[2] = t9;
      t13[1] = t8;
      t13[0] = t6;
    },
    setPerspectiveMatrix: function(perspectiveMatrix, fovYRadians, aspectRatio, zNear, zFar) {
      var height, near_minus_far, t1;
      height = Math.tan(fovYRadians * 0.5);
      near_minus_far = zNear - zFar;
      perspectiveMatrix.setZero$0();
      t1 = perspectiveMatrix._m4storage;
      t1[0] = 1 / (height * aspectRatio);
      t1[5] = 1 / height;
      t1[10] = (zFar + zNear) / near_minus_far;
      t1[11] = -1;
      t1[14] = 2 * zNear * zFar / near_minus_far;
    },
    Vector3_Vector3: function(x, y, z) {
      var t1 = new T.Vector3(new Float32Array(3));
      t1.setValues$3(x, y, z);
      return t1;
    },
    Vector3$zero: function() {
      return new T.Vector3(new Float32Array(3));
    },
    Matrix3: function Matrix3(t0) {
      this._m3storage = t0;
    },
    Matrix4: function Matrix4(t0) {
      this._m4storage = t0;
    },
    Quaternion: function Quaternion(t0) {
      this._qStorage = t0;
    },
    Vector2: function Vector2(t0) {
      this._v2storage = t0;
    },
    Vector3: function Vector3(t0) {
      this._v3storage = t0;
    },
    Vector4: function Vector4(t0) {
      this._v4storage = t0;
    }
  },
  L = {
    EventRadioChanged: function($name) {
      var t1, t2;
      P.print(H.S($name) + " toggle ");
      t1 = $.$get$lightSources();
      $.gActiveLight = t1.$index(0, $name);
      t1.$index(0, $name).enabled = true;
      for (t1 = new H.LinkedHashMapKeyIterable(t1, [H.getTypeArgumentByIndex(t1, 0)]), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.__js_helper$_current;
        if (t2 != $name)
          $.$get$lightSources().$index(0, t2).enabled = false;
      }
    },
    SwallowEvent: function(e) {
      e.stopPropagation();
    },
    main: function() {
      var _box_0, t1, t2, text, t3, fps, canvas, cgl, t4, t5, t6, t7, t8, t9, orbit, perspective, illumination, shadowMap, dummy, err, t10, t11, t12, t13, t14, t15, t16, vertices, uvs, n, normals, gb, i, UnitQuad, t17, uniforms, phaseMain, sceneFixed, _i, md, e;
      _box_0 = {};
      t1 = document;
      t2 = t1.getElementById("stats");
      text = t1.createElement("div");
      t3 = text.style;
      t3.fontWeight = "bold";
      text.textContent = "@@@@";
      fps = new R.StatsFps(0, t2, text, t1.createElement("div"), R._MakeGraph("blue", "gray", 90, 30));
      fps.Stats$3(t2, "blue", "gray");
      canvas = H.interceptedTypeCheck(t1.querySelector("#webgl-canvas"), "$isCanvasElement");
      cgl = new G.ChronosGL(canvas);
      t2 = P.String;
      t3 = P.Object;
      t4 = (canvas && C.CanvasElement_methods).getContext$2(canvas, "webgl2", P.LinkedHashMap_LinkedHashMap$_literal(["alpha", false, "depth", true, "stencil", true, "antialias", true, "premultipliedAlpha", true, "preserveDrawingBuffer", false, "failIfMajorPerformanceCaveat", false], t2, t3));
      cgl._gl = t4;
      if (t4 == null)
        H.throwExpression(P.Exception_Exception('Calling canvas.getContext("webgl2") failed,\nmake sure you run on a computer that supports WebGL2.\n\nYou can test your browser\'s compatibility here: http://webglreport.com/\n\n(If you are using Dartium make sure you start it with the\noption: --enable-unsafe-es3-apis)\n'));
      t5 = "ChronosGL Config: " + H.S(J.getContextAttributes$0$x(t4));
      if ($.gLogLevel > 0)
        P.print("I: " + t5);
      J.clearColor$4$x(t4, 0, 0, 0, 1);
      J.enable$1$x(t4, 2929);
      t4 = new Float32Array(3);
      t5 = D.Keyboard$(null);
      t6 = D.Mouse$(canvas);
      t7 = new T.Matrix4(new Float32Array(16));
      t7.setIdentity$0();
      t8 = new Float32Array(3);
      t9 = new Float32Array(3);
      new Float32Array(3);
      new Float32Array(3);
      orbit = new D.OrbitCamera(25, 10, 0, 0, new T.Vector3(t4), -0.02, t5, t6, t7, new T.Vector3(t8), new T.Vector3(t9), "camera:orbit");
      canvas.width = canvas.clientWidth;
      canvas.height = canvas.clientHeight;
      t4 = $.kNear;
      t5 = $.kFar;
      t6 = new T.Matrix4(new Float32Array(16));
      t6.setIdentity$0();
      t7 = new T.Matrix4(new Float32Array(16));
      t7.setIdentity$0();
      perspective = new G.Perspective(orbit, 50, 1, t4, t5, t6, t7, new T.Matrix4(new Float32Array(16)), P.LinkedHashMap_LinkedHashMap$_empty(t2, t3), "perspective");
      perspective.Update$0();
      t4 = H.setRuntimeTypeInfo([], [G.Light]);
      t5 = new Float32Array(64);
      illumination = new G.Illumination(t4, t5, new Float32Array(4), P.LinkedHashMap_LinkedHashMap$_empty(t2, t3), "illumination");
      for (t5 = $.$get$lightSources(), t5 = t5.get$values(t5), t6 = t5._iterable, t5 = new H.MappedIterator(t6.get$iterator(t6), t5._f, [H.getTypeArgumentByIndex(t5, 0), H.getTypeArgumentByIndex(t5, 1)]); t5.moveNext$0();)
        C.JSArray_methods.add$1(t4, t5._current);
      t4 = P.LinkedHashMap_LinkedHashMap$_empty(t2, t3);
      t5 = new G.UniformGroup(t4, "uniforms");
      shadowMap = new R.ShadowMap(cgl, t5);
      t6 = new T.Vector2(new Float32Array(2));
      t6.setValues$2(512, 512);
      shadowMap._mapSize = t6;
      dummy = G.TypedTexture$(cgl, "frame::color", 512, 512, 32856, $.$get$TexturePropertiesFramebuffer());
      t7 = G.TypedTexture$(cgl, "frame::depth", 512, 512, 33190, $.$get$TexturePropertiesShadowMap());
      shadowMap._depthTexture = t7;
      t8 = new G.Framebuffer(cgl, null, dummy, t7, null);
      t9 = J.createFramebuffer$0$x(cgl._gl);
      t8._framebuffer = t9;
      J.bindFramebuffer$2$x(cgl._gl, 36160, t9);
      J.framebufferTexture2D$5$x(cgl._gl, 36160, 36064, 3553, dummy._texture, 0);
      J.framebufferTexture2D$5$x(cgl._gl, 36160, 36096, 3553, t7._texture, 0);
      err = J.checkFramebufferStatus$1$x(cgl._gl, 36160);
      if (err !== 36053)
        H.throwExpression("Error Incomplete Framebuffer: " + H.S(err));
      J.bindFramebuffer$2$x(cgl._gl, 36160, null);
      shadowMap._shadowBuffer = t8;
      t8 = A.RenderPhase$("compute-shadow", cgl, t8);
      t8.viewPortW = 512;
      t8.viewPortH = 512;
      shadowMap._phaseCompute = t8;
      t4.$indexSet(0, "uTexture", t7);
      t4.$indexSet(0, "uCutOff", 0);
      t4.$indexSet(0, "uCameraNear", 0.5);
      t4.$indexSet(0, "uCameraFar", 20);
      t4 = G.RenderProgram$("shadowCompute", cgl, $.$get$shadowVertexShaderDepth(), $.$get$shadowFragmentShaderDepth());
      t9 = [G.UniformGroup];
      t10 = H.setRuntimeTypeInfo([t5], t9);
      t11 = [A.Node];
      t12 = H.setRuntimeTypeInfo([], t11);
      t4 = new A.Scene(t4, t10, t12, "shadowCompute");
      shadowMap._programCompute = t4;
      C.JSArray_methods.add$1(t8._scenes, t4);
      t4 = A.RenderPhase$("visualize-shadow", cgl, null);
      t4._clear_mode &= 4294950911;
      shadowMap._phaseVisualize = t4;
      t8 = G.RenderProgram$("shadowVisualize", cgl, $.$get$visualizeShadowmapVertexShaderLinearDepth16(), $.$get$visualizeShadowmapFragmentShaderLinearDepth16());
      t5 = H.setRuntimeTypeInfo([t5], t9);
      t10 = H.setRuntimeTypeInfo([], t11);
      t5 = new A.Scene(t8, t5, t10, "shadowVisualize");
      shadowMap._programVisualize = t5;
      t12 = new T.Vector3(new Float32Array(3));
      t12.setValues$3(-1, -1, 0);
      t13 = new T.Vector3(new Float32Array(3));
      t13.setValues$3(1, -1, 0);
      t14 = new T.Vector3(new Float32Array(3));
      t14.setValues$3(1, 1, 0);
      t15 = new T.Vector3(new Float32Array(3));
      t15.setValues$3(-1, 1, 0);
      t16 = [T.Vector3];
      vertices = H.setRuntimeTypeInfo([t12, t13, t14, t15], t16);
      t12 = new T.Vector2(new Float32Array(2));
      t12.setValues$2(0, 0);
      t13 = new T.Vector2(new Float32Array(2));
      t13.setValues$2(1, 0);
      t14 = new T.Vector2(new Float32Array(2));
      t14.setValues$2(1, 1);
      t15 = new T.Vector2(new Float32Array(2));
      t15.setValues$2(0, 1);
      uvs = H.setRuntimeTypeInfo([t12, t13, t14, t15], [T.Vector2]);
      n = new T.Vector3(new Float32Array(3));
      n.setValues$3(0, 0, 1);
      normals = H.setRuntimeTypeInfo([n, n, n, n], t16);
      t12 = H.setRuntimeTypeInfo([], [G.Face3]);
      t13 = H.setRuntimeTypeInfo([], [G.Face4]);
      t14 = H.setRuntimeTypeInfo([], t16);
      gb = new G.GeometryBuilder(false, t12, t13, t14, P.LinkedHashMap_LinkedHashMap$_empty(t2, [P.List,,]));
      gb.EnableAttribute$1("aTexUV");
      H.assertSubtype(vertices, "$isList", t16, "$asList");
      i = t14.length;
      C.JSArray_methods.add$1(t13, new G.Face4(i, i + 1, i + 2, i + 3));
      gb.AddVertices$1(vertices);
      gb.AddAttributesVector2$2("aTexUV", uvs);
      gb.EnableAttribute$1("aNormal");
      gb.AddAttributesVector3$2("aNormal", normals);
      UnitQuad = G.GeometryBuilderToMeshData("quad", t8, gb);
      t8 = $.$get$EmptyMaterial();
      t13 = H.setRuntimeTypeInfo([], t11);
      t12 = new Float32Array(9);
      t14 = new T.Matrix4(new Float32Array(16));
      t14.setIdentity$0();
      t15 = new T.Matrix4(new Float32Array(16));
      t15.setIdentity$0();
      t16 = new Float32Array(3);
      t17 = new Float32Array(3);
      new Float32Array(3);
      new Float32Array(3);
      C.JSArray_methods.add$1(t10, new A.Node(t8, UnitQuad, t13, new T.Matrix3(t12), t14, t15, new T.Vector3(t16), new T.Vector3(t17), "unit-mesh"));
      C.JSArray_methods.add$1(t4._scenes, t5);
      t2 = P.LinkedHashMap_LinkedHashMap$_empty(t2, t3);
      uniforms = new G.UniformGroup(t2, "plain");
      t2.$indexSet(0, "uShadowMap", t7);
      t2.$indexSet(0, "uCanvasSize", t6);
      t2.$indexSet(0, "uShadowBias", 0.03);
      phaseMain = A.RenderPhase$("main", cgl, null);
      t2 = G.RenderProgram$("solid", cgl, $.$get$lightVertexShaderBlinnPhongWithShadow(), $.$get$lightFragmentShaderBlinnPhongWithShadow());
      t6 = H.setRuntimeTypeInfo([perspective, illumination, uniforms], t9);
      t7 = H.setRuntimeTypeInfo([], t11);
      t3 = phaseMain._scenes;
      C.JSArray_methods.add$1(t3, new A.Scene(t2, t6, t7, "solid"));
      t6 = G.RenderProgram$("solid", cgl, $.$get$solidColorVertexShader(), $.$get$solidColorFragmentShader());
      t9 = H.setRuntimeTypeInfo([perspective, illumination], t9);
      t4 = H.setRuntimeTypeInfo([], t11);
      sceneFixed = new A.Scene(t6, t9, t4, "solid");
      C.JSArray_methods.add$1(t3, sceneFixed);
      t3 = G.GeometryBuilderToMeshData("icosahedron-3", t2, B.IcosahedronGeometry(true, 1, 3));
      t4 = $.$get$matObjects();
      t5 = H.setRuntimeTypeInfo([], t11);
      t6 = new Float32Array(9);
      t8 = new T.Matrix4(new Float32Array(16));
      t8.setIdentity$0();
      t9 = new T.Matrix4(new Float32Array(16));
      t9.setIdentity$0();
      t10 = new Float32Array(3);
      t12 = new Float32Array(3);
      new Float32Array(3);
      new Float32Array(3);
      t3 = new A.Node(t4, t3, t5, new T.Matrix3(t6), t8, t9, new T.Vector3(t10), new T.Vector3(t12), "sphere");
      t3.setPos$3(0, 0, 0);
      C.JSArray_methods.add$1(t7, t3);
      t3 = R.ShapeCube(t2, 1, 1, 1);
      t5 = H.setRuntimeTypeInfo([], t11);
      t6 = new Float32Array(9);
      t8 = new T.Matrix4(new Float32Array(16));
      t8.setIdentity$0();
      t9 = new T.Matrix4(new Float32Array(16));
      t9.setIdentity$0();
      t10 = new Float32Array(3);
      t12 = new Float32Array(3);
      new Float32Array(3);
      new Float32Array(3);
      t3 = new A.Node(t4, t3, t5, new T.Matrix3(t6), t8, t9, new T.Vector3(t10), new T.Vector3(t12), "cube");
      t3.setPos$3(-5, 0, -5);
      C.JSArray_methods.add$1(t7, t3);
      t3 = G.GeometryBuilderToMeshData("cylinder-32", t2, B.CylinderGeometry(3, 6, 2, 32, true));
      t5 = H.setRuntimeTypeInfo([], t11);
      t6 = new Float32Array(9);
      t8 = new T.Matrix4(new Float32Array(16));
      t8.setIdentity$0();
      t9 = new T.Matrix4(new Float32Array(16));
      t9.setIdentity$0();
      t10 = new Float32Array(3);
      t12 = new Float32Array(3);
      new Float32Array(3);
      new Float32Array(3);
      t3 = new A.Node(t4, t3, t5, new T.Matrix3(t6), t8, t9, new T.Vector3(t10), new T.Vector3(t12), "cylinder");
      t3.setPos$3(5, 0, -5);
      C.JSArray_methods.add$1(t7, t3);
      t3 = G.GeometryBuilderToMeshData("torusknot", t2, B.TorusKnotGeometry(true, 1, 2, 3, 1, 128, 16, 0.4));
      t5 = H.setRuntimeTypeInfo([], t11);
      t6 = new Float32Array(9);
      t8 = new T.Matrix4(new Float32Array(16));
      t8.setIdentity$0();
      t9 = new T.Matrix4(new Float32Array(16));
      t9.setIdentity$0();
      t10 = new Float32Array(3);
      t12 = new Float32Array(3);
      new Float32Array(3);
      new Float32Array(3);
      t3 = new A.Node(t4, t3, t5, new T.Matrix3(t6), t8, t9, new T.Vector3(t10), new T.Vector3(t12), "torusknot");
      t3.setPos$3(5, 0, 5);
      C.JSArray_methods.add$1(t7, t3);
      t2 = R.ShapeCube(t2, 30, 0.1, 30);
      t3 = $.$get$matGray();
      t4 = H.setRuntimeTypeInfo([], t11);
      t5 = new Float32Array(9);
      t6 = new T.Matrix4(new Float32Array(16));
      t6.setIdentity$0();
      t8 = new T.Matrix4(new Float32Array(16));
      t8.setIdentity$0();
      t9 = new Float32Array(3);
      t10 = new Float32Array(3);
      new Float32Array(3);
      new Float32Array(3);
      t2 = new A.Node(t3, t2, t4, new T.Matrix3(t5), t6, t8, new T.Vector3(t9), new T.Vector3(t10), "plane");
      t2.setPos$3(0, -10, 0);
      C.JSArray_methods.add$1(t7, t2);
      for (t2 = t7.length, _i = 0; _i < t7.length; t7.length === t2 || (0, H.throwConcurrentModificationError)(t7), ++_i) {
        n = t7[_i];
        C.JSArray_methods.add$1(shadowMap._programCompute.nodes, n);
      }
      t2 = sceneFixed.program;
      md = G.MeshData$("light", t2._cgl, 1, t2._shaderObjectV._canonicalToLayoutPos);
      md.AddVertices$1(new Float32Array(3));
      md.AddFaces$1(H.setRuntimeTypeInfo([0, 0], [P.int]));
      t2 = $.$get$lightSourceMat();
      t11 = H.setRuntimeTypeInfo([], t11);
      t3 = new Float32Array(9);
      t4 = new T.Matrix4(new Float32Array(16));
      t4.setIdentity$0();
      t5 = new T.Matrix4(new Float32Array(16));
      t5.setIdentity$0();
      t6 = new Float32Array(3);
      t7 = new Float32Array(3);
      new Float32Array(3);
      new Float32Array(3);
      C.JSArray_methods.add$1(sceneFixed.nodes, new A.Node(t2, md, t11, new T.Matrix3(t3), t4, t5, new T.Vector3(t6), new T.Vector3(t7), "light"));
      for (t2 = t1.getElementsByTagName("input"), t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        t4 = H.interceptedTypeCheck(t2[_i], "$isElement");
        t5 = J.getInterceptor$x(t4);
        t6 = t5.get$onChange(t4);
        t7 = H.getTypeArgumentByIndex(t6, 0);
        W._EventStreamSubscription$(t6._target, t6._eventType, H.functionTypeCheck(new L.main_closure(), {func: 1, ret: -1, args: [t7]}), false, t7);
        t7 = t5.get$onInput(t4);
        t6 = H.getTypeArgumentByIndex(t7, 0);
        W._EventStreamSubscription$(t7._target, t7._eventType, H.functionTypeCheck(new L.main_closure0(), {func: 1, ret: -1, args: [t6]}), false, t6);
        t4 = t5.get$onMouseMove(t4);
        t5 = H.getTypeArgumentByIndex(t4, 0);
        W._EventStreamSubscription$(t4._target, t4._eventType, H.functionTypeCheck(L.shadow__SwallowEvent$closure(), {func: 1, ret: -1, args: [t5]}), false, t5);
      }
      for (t2 = t1.getElementsByTagName("input"), t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        t4 = H.interceptedTypeCheck(t2[_i], "$isElement");
        H.printString("initialize inputs " + H.S(t4.id));
        e = t1.createEvent("Event");
        e.initEvent("change", true, true);
        t4.dispatchEvent(e);
        e = t1.createEvent("Event");
        e.initEvent("input", true, true);
        t4.dispatchEvent(e);
      }
      t1 = new L.main_resolutionChange(canvas, perspective, phaseMain, shadowMap);
      t1.call$1(null);
      t2 = W.Event;
      W._EventStreamSubscription$(window, "resize", H.functionTypeCheck(t1, {func: 1, ret: -1, args: [t2]}), false, t2);
      _box_0._lastTimeMs = 0;
      new L.main_animate(_box_0, orbit, md, fps, shadowMap, uniforms, phaseMain).call$1(0);
    },
    main_closure: function main_closure() {
    },
    main_closure0: function main_closure0() {
    },
    main_resolutionChange: function main_resolutionChange(t0, t1, t2, t3) {
      var _ = this;
      _.canvas = t0;
      _.perspective = t1;
      _.phaseMain = t2;
      _.shadowMap = t3;
    },
    main_animate: function main_animate(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._box_0 = t0;
      _.orbit = t1;
      _.mdLight = t2;
      _.fps = t3;
      _.shadowMap = t4;
      _.uniforms = t5;
      _.phaseMain = t6;
    }
  };
  var holders = [C, H, J, P, W, G, R, A, B, D, T, L];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return "Instance of '" + H.Primitives_objectTypeName(receiver) + "'";
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
    },
    $signature: function() {
      return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    addAll$1: function(receiver, collection) {
      var t1, _i;
      H.assertSubtype(collection, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("addAll"));
      for (t1 = collection.length, _i = 0; _i < collection.length; collection.length === t1 || (0, H.throwConcurrentModificationError)(collection), ++_i)
        receiver.push(collection[_i]);
    },
    join$1: function(receiver, separator) {
      var list, i;
      list = new Array(receiver.length);
      list.fixed$length = Array;
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, H.S(receiver[i]));
      return list.join(separator);
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    any$1: function(receiver, test) {
      var end, i;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (test.call$1(receiver[i]))
          return true;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    sort$0: function(receiver) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("sort"));
      H.Sort_sort(receiver, J._interceptors_JSArray__compareAny$closure(), H.getTypeArgumentByIndex(receiver, 0));
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    get$iterator: function(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, 0, [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
    },
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function(_) {
      return this.__interceptors$_current;
    },
    moveNext$0: function() {
      var t1, $length, t2;
      t1 = this.__interceptors$_iterable;
      $length = t1.length;
      if (this.__interceptors$_length !== $length)
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t2 = this._index;
      if (t2 >= $length) {
        this.set$__interceptors$_current(null);
        return false;
      }
      this.set$__interceptors$_current(t1[t2]);
      ++this._index;
      return true;
    },
    set$__interceptors$_current: function(_current) {
      this.__interceptors$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      H.numTypeCheck(b);
      if (typeof b !== "number")
        throw H.wrapException(H.argumentErrorValue(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".floor()"));
    },
    clamp$2: function(receiver, lowerLimit, upperLimit) {
      if (this.compareTo$1(lowerLimit, upperLimit) > 0)
        throw H.wrapException(H.argumentErrorValue(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toStringAsFixed$1: function(receiver, fractionDigits) {
      var result;
      if (fractionDigits > 20)
        throw H.wrapException(P.RangeError$range(fractionDigits, 0, 20, "fractionDigits", null));
      result = receiver.toFixed(fractionDigits);
      if (receiver === 0 && this.get$isNegative(receiver))
        return "-" + result;
      return result;
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var intValue, absolute, floorLog2, factor, scaled;
      intValue = receiver | 0;
      if (receiver === intValue)
        return 536870911 & intValue;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return 536870911 & ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || false)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver > other;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {$isint: 1};
  J.JSDouble.prototype = {};
  J.JSString.prototype = {
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        H.throwExpression(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$value(other, null, null));
      return receiver + other;
    },
    startsWith$1: function(receiver, pattern) {
      var otherLength = pattern.length;
      if (otherLength > receiver.length)
        return false;
      return pattern === receiver.substring(0, otherLength);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    trim$0: function(receiver) {
      var result, endIndex, startIndex, t1, endIndex0;
      result = receiver.trim();
      endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this._codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    contains$2: function(receiver, other, startIndex) {
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    compareTo$1: function(receiver, other) {
      var t1;
      H.stringTypeCheck(other);
      if (typeof other !== "string")
        throw H.wrapException(H.argumentErrorValue(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index.$ge(0, receiver.length) || index.$lt(0, 0))
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1,
    $isString: 1
  };
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      return new H.ListIterator(this, this.get$length(this), 0, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
    },
    where$1: function(_, test) {
      return this.super$Iterable$where(0, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "ListIterable", 0)]}));
    }
  };
  H.ListIterator.prototype = {
    get$current: function(_) {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this.__internal$_index;
      if (t3 >= $length) {
        this.set$_current(null);
        return false;
      }
      this.set$_current(t2.elementAt$1(t1, t3));
      ++this.__internal$_index;
      return true;
    },
    set$_current: function(_current) {
      this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator: function(_) {
      var t1 = this._iterable;
      return new H.MappedIterator(t1.get$iterator(t1), this._f, this.$ti);
    },
    get$length: function(_) {
      return this._iterable._map.__js_helper$_length;
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.EfficientLengthMappedIterable.prototype = {};
  H.MappedIterator.prototype = {
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this.set$_current(this._f.call$1(t1.__js_helper$_current));
        return true;
      }
      this.set$_current(null);
      return false;
    },
    get$current: function(_) {
      return this._current;
    },
    set$_current: function(_current) {
      this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.MappedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.WhereIterable.prototype = {
    get$iterator: function(_) {
      return new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f, this.$ti);
    }
  };
  H.WhereIterator.prototype = {
    moveNext$0: function() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (t2.call$1(t1.get$current(t1)))
          return true;
      return false;
    },
    get$current: function(_) {
      var t1 = this._iterator;
      return t1.get$current(t1);
    }
  };
  H.FixedLengthListMixin.prototype = {};
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = Object.create(null);
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: method not found: '" + t1 + "' (" + H.S(this._message) + ")";
      return "NoSuchMethodError: method not found: '" + t1 + "' on '" + t2 + "' (" + H.S(this._message) + ")";
    }
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this._message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  H.unwrapException_saveStackTrace.prototype = {
    call$1: function(error) {
      if (!!J.getInterceptor$(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex;
      return error;
    },
    $signature: 5
  };
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      return "Closure '" + H.Primitives_objectTypeName(this).trim() + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.unminifyOrTag($name) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this._name) + "' of " + ("Instance of '" + H.Primitives_objectTypeName(receiver) + "'");
    }
  };
  H.TypeErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    }
  };
  H.CastErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    }
  };
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    }
  };
  H.TypeImpl.prototype = {
    get$_typeName: function() {
      var t1 = this.__typeName;
      if (t1 == null) {
        t1 = H.runtimeTypeToString(this._rti);
        this.__typeName = t1;
      }
      return t1;
    },
    toString$0: function(_) {
      return this.get$_typeName();
    },
    get$hashCode: function(_) {
      var t1 = this._hashCode;
      if (t1 == null) {
        t1 = C.JSString_methods.get$hashCode(this.get$_typeName());
        this._hashCode = t1;
      }
      return t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.TypeImpl && this.get$_typeName() === other.get$_typeName();
    }
  };
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$keys: function(_) {
      return new H.LinkedHashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return H.MappedIterable_MappedIterable(new H.LinkedHashMapKeyIterable(this, [t1]), new H.JsLinkedHashMap_values_closure(this), t1, H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(_, key) {
      var strings, t1;
      if (typeof key === "string") {
        strings = this._strings;
        if (strings == null)
          return false;
        return this._containsTableEntry$2(strings, key);
      } else {
        t1 = this.internalContainsKey$1(key);
        return t1;
      }
    },
    internalContainsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(this._getTableBucket$2(rest, J.get$hashCode$(key) & 0x3ffffff), key) >= 0;
    },
    $index: function(_, key) {
      var strings, cell, t1, nums;
      if (typeof key === "string") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = this._getTableCell$2(strings, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = this._getTableCell$2(nums, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = this._getTableBucket$2(rest, J.get$hashCode$(key) & 0x3ffffff);
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, rest, hash, bucket, index;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
      if (typeof key === "string") {
        strings = this._strings;
        if (strings == null) {
          strings = this._newHashTable$0();
          this._strings = strings;
        }
        this.__js_helper$_addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = this._newHashTable$0();
          this._nums = nums;
        }
        this.__js_helper$_addHashTableEntry$3(nums, key, value);
      } else {
        rest = this._rest;
        if (rest == null) {
          rest = this._newHashTable$0();
          this._rest = rest;
        }
        hash = J.get$hashCode$(key) & 0x3ffffff;
        bucket = this._getTableBucket$2(rest, hash);
        if (bucket == null)
          this._setTableEntry$3(rest, hash, [this.__js_helper$_newLinkedCell$2(key, value)]);
        else {
          index = this.internalFindBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].hashMapCellValue = value;
          else
            bucket.push(this.__js_helper$_newLinkedCell$2(key, value));
        }
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]});
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    __js_helper$_addHashTableEntry$3: function(table, key, value) {
      var cell;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
      cell = this._getTableCell$2(table, key);
      if (cell == null)
        this._setTableEntry$3(table, key, this.__js_helper$_newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    _modified$0: function() {
      this._modifications = this._modifications + 1 & 67108863;
    },
    __js_helper$_newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new H.LinkedHashMapCell(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell.__js_helper$_previous = last;
        last._next = cell;
        this._last = cell;
      }
      ++this.__js_helper$_length;
      this._modified$0();
      return cell;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var table = Object.create(null);
      this._setTableEntry$3(table, "<non-identifier-key>", table);
      this._deleteTableEntry$2(table, "<non-identifier-key>");
      return table;
    },
    $isLinkedHashMap: 1
  };
  H.JsLinkedHashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this;
      return t1.$index(0, H.assertSubtypeOfRuntimeType(each, H.getTypeArgumentByIndex(t1, 0)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this._map.__js_helper$_length;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti);
      t2._cell = t1._first;
      return t2;
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    get$current: function(_) {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var t1 = this._map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this.set$__js_helper$_current(null);
          return false;
        } else {
          this.set$__js_helper$_current(t1.hashMapCellKey);
          this._cell = this._cell._next;
          return true;
        }
      }
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 5
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 15
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H.stringTypeCheck(tag));
    },
    $signature: 16
  };
  H.NativeTypedData.prototype = {$isTypedData: 1};
  H.NativeTypedArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
    }
  };
  H.NativeTypedArrayOfDouble.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.doubleTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $asFixedLengthListMixin: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    }
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $asFixedLengthListMixin: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  H.NativeFloat32List.prototype = {$isFloat32List: 1};
  H.NativeInt16List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeInt32List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isInt32List: 1
  };
  H.NativeInt8List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint16List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint32List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isUint32List: 1
  };
  H.NativeUint8ClampedList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint8List.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1, f;
      t1 = this._box_0;
      f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 6
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 17
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 0
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 0
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    }
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 1
  };
  P._Completer.prototype = {};
  P._SyncCompleter.prototype = {};
  P._FutureListener.prototype = {
    matchesErrorTest$1: function(asyncError) {
      if (this.state !== 6)
        return true;
      return this.result._zone.runUnary$2$2(H.functionTypeCheck(this.callback, {func: 1, ret: P.bool, args: [P.Object]}), asyncError.error, P.bool, P.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback, t1, t2, t3;
      errorCallback = this.errorCallback;
      t1 = P.Object;
      t2 = {futureOr: 1, type: H.getTypeArgumentByIndex(this, 1)};
      t3 = this.result._zone;
      if (H.functionTypeTest(errorCallback, {func: 1, args: [P.Object, P.StackTrace]}))
        return H.futureOrCheck(t3.runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, null, t1, P.StackTrace), t2);
      else
        return H.futureOrCheck(t3.runUnary$2$2(H.functionTypeCheck(errorCallback, {func: 1, args: [P.Object]}), asyncError.error, null, t1), t2);
    }
  };
  P._Future.prototype = {
    then$1$2$onError: function(f, onError, $R) {
      var t1, currentZone, result, t2;
      t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
      currentZone = $.Zone__current;
      if (currentZone !== C.C__RootZone) {
        currentZone.toString;
        H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
      result = new P._Future(0, $.Zone__current, [$R]);
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(result, t2, f, onError, [t1, $R]));
      return result;
    },
    then$1$1: function(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _addListener$1: function(listener) {
      var t1, source;
      t1 = this._state;
      if (t1 <= 1) {
        listener._nextListener = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
        this._resultOrListeners = listener;
      } else {
        if (t1 === 2) {
          source = H.interceptedTypeCheck(this._resultOrListeners, "$is_Future");
          t1 = source._state;
          if (t1 < 4) {
            source._addListener$1(listener);
            return;
          }
          this._state = t1;
          this._resultOrListeners = source._resultOrListeners;
        }
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__addListener_closure(this, listener), {func: 1, ret: -1}));
      }
    },
    _prependListeners$1: function(listeners) {
      var _box_0, t1, existingListeners, cursor, cursor0, source;
      _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = this._state;
      if (t1 <= 1) {
        existingListeners = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
        this._resultOrListeners = listeners;
        if (existingListeners != null) {
          for (cursor = listeners; cursor0 = cursor._nextListener, cursor0 != null; cursor = cursor0)
            ;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (t1 === 2) {
          source = H.interceptedTypeCheck(this._resultOrListeners, "$is_Future");
          t1 = source._state;
          if (t1 < 4) {
            source._prependListeners$1(listeners);
            return;
          }
          this._state = t1;
          this._resultOrListeners = source._resultOrListeners;
        }
        _box_0.listeners = this._reverseListeners$1(listeners);
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__prependListeners_closure(_box_0, this), {func: 1, ret: -1}));
      }
    },
    _removeListeners$0: function() {
      var current = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, t2, listeners;
      t1 = H.getTypeArgumentByIndex(this, 0);
      H.futureOrCheck(value, {futureOr: 1, type: t1});
      t2 = this.$ti;
      if (H.checkSubtype(value, "$isFuture", t2, "$asFuture"))
        if (H.checkSubtype(value, "$is_Future", t2, null))
          P._Future__chainCoreFuture(value, this);
        else
          P._Future__chainForeignFuture(value, this);
      else {
        listeners = this._removeListeners$0();
        H.assertSubtypeOfRuntimeType(value, t1);
        this._state = 4;
        this._resultOrListeners = value;
        P._Future__propagateToListeners(this, listeners);
      }
    },
    _completeError$2: function(error, stackTrace) {
      var listeners;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      listeners = this._removeListeners$0();
      this._state = 8;
      this._resultOrListeners = new P.AsyncError(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var t1 = this.target;
      t1._state = 0;
      t1._complete$1(value);
    },
    $signature: 6
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      this.target._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    },
    $signature: 18
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.target._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var completeResult, e, s, t1, exception, t2, originalSource;
      completeResult = null;
      try {
        t1 = this.listener;
        completeResult = t1.result._zone.run$1$1(H.functionTypeCheck(t1.callback, {func: 1}), null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (this.hasError) {
          t1 = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError").error;
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = this._box_0;
        if (t1)
          t2.listenerValueOrError = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError");
        else
          t2.listenerValueOrError = new P.AsyncError(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (!!J.getInterceptor$(completeResult).$isFuture) {
        if (completeResult instanceof P._Future && completeResult._state >= 4) {
          if (completeResult._state === 8) {
            t1 = this._box_0;
            t1.listenerValueOrError = H.interceptedTypeCheck(completeResult._resultOrListeners, "$isAsyncError");
            t1.listenerHasError = true;
          }
          return;
        }
        originalSource = this._box_1.source;
        t1 = this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), null);
        t1.listenerHasError = false;
      }
    },
    $signature: 1
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 19
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, t1, t2, t3, t4, exception;
      try {
        t1 = this.listener;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        t3 = H.assertSubtypeOfRuntimeType(this.sourceResult, t2);
        t4 = H.getTypeArgumentByIndex(t1, 1);
        this._box_0.listenerValueOrError = t1.result._zone.runUnary$2$2(H.functionTypeCheck(t1.callback, {func: 1, ret: {futureOr: 1, type: t4}, args: [t2]}), t3, {futureOr: 1, type: t4}, t2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = new P.AsyncError(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 1
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, t2, exception, t3, t4;
      try {
        asyncError = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError");
        t1 = this.listener;
        if (t1.matchesErrorTest$1(asyncError) && t1.errorCallback != null) {
          t2 = this._box_0;
          t2.listenerValueOrError = t1.handleError$1(asyncError);
          t2.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError");
        t2 = t1.error;
        t3 = e;
        t4 = this._box_0;
        if (t2 == null ? t3 == null : t2 === t3)
          t4.listenerValueOrError = t1;
        else
          t4.listenerValueOrError = new P.AsyncError(e, s);
        t4.listenerHasError = true;
      }
    },
    $signature: 1
  };
  P._AsyncCallbackEntry.prototype = {};
  P.Stream.prototype = {
    get$length: function(_) {
      var t1, future, t2, t3;
      t1 = {};
      future = new P._Future(0, $.Zone__current, [P.int]);
      t1.count = 0;
      t2 = H.getTypeArgumentByIndex(this, 0);
      t3 = H.functionTypeCheck(new P.Stream_length_closure(t1, this), {func: 1, ret: -1, args: [t2]});
      H.functionTypeCheck(new P.Stream_length_closure0(t1, future), {func: 1, ret: -1});
      W._EventStreamSubscription$(this._target, this._eventType, t3, false, t2);
      return future;
    }
  };
  P.Stream_length_closure.prototype = {
    call$1: function(_) {
      H.assertSubtypeOfRuntimeType(_, H.getTypeArgumentByIndex(this.$this, 0));
      ++this._box_0.count;
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 0
  };
  P.StreamSubscription.prototype = {};
  P.AsyncError.prototype = {
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1
  };
  P._Zone.prototype = {$isZone: 1};
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      var t1, t2, error;
      t1 = this._box_0;
      t2 = t1.error;
      if (t2 == null) {
        error = new P.NullThrownError();
        t1.error = error;
        t1 = error;
      } else
        t1 = t2;
      t2 = this.stackTrace;
      if (t2 == null)
        throw H.wrapException(t1);
      error = H.wrapException(t1);
      error.stack = t2.toString$0(0);
      throw error;
    },
    $signature: 0
  };
  P._RootZone.prototype = {
    runGuarded$1: function(f) {
      var e, s, exception;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(null, null, this, f, -1);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(null, null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(null, null, this, f, arg, -1, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(null, null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    bindCallback$1$1: function(f, $R) {
      return new P._RootZone_bindCallback_closure(this, H.functionTypeCheck(f, {func: 1, ret: $R}), $R);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1}));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._RootZone_bindUnaryCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]}), $T);
    },
    $index: function(_, key) {
      return;
    },
    run$1$1: function(f, $R) {
      H.functionTypeCheck(f, {func: 1, ret: $R});
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    }
  };
  P._RootZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature: function() {
      return {func: 1, ret: this.R};
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 1
  };
  P._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, H.assertSubtypeOfRuntimeType(arg, t1), t1);
    },
    $signature: function() {
      return {func: 1, ret: -1, args: [this.T]};
    }
  };
  P._LinkedHashSet.prototype = {
    get$iterator: function(_) {
      return P._LinkedHashSetIterator$(this, this._collection$_modifications, H.getTypeArgumentByIndex(this, 0));
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return H.interceptedTypeCheck(strings[object], "$is_LinkedHashSetCell") != null;
      } else if (typeof object === "number" && (object & 1073741823) === object) {
        nums = this._collection$_nums;
        if (nums == null)
          return false;
        return H.interceptedTypeCheck(nums[object], "$is_LinkedHashSetCell") != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, object), object) >= 0;
    },
    add$1: function(_, element) {
      var strings, nums;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null) {
          strings = P._LinkedHashSet__newHashTable();
          this._collection$_strings = strings;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 1073741823) === element) {
        nums = this._collection$_nums;
        if (nums == null) {
          nums = P._LinkedHashSet__newHashTable();
          this._collection$_nums = nums;
        }
        return this._addHashTableEntry$2(nums, element);
      } else
        return this._add$1(0, element);
    },
    _add$1: function(_, element) {
      var rest, hash, bucket;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      rest = this._collection$_rest;
      if (rest == null) {
        rest = P._LinkedHashSet__newHashTable();
        this._collection$_rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._collection$_strings, object);
      else if (typeof object === "number" && (object & 1073741823) === object)
        return this._removeHashTableEntry$2(this._collection$_nums, object);
      else
        return this._remove$1(0, object);
    },
    _remove$1: function(_, object) {
      var rest, bucket, index;
      rest = this._collection$_rest;
      if (rest == null)
        return false;
      bucket = this._getBucket$2(rest, object);
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._collection$_last = null;
        this._collection$_first = null;
        this._collection$_rest = null;
        this._collection$_nums = null;
        this._collection$_strings = null;
        this._collection$_length = 0;
        this._collection$_modified$0();
      }
    },
    _addHashTableEntry$2: function(table, element) {
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      if (H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell") != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell");
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _collection$_modified$0: function() {
      this._collection$_modifications = 1073741823 & this._collection$_modifications + 1;
    },
    _newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P._LinkedHashSetCell(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0)));
      if (this._collection$_first == null) {
        this._collection$_last = cell;
        this._collection$_first = cell;
      } else {
        last = this._collection$_last;
        cell._previous = last;
        last._collection$_next = cell;
        this._collection$_last = cell;
      }
      ++this._collection$_length;
      this._collection$_modified$0();
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell._previous;
      next = cell._collection$_next;
      if (previous == null)
        this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        this._collection$_last = previous;
      else
        next._previous = previous;
      --this._collection$_length;
      this._collection$_modified$0();
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _getBucket$2: function(table, element) {
      return table[this._computeHashCode$1(element)];
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    }
  };
  P._LinkedHashSetCell.prototype = {};
  P._LinkedHashSetIterator.prototype = {
    get$current: function(_) {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._collection$_modifications !== t1._collection$_modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._collection$_cell;
        if (t1 == null) {
          this.set$_collection$_current(null);
          return false;
        } else {
          this.set$_collection$_current(H.assertSubtypeOfRuntimeType(t1._element, H.getTypeArgumentByIndex(this, 0)));
          this._collection$_cell = this._collection$_cell._collection$_next;
          return true;
        }
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P.ListBase.prototype = {$isIterable: 1, $isList: 1};
  P.ListMixin.prototype = {
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), 0, [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]});
      $length = this.get$length(receiver);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    fillRange$3: function(receiver, start, end, fill) {
      var i;
      H.assertSubtypeOfRuntimeType(fill, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, fill);
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t1, t2;
      t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    },
    $signature: 7
  };
  P.MapMixin.prototype = {
    forEach$1: function(receiver, action) {
      var t1, key;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 0), H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 1)]});
      for (t1 = J.get$iterator$ax(this.get$keys(receiver)); t1.moveNext$0();) {
        key = t1.get$current(t1);
        action.call$2(key, this.$index(receiver, key));
      }
    },
    get$length: function(receiver) {
      return J.get$length$asx(this.get$keys(receiver));
    },
    toString$0: function(receiver) {
      return P.MapBase_mapToString(receiver);
    },
    $isMap: 1
  };
  P._SetBase.prototype = {
    addAll$1: function(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(H.assertSubtype(elements, "$isIterable", this.$ti, "$asIterable")); t1.moveNext$0();)
        this.add$1(0, t1.get$current(t1));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    $isIterable: 1,
    $isSet: 1
  };
  P._ListBase_Object_ListMixin.prototype = {};
  P.bool.prototype = {};
  P.DateTime.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.DateTime && this._value === other._value && true;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._value, H.interceptedTypeCheck(other, "$isDateTime")._value);
    },
    get$hashCode: function(_) {
      var t1 = this._value;
      return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0: function(_) {
      var y, m, d, h, min, sec, ms, t1;
      y = P.DateTime__fourDigits(H.Primitives_getYear(this));
      m = P.DateTime__twoDigits(H.Primitives_getMonth(this));
      d = P.DateTime__twoDigits(H.Primitives_getDay(this));
      h = P.DateTime__twoDigits(H.Primitives_getHours(this));
      min = P.DateTime__twoDigits(H.Primitives_getMinutes(this));
      sec = P.DateTime__twoDigits(H.Primitives_getSeconds(this));
      ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(this));
      t1 = y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
      return t1;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.DateTime];
    }
  };
  P.double.prototype = {};
  P.Duration.prototype = {
    $gt: function(_, other) {
      return C.JSInt_methods.$gt(this._duration, other.get$_duration());
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.Duration && this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return C.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._duration;
      if (t2 < 0)
        return "-" + new P.Duration(0 - t2).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 60000000) % 60);
      twoDigitSeconds = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 1000000) % 60);
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(t2 % 1000000);
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.Duration];
    }
  };
  P.Duration_toString_sixDigits.prototype = {
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    },
    $signature: 8
  };
  P.Duration_toString_twoDigits.prototype = {
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    $signature: 8
  };
  P.Error.prototype = {};
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var t1, nameString, message, prefix, explanation, errorValue;
      t1 = this.name;
      nameString = t1 != null ? " (" + t1 + ")" : "";
      t1 = this.message;
      message = t1 == null ? "" : ": " + t1;
      prefix = this.get$_errorName() + nameString + message;
      if (!this._hasValue)
        return prefix;
      explanation = this.get$_errorExplanation();
      errorValue = P.Error_safeToString(this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var t1, explanation, t2;
      t1 = this.start;
      if (t1 == null) {
        t1 = this.end;
        explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
      } else {
        t2 = this.end;
        if (t2 == null)
          explanation = ": Not greater than or equal to " + H.S(t1);
        else if (t2 > t1)
          explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
        else
          explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
      }
      return explanation;
    }
  };
  P.IndexError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var invalidValue, t1;
      invalidValue = H.intTypeCheck(this.invalidValue);
      if (typeof invalidValue !== "number")
        return invalidValue.$lt();
      if (invalidValue < 0)
        return ": index must not be negative";
      t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + H.S(t1);
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
    }
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + this.message;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + P.Error_safeToString(t1) + ".";
    }
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var t1 = this.variableName;
      return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + t1 + "' during its initialization";
    }
  };
  P._Exception.prototype = {
    toString$0: function(_) {
      return "Exception: " + this.message;
    }
  };
  P.FormatException.prototype = {
    toString$0: function(_) {
      var t1, report, objectSource, source;
      t1 = this.message;
      report = "" !== t1 ? "FormatException: " + t1 : "FormatException";
      objectSource = this.source;
      if (typeof objectSource === "string") {
        source = objectSource.length > 78 ? C.JSString_methods.substring$2(objectSource, 0, 75) + "..." : objectSource;
        return report + "\n" + source;
      } else
        return report;
    }
  };
  P.Function.prototype = {};
  P.int.prototype = {};
  P.Iterable.prototype = {
    where$1: function(_, test) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return new H.WhereIterable(this, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), [t1]);
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$single: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      result = it.get$current(it);
      if (it.moveNext$0())
        throw H.wrapException(H.IterableElementError_tooMany());
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P.Iterator.prototype = {};
  P.List.prototype = {$isIterable: 1};
  P.Map.prototype = {};
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.num.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  };
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return "Instance of '" + H.Primitives_objectTypeName(this) + "'";
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P.StackTrace.prototype = {};
  P.String.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1
  };
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return this._contents.length;
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  W.HtmlElement.prototype = {};
  W.AccessibleNodeList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.AnchorElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isAnchorElement: 1
  };
  W.AreaElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.BaseElement.prototype = {$isBaseElement: 1};
  W.Blob.prototype = {};
  W.BodyElement.prototype = {$isBodyElement: 1};
  W.CanvasElement.prototype = {
    getContext$2: function(receiver, contextId, attributes) {
      var t1 = receiver.getContext(contextId, P.convertDartToNative_Dictionary(attributes));
      return t1;
    },
    $isCanvasElement: 1,
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    }
  };
  W.CanvasRenderingContext2D.prototype = {
    getContextAttributes$0: function(receiver) {
      return P.convertNativeToDart_Dictionary(receiver.getContextAttributes());
    }
  };
  W.CharacterData.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssNumericValue.prototype = {$isCssNumericValue: 1};
  W.CssPerspective.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssRule.prototype = {$isCssRule: 1};
  W.CssStyleDeclaration.prototype = {
    _browserPropertyName$1: function(receiver, propertyName) {
      var t1, $name;
      t1 = $.$get$CssStyleDeclaration__propertyCache();
      $name = t1[propertyName];
      if (typeof $name === "string")
        return $name;
      $name = this._supportedBrowserPropertyName$1(receiver, propertyName);
      t1[propertyName] = $name;
      return $name;
    },
    _supportedBrowserPropertyName$1: function(receiver, propertyName) {
      var prefixed;
      if (propertyName.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, function(_, letter) {
        return letter.toUpperCase();
      }) in receiver)
        return propertyName;
      prefixed = P.Device_cssPrefix() + propertyName;
      if (prefixed in receiver)
        return prefixed;
      return propertyName;
    },
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssStyleDeclarationBase.prototype = {};
  W.CssStyleValue.prototype = {};
  W.CssTransformComponent.prototype = {};
  W.CssTransformValue.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssUnparsedValue.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.DataTransferItemList.prototype = {
    $index: function(receiver, index) {
      return receiver[index];
    },
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.DivElement.prototype = {};
  W.Document.prototype = {
    get$onMouseDown: function(receiver) {
      return new W._EventStream(receiver, "mousedown", false, [W.MouseEvent]);
    },
    get$onMouseMove: function(receiver) {
      return new W._EventStream(receiver, "mousemove", false, [W.MouseEvent]);
    },
    get$onMouseUp: function(receiver) {
      return new W._EventStream(receiver, "mouseup", false, [W.MouseEvent]);
    },
    get$onMouseWheel: function(receiver) {
      return C._CustomEventStreamProvider__determineMouseWheelEventType.forTarget$1(receiver);
    }
  };
  W.DomException.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.DomRectList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.assertSubtype(value, "$isRectangle", [P.num], "$asRectangle");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [[P.Rectangle, P.num]];
    },
    $asListMixin: function() {
      return [[P.Rectangle, P.num]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Rectangle, P.num]];
    },
    $asImmutableListMixin: function() {
      return [[P.Rectangle, P.num]];
    }
  };
  W.DomRectReadOnly.prototype = {
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(this.get$width(receiver)) + " x " + H.S(this.get$height(receiver));
    },
    $eq: function(receiver, other) {
      var t1;
      if (other == null)
        return false;
      if (!H.checkSubtype(other, "$isRectangle", [P.num], "$asRectangle"))
        return false;
      if (receiver.left === other.left)
        if (receiver.top === other.top) {
          t1 = J.getInterceptor$x(other);
          t1 = this.get$width(receiver) === t1.get$width(other) && this.get$height(receiver) === t1.get$height(other);
        } else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      return W._JenkinsSmiHash_hash4(C.JSNumber_methods.get$hashCode(receiver.left), C.JSNumber_methods.get$hashCode(receiver.top), C.JSNumber_methods.get$hashCode(this.get$width(receiver)), C.JSNumber_methods.get$hashCode(this.get$height(receiver)));
    },
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    },
    $isRectangle: 1,
    $asRectangle: function() {
      return [P.num];
    }
  };
  W.DomStringList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.stringTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [P.String];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [P.String];
    },
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $asImmutableListMixin: function() {
      return [P.String];
    }
  };
  W.DomTokenList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Element.prototype = {
    get$attributes: function(receiver) {
      return new W._ElementAttributeMap(receiver);
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, t2, contextElement, fragment;
      if (treeSanitizer == null) {
        t1 = $.Element__defaultValidator;
        if (t1 == null) {
          t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
          t2 = new W.NodeValidatorBuilder(t1);
          C.JSArray_methods.add$1(t1, W._Html5NodeValidator$(null));
          C.JSArray_methods.add$1(t1, W._TemplatingNodeValidator$());
          $.Element__defaultValidator = t2;
          validator = t2;
        } else
          validator = t1;
        t1 = $.Element__defaultSanitizer;
        if (t1 == null) {
          t1 = new W._ValidatingTreeSanitizer(validator);
          $.Element__defaultSanitizer = t1;
          treeSanitizer = t1;
        } else {
          t1.validator = validator;
          treeSanitizer = t1;
        }
      }
      if ($.Element__parseDocument == null) {
        t1 = document;
        t2 = t1.implementation.createHTMLDocument("");
        $.Element__parseDocument = t2;
        $.Element__parseRange = t2.createRange();
        t2 = $.Element__parseDocument.createElement("base");
        H.interceptedTypeCheck(t2, "$isBaseElement");
        t2.href = t1.baseURI;
        $.Element__parseDocument.head.appendChild(t2);
      }
      t1 = $.Element__parseDocument;
      if (t1.body == null) {
        t2 = t1.createElement("body");
        t1.body = H.interceptedTypeCheck(t2, "$isBodyElement");
      }
      t1 = $.Element__parseDocument;
      if (!!this.$isBodyElement)
        contextElement = t1.body;
      else {
        contextElement = t1.createElement(receiver.tagName);
        $.Element__parseDocument.body.appendChild(contextElement);
      }
      if ("createContextualFragment" in window.Range.prototype && !C.JSArray_methods.contains$1(C.List_ego, receiver.tagName)) {
        $.Element__parseRange.selectNodeContents(contextElement);
        fragment = $.Element__parseRange.createContextualFragment(html);
      } else {
        contextElement.innerHTML = html;
        fragment = $.Element__parseDocument.createDocumentFragment();
        for (; t1 = contextElement.firstChild, t1 != null;)
          fragment.appendChild(t1);
      }
      t1 = $.Element__parseDocument.body;
      if (contextElement == null ? t1 != null : contextElement !== t1)
        J.remove$0$x(contextElement);
      treeSanitizer.sanitizeTree$1(fragment);
      document.adoptNode(fragment);
      return fragment;
    },
    createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
      return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
    },
    setInnerHtml$1: function(receiver, html) {
      receiver.textContent = null;
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, null, null));
    },
    get$onChange: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "change", false, [W.Event]);
    },
    get$onInput: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "input", false, [W.Event]);
    },
    get$onMouseDown: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "mousedown", false, [W.MouseEvent]);
    },
    get$onMouseMove: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "mousemove", false, [W.MouseEvent]);
    },
    get$onMouseUp: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "mouseup", false, [W.MouseEvent]);
    },
    get$onMouseWheel: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, H.stringTypeCheck(W.Element__determineMouseWheelEventType(receiver)), false, [W.WheelEvent]);
    },
    $isElement: 1,
    get$tagName: function(receiver) {
      return receiver.tagName;
    }
  };
  W.Element_Element$html_closure.prototype = {
    call$1: function(e) {
      return !!J.getInterceptor$(H.interceptedTypeCheck(e, "$isNode0")).$isElement;
    },
    $signature: 20
  };
  W.Event.prototype = {
    get$target: function(receiver) {
      return W._convertNativeToDart_EventTarget(receiver.target);
    },
    $isEvent: 1
  };
  W.EventTarget.prototype = {
    addEventListener$3: function(receiver, type, listener, useCapture) {
      H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, false);
    },
    _addEventListener$3: function(receiver, type, listener, options) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), false);
    },
    $isEventTarget: 1
  };
  W.File.prototype = {$isFile: 1};
  W.FileList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isFile");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.File];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.File];
    },
    $asListMixin: function() {
      return [W.File];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.File];
    },
    $isList: 1,
    $asList: function() {
      return [W.File];
    },
    $asImmutableListMixin: function() {
      return [W.File];
    }
  };
  W.FileWriter.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.FormElement.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Gamepad.prototype = {$isGamepad: 1};
  W.History.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.HtmlCollection.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isNode0");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Node0];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node0];
    },
    $asListMixin: function() {
      return [W.Node0];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node0];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node0];
    },
    $asImmutableListMixin: function() {
      return [W.Node0];
    }
  };
  W.InputElement.prototype = {$isInputElement: 1};
  W.KeyboardEvent.prototype = {$isKeyboardEvent: 1};
  W.Location.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isLocation: 1
  };
  W.MediaList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.MidiInputMap.prototype = {
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.MidiInputMap_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W.MidiInputMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 2
  };
  W.MidiOutputMap.prototype = {
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.MidiOutputMap_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W.MidiOutputMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 2
  };
  W.MimeType.prototype = {$isMimeType: 1};
  W.MimeTypeArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isMimeType");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.MimeType];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.MimeType];
    },
    $asListMixin: function() {
      return [W.MimeType];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.MimeType];
    },
    $isList: 1,
    $asList: function() {
      return [W.MimeType];
    },
    $asImmutableListMixin: function() {
      return [W.MimeType];
    }
  };
  W.MouseEvent.prototype = {
    get$offset: function(receiver) {
      var t1, target, t2, t3, t4, t5;
      if (!!receiver.offsetX)
        return new P.Point(receiver.offsetX, receiver.offsetY, [P.num]);
      else {
        t1 = receiver.target;
        if (!J.getInterceptor$(W._convertNativeToDart_EventTarget(t1)).$isElement)
          throw H.wrapException(P.UnsupportedError$("offsetX is only supported on elements"));
        target = H.interceptedTypeCheck(W._convertNativeToDart_EventTarget(t1), "$isElement");
        t1 = receiver.clientX;
        t2 = receiver.clientY;
        t3 = [P.num];
        t4 = target.getBoundingClientRect();
        t5 = t4.left;
        t4 = t4.top;
        H.assertSubtype(new P.Point(t5, t4, t3), "$isPoint", t3, "$asPoint");
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof t2 !== "number")
          return t2.$sub();
        return new P.Point(C.JSNumber_methods.toInt$0(t1 - t5), C.JSNumber_methods.toInt$0(t2 - t4), t3);
      }
    },
    $isMouseEvent: 1
  };
  W._ChildNodeListLazy.prototype = {
    get$single: function(_) {
      var t1, l;
      t1 = this._this;
      l = t1.childNodes.length;
      if (l === 0)
        throw H.wrapException(P.StateError$("No elements"));
      if (l > 1)
        throw H.wrapException(P.StateError$("More than one element"));
      return t1.firstChild;
    },
    addAll$1: function(_, iterable) {
      var t1, t2, len, i;
      H.assertSubtype(iterable, "$isIterable", [W.Node0], "$asIterable");
      t1 = iterable._this;
      t2 = this._this;
      if (t1 !== t2)
        for (len = t1.childNodes.length, i = 0; i < len; ++i)
          t2.appendChild(t1.firstChild);
      return;
    },
    $indexSet: function(_, index, value) {
      var t1, t2;
      H.interceptedTypeCheck(value, "$isNode0");
      t1 = this._this;
      t2 = t1.childNodes;
      if (index < 0 || index >= t2.length)
        return H.ioore(t2, index);
      t1.replaceChild(value, t2[index]);
    },
    get$iterator: function(_) {
      var t1 = this._this.childNodes;
      return new W.FixedSizeListIterator(t1, t1.length, -1, [H.getRuntimeTypeArgumentIntercepted(C.NodeList_methods, t1, "ImmutableListMixin", 0)]);
    },
    get$length: function(_) {
      return this._this.childNodes.length;
    },
    $index: function(_, index) {
      var t1 = this._this.childNodes;
      if (index < 0 || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $asListMixin: function() {
      return [W.Node0];
    },
    $asIterable: function() {
      return [W.Node0];
    },
    $asList: function() {
      return [W.Node0];
    }
  };
  W.Node0.prototype = {
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    toString$0: function(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    },
    $isNode0: 1
  };
  W.NodeList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isNode0");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Node0];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node0];
    },
    $asListMixin: function() {
      return [W.Node0];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node0];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node0];
    },
    $asImmutableListMixin: function() {
      return [W.Node0];
    }
  };
  W.Plugin.prototype = {$isPlugin: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.PluginArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isPlugin");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Plugin];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Plugin];
    },
    $asListMixin: function() {
      return [W.Plugin];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Plugin];
    },
    $isList: 1,
    $asList: function() {
      return [W.Plugin];
    },
    $asImmutableListMixin: function() {
      return [W.Plugin];
    }
  };
  W.RtcStatsReport.prototype = {
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.RtcStatsReport_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W.RtcStatsReport_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 2
  };
  W.SelectElement.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.SourceBuffer.prototype = {$isSourceBuffer: 1};
  W.SourceBufferList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isSourceBuffer");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.SourceBuffer];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SourceBuffer];
    },
    $asListMixin: function() {
      return [W.SourceBuffer];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SourceBuffer];
    },
    $isList: 1,
    $asList: function() {
      return [W.SourceBuffer];
    },
    $asImmutableListMixin: function() {
      return [W.SourceBuffer];
    }
  };
  W.SpeechGrammar.prototype = {$isSpeechGrammar: 1};
  W.SpeechGrammarList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isSpeechGrammar");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.SpeechGrammar];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SpeechGrammar];
    },
    $asListMixin: function() {
      return [W.SpeechGrammar];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechGrammar];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechGrammar];
    },
    $asImmutableListMixin: function() {
      return [W.SpeechGrammar];
    }
  };
  W.SpeechRecognitionResult.prototype = {$isSpeechRecognitionResult: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Storage.prototype = {
    $index: function(receiver, key) {
      return receiver.getItem(H.stringTypeCheck(key));
    },
    forEach$1: function(receiver, f) {
      var i, key;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String, P.String]});
      for (i = 0; true; ++i) {
        key = receiver.key(i);
        if (key == null)
          return;
        f.call$2(key, receiver.getItem(key));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.Storage_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W.Storage_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 21
  };
  W.StyleSheet.prototype = {$isStyleSheet: 1};
  W.TableElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var table, fragment;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      table = W.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      fragment.toString;
      table.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(table));
      return fragment;
    }
  };
  W.TableRowElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, fragment, section, row;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      t1 = document;
      fragment = t1.createDocumentFragment();
      t1 = C.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      section.toString;
      t1 = new W._ChildNodeListLazy(section);
      row = t1.get$single(t1);
      fragment.toString;
      row.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(row));
      return fragment;
    }
  };
  W.TableSectionElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, fragment, section;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      t1 = document;
      fragment = t1.createDocumentFragment();
      t1 = C.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      fragment.toString;
      section.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(section));
      return fragment;
    }
  };
  W.TemplateElement.prototype = {$isTemplateElement: 1};
  W.TextTrack.prototype = {$isTextTrack: 1};
  W.TextTrackCue.prototype = {$isTextTrackCue: 1};
  W.TextTrackCueList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isTextTrackCue");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.TextTrackCue];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.TextTrackCue];
    },
    $asListMixin: function() {
      return [W.TextTrackCue];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrackCue];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrackCue];
    },
    $asImmutableListMixin: function() {
      return [W.TextTrackCue];
    }
  };
  W.TextTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isTextTrack");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.TextTrack];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.TextTrack];
    },
    $asListMixin: function() {
      return [W.TextTrack];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrack];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrack];
    },
    $asImmutableListMixin: function() {
      return [W.TextTrack];
    }
  };
  W.TimeRanges.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Touch.prototype = {$isTouch: 1};
  W.TouchList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isTouch");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Touch];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Touch];
    },
    $asListMixin: function() {
      return [W.Touch];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Touch];
    },
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    },
    $asImmutableListMixin: function() {
      return [W.Touch];
    }
  };
  W.TrackDefaultList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.UIEvent.prototype = {};
  W.Url.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.VideoTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.WheelEvent.prototype = {
    get$deltaY: function(receiver) {
      if (receiver.deltaY !== undefined)
        return receiver.deltaY;
      throw H.wrapException(P.UnsupportedError$("deltaY is not supported"));
    },
    $isWheelEvent: 1
  };
  W.Window.prototype = {
    get$animationFrame: function(receiver) {
      var t1, t2, t3;
      t1 = P.num;
      t2 = new P._Future(0, $.Zone__current, [t1]);
      t3 = H.functionTypeCheck(new W.Window_animationFrame_closure(new P._SyncCompleter(t2, [t1])), {func: 1, ret: -1, args: [P.num]});
      this._ensureRequestAnimationFrame$0(receiver);
      this._requestAnimationFrame$1(receiver, W._wrapZone(t3, t1));
      return t2;
    },
    _requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.num]}), 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
      (function($this) {
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
          $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
          $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
        }
        if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
          return;
        $this.requestAnimationFrame = function(callback) {
          return window.setTimeout(function() {
            callback(Date.now());
          }, 16);
        };
        $this.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      })(receiver);
    },
    $isWindowBase: 1
  };
  W.Window_animationFrame_closure.prototype = {
    call$1: function(time) {
      var t1 = this.completer;
      time = H.futureOrCheck(H.numTypeCheck(time), {futureOr: 1, type: H.getTypeArgumentByIndex(t1, 0)});
      t1 = t1.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._complete$1(time);
    },
    $signature: 22
  };
  W._Attr.prototype = {$is_Attr: 1};
  W._CssRuleList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isCssRule");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.CssRule];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.CssRule];
    },
    $asListMixin: function() {
      return [W.CssRule];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.CssRule];
    },
    $isList: 1,
    $asList: function() {
      return [W.CssRule];
    },
    $asImmutableListMixin: function() {
      return [W.CssRule];
    }
  };
  W._DomRect.prototype = {
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1;
      if (other == null)
        return false;
      if (!H.checkSubtype(other, "$isRectangle", [P.num], "$asRectangle"))
        return false;
      if (receiver.left === other.left)
        if (receiver.top === other.top) {
          t1 = J.getInterceptor$x(other);
          t1 = receiver.width === t1.get$width(other) && receiver.height === t1.get$height(other);
        } else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      return W._JenkinsSmiHash_hash4(C.JSNumber_methods.get$hashCode(receiver.left), C.JSNumber_methods.get$hashCode(receiver.top), C.JSNumber_methods.get$hashCode(receiver.width), C.JSNumber_methods.get$hashCode(receiver.height));
    },
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    }
  };
  W._GamepadList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isGamepad");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Gamepad];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Gamepad];
    },
    $asListMixin: function() {
      return [W.Gamepad];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Gamepad];
    },
    $isList: 1,
    $asList: function() {
      return [W.Gamepad];
    },
    $asImmutableListMixin: function() {
      return [W.Gamepad];
    }
  };
  W._NamedNodeMap.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isNode0");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Node0];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node0];
    },
    $asListMixin: function() {
      return [W.Node0];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node0];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node0];
    },
    $asImmutableListMixin: function() {
      return [W.Node0];
    }
  };
  W._SpeechRecognitionResultList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isSpeechRecognitionResult");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SpeechRecognitionResult];
    },
    $asListMixin: function() {
      return [W.SpeechRecognitionResult];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $asImmutableListMixin: function() {
      return [W.SpeechRecognitionResult];
    }
  };
  W._StyleSheetList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isStyleSheet");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.StyleSheet];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.StyleSheet];
    },
    $asListMixin: function() {
      return [W.StyleSheet];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.StyleSheet];
    },
    $isList: 1,
    $asList: function() {
      return [W.StyleSheet];
    },
    $asImmutableListMixin: function() {
      return [W.StyleSheet];
    }
  };
  W._AttributeMap.prototype = {
    forEach$1: function(_, f) {
      var t1, t2, t3, _i, key;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String, P.String]});
      for (t1 = this.get$keys(this), t2 = t1.length, t3 = this._html$_element, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        f.call$2(key, t3.getAttribute(key));
      }
    },
    get$keys: function(_) {
      var attributes, keys, len, i, attr;
      attributes = this._html$_element.attributes;
      keys = H.setRuntimeTypeInfo([], [P.String]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        attr = H.interceptedTypeCheck(attributes[i], "$is_Attr");
        if (attr.namespaceURI == null)
          C.JSArray_methods.add$1(keys, attr.name);
      }
      return keys;
    },
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W._ElementAttributeMap.prototype = {
    $index: function(_, key) {
      return this._html$_element.getAttribute(H.stringTypeCheck(key));
    },
    get$length: function(_) {
      return this.get$keys(this).length;
    }
  };
  W._EventStream.prototype = {};
  W._ElementEventStreamImpl.prototype = {};
  W._EventStreamSubscription.prototype = {};
  W._EventStreamSubscription_closure.prototype = {
    call$1: function(e) {
      return this.onData.call$1(H.interceptedTypeCheck(e, "$isEvent"));
    },
    $signature: 23
  };
  W._CustomEventStreamProvider.prototype = {
    forTarget$1: function(e) {
      return new W._EventStream(e, H.stringTypeCheck(this._eventTypeGetter.call$1(e)), false, this.$ti);
    }
  };
  W._Html5NodeValidator.prototype = {
    _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
      var t1, _i;
      t1 = $.$get$_Html5NodeValidator__attributeValidators();
      if (t1.__js_helper$_length === 0) {
        for (_i = 0; _i < 262; ++_i)
          t1.$indexSet(0, C.List_2Zi[_i], W.html__Html5NodeValidator__standardAttributeValidator$closure());
        for (_i = 0; _i < 12; ++_i)
          t1.$indexSet(0, C.List_yrN[_i], W.html__Html5NodeValidator__uriAttributeValidator$closure());
      }
    },
    allowsElement$1: function(element) {
      return $.$get$_Html5NodeValidator__allowedElements().contains$1(0, W.Element__safeTagName(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1, validator;
      tagName = W.Element__safeTagName(element);
      t1 = $.$get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(0, H.S(tagName) + "::" + attributeName);
      if (validator == null)
        validator = t1.$index(0, "*::" + attributeName);
      if (validator == null)
        return false;
      return H.boolTypeCheck(validator.call$4(element, attributeName, value, this));
    },
    $isNodeValidator: 1
  };
  W.ImmutableListMixin.prototype = {
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0)]);
    }
  };
  W.NodeValidatorBuilder.prototype = {
    allowsElement$1: function(element) {
      return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
    },
    $isNodeValidator: 1
  };
  W.NodeValidatorBuilder_allowsElement_closure.prototype = {
    call$1: function(v) {
      return H.interceptedTypeCheck(v, "$isNodeValidator").allowsElement$1(this.element);
    },
    $signature: 9
  };
  W.NodeValidatorBuilder_allowsAttribute_closure.prototype = {
    call$1: function(v) {
      return H.interceptedTypeCheck(v, "$isNodeValidator").allowsAttribute$3(this.element, this.attributeName, this.value);
    },
    $signature: 9
  };
  W._SimpleNodeValidator.prototype = {
    _SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes: function(uriPolicy, allowedAttributes, allowedElements, allowedUriAttributes) {
      var legalAttributes, extraUriAttributes, t1;
      this.allowedElements.addAll$1(0, allowedElements);
      legalAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure());
      extraUriAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure0());
      this.allowedAttributes.addAll$1(0, legalAttributes);
      t1 = this.allowedUriAttributes;
      t1.addAll$1(0, C.List_empty);
      t1.addAll$1(0, extraUriAttributes);
    },
    allowsElement$1: function(element) {
      return this.allowedElements.contains$1(0, W.Element__safeTagName(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1;
      tagName = W.Element__safeTagName(element);
      t1 = this.allowedUriAttributes;
      if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else if (t1.contains$1(0, "*::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else {
        t1 = this.allowedAttributes;
        if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
          return true;
        else if (t1.contains$1(0, "*::" + attributeName))
          return true;
        else if (t1.contains$1(0, H.S(tagName) + "::*"))
          return true;
        else if (t1.contains$1(0, "*::*"))
          return true;
      }
      return false;
    },
    $isNodeValidator: 1
  };
  W._SimpleNodeValidator_closure.prototype = {
    call$1: function(x) {
      return !C.JSArray_methods.contains$1(C.List_yrN, H.stringTypeCheck(x));
    },
    $signature: 10
  };
  W._SimpleNodeValidator_closure0.prototype = {
    call$1: function(x) {
      return C.JSArray_methods.contains$1(C.List_yrN, H.stringTypeCheck(x));
    },
    $signature: 10
  };
  W._TemplatingNodeValidator.prototype = {
    allowsAttribute$3: function(element, attributeName, value) {
      if (this.super$_SimpleNodeValidator$allowsAttribute(element, attributeName, value))
        return true;
      if (attributeName === "template" && value === "")
        return true;
      if (element.getAttribute("template") === "")
        return this._templateAttrs.contains$1(0, attributeName);
      return false;
    }
  };
  W._TemplatingNodeValidator_closure.prototype = {
    call$1: function(attr) {
      return "TEMPLATE::" + H.S(H.stringTypeCheck(attr));
    },
    $signature: 24
  };
  W._SvgNodeValidator.prototype = {
    allowsElement$1: function(element) {
      var t1 = J.getInterceptor$(element);
      if (!!t1.$isScriptElement)
        return false;
      t1 = !!t1.$isSvgElement;
      if (t1 && W.Element__safeTagName(element) === "foreignObject")
        return false;
      if (t1)
        return true;
      return false;
    },
    allowsAttribute$3: function(element, attributeName, value) {
      if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
        return false;
      return this.allowsElement$1(element);
    },
    $isNodeValidator: 1
  };
  W.FixedSizeListIterator.prototype = {
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._position + 1;
      t1 = this._length;
      if (nextPosition < t1) {
        this.set$_html$_current(J.$index$asx(this._array, nextPosition));
        this._position = nextPosition;
        return true;
      }
      this.set$_html$_current(null);
      this._position = t1;
      return false;
    },
    get$current: function(_) {
      return this._html$_current;
    },
    set$_html$_current: function(_current) {
      this._html$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  W._DOMWindowCrossFrame.prototype = {$isEventTarget: 1, $isWindowBase: 1};
  W.NodeValidator.prototype = {};
  W._SameOriginUriPolicy.prototype = {$isUriPolicy: 1};
  W._ValidatingTreeSanitizer.prototype = {
    sanitizeTree$1: function(node) {
      new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$2(node, null);
    },
    _removeNode$2: function(node, $parent) {
      if ($parent == null)
        J.remove$0$x(node);
      else
        $parent.removeChild(node);
    },
    _sanitizeUntrustedElement$2: function(element, $parent) {
      var corrupted, attrs, isAttr, corruptedTest1, elementText, elementTagName, exception, t1;
      corrupted = true;
      attrs = null;
      isAttr = null;
      try {
        attrs = J.get$attributes$x(element);
        isAttr = attrs._html$_element.getAttribute("is");
        corruptedTest1 = function(element) {
          if (!(element.attributes instanceof NamedNodeMap))
            return true;
          var childNodes = element.childNodes;
          if (element.lastChild && element.lastChild !== childNodes[childNodes.length - 1])
            return true;
          if (element.children)
            if (!(element.children instanceof HTMLCollection || element.children instanceof NodeList))
              return true;
          var length = 0;
          if (element.children)
            length = element.children.length;
          for (var i = 0; i < length; i++) {
            var child = element.children[i];
            if (child.id == 'attributes' || child.name == 'attributes' || child.id == 'lastChild' || child.name == 'lastChild' || child.id == 'children' || child.name == 'children')
              return true;
          }
          return false;
        }(element);
        corrupted = corruptedTest1 ? true : !(element.attributes instanceof NamedNodeMap);
      } catch (exception) {
        H.unwrapException(exception);
      }
      elementText = "element unprintable";
      try {
        elementText = J.toString$0$(element);
      } catch (exception) {
        H.unwrapException(exception);
      }
      try {
        elementTagName = W.Element__safeTagName(element);
        this._sanitizeElement$7(H.interceptedTypeCheck(element, "$isElement"), $parent, corrupted, elementText, elementTagName, H.interceptedTypeCheck(attrs, "$isMap"), H.stringTypeCheck(isAttr));
      } catch (exception) {
        if (H.unwrapException(exception) instanceof P.ArgumentError)
          throw exception;
        else {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing corrupted element " + H.S(elementText);
          if (typeof console != "undefined")
            window.console.warn(t1);
        }
      }
    },
    _sanitizeElement$7: function(element, $parent, corrupted, text, tag, attrs, isAttr) {
      var t1, keys, i, $name, t2;
      if (corrupted) {
        this._removeNode$2(element, $parent);
        window;
        t1 = "Removing element due to corrupted attributes on <" + text + ">";
        if (typeof console != "undefined")
          window.console.warn(t1);
        return;
      }
      if (!this.validator.allowsElement$1(element)) {
        this._removeNode$2(element, $parent);
        window;
        t1 = "Removing disallowed element <" + H.S(tag) + "> from " + H.S($parent);
        if (typeof console != "undefined")
          window.console.warn(t1);
        return;
      }
      if (isAttr != null)
        if (!this.validator.allowsAttribute$3(element, "is", isAttr)) {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing disallowed type extension <" + H.S(tag) + ' is="' + isAttr + '">';
          if (typeof console != "undefined")
            window.console.warn(t1);
          return;
        }
      t1 = attrs.get$keys(attrs);
      keys = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      for (i = attrs.get$keys(attrs).length - 1, t1 = attrs._html$_element; i >= 0; --i) {
        if (i >= keys.length)
          return H.ioore(keys, i);
        $name = keys[i];
        if (!this.validator.allowsAttribute$3(element, J.toLowerCase$0$s($name), t1.getAttribute($name))) {
          window;
          t2 = "Removing disallowed attribute <" + H.S(tag) + " " + $name + '="' + H.S(t1.getAttribute($name)) + '">';
          if (typeof console != "undefined")
            window.console.warn(t2);
          t1.removeAttribute($name);
        }
      }
      if (!!J.getInterceptor$(element).$isTemplateElement)
        this.sanitizeTree$1(element.content);
    },
    $isNodeTreeSanitizer: 1
  };
  W._ValidatingTreeSanitizer_sanitizeTree_walk.prototype = {
    call$2: function(node, $parent) {
      var child, nextChild, t1, exception, t2, t3;
      t1 = this.$this;
      switch (node.nodeType) {
        case 1:
          t1._sanitizeUntrustedElement$2(node, $parent);
          break;
        case 8:
        case 11:
        case 3:
        case 4:
          break;
        default:
          t1._removeNode$2(node, $parent);
      }
      child = node.lastChild;
      for (t1 = node == null; null != child;) {
        nextChild = null;
        try {
          nextChild = child.previousSibling;
        } catch (exception) {
          H.unwrapException(exception);
          t2 = H.interceptedTypeCheck(child, "$isNode0");
          if (t1) {
            t3 = t2.parentNode;
            if (t3 != null)
              t3.removeChild(t2);
          } else
            node.removeChild(t2);
          child = null;
          nextChild = node.lastChild;
        }
        if (child != null)
          this.call$2(child, node);
        child = H.interceptedTypeCheck(nextChild, "$isNode0");
      }
    },
    $signature: 25
  };
  W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase.prototype = {};
  W._DomRectList_Interceptor_ListMixin.prototype = {};
  W._DomRectList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._DomStringList_Interceptor_ListMixin.prototype = {};
  W._DomStringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._FileList_Interceptor_ListMixin.prototype = {};
  W._FileList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._HtmlCollection_Interceptor_ListMixin.prototype = {};
  W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._MidiInputMap_Interceptor_MapMixin.prototype = {};
  W._MidiOutputMap_Interceptor_MapMixin.prototype = {};
  W._MimeTypeArray_Interceptor_ListMixin.prototype = {};
  W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._NodeList_Interceptor_ListMixin.prototype = {};
  W._NodeList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._PluginArray_Interceptor_ListMixin.prototype = {};
  W._PluginArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._RtcStatsReport_Interceptor_MapMixin.prototype = {};
  W._SourceBufferList_EventTarget_ListMixin.prototype = {};
  W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  W._SpeechGrammarList_Interceptor_ListMixin.prototype = {};
  W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._Storage_Interceptor_MapMixin.prototype = {};
  W._TextTrackCueList_Interceptor_ListMixin.prototype = {};
  W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._TextTrackList_EventTarget_ListMixin.prototype = {};
  W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  W._TouchList_Interceptor_ListMixin.prototype = {};
  W._TouchList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__CssRuleList_Interceptor_ListMixin.prototype = {};
  W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__GamepadList_Interceptor_ListMixin.prototype = {};
  W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__NamedNodeMap_Interceptor_ListMixin.prototype = {};
  W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__SpeechRecognitionResultList_Interceptor_ListMixin.prototype = {};
  W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__StyleSheetList_Interceptor_ListMixin.prototype = {};
  W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P.convertDartToNative_Dictionary_closure.prototype = {
    call$2: function(key, value) {
      this.object[key] = value;
    },
    $signature: 7
  };
  P.OpenDBRequest.prototype = {$isOpenDBRequest: 1};
  P.Request.prototype = {};
  P.VersionChangeEvent.prototype = {
    get$target: function(receiver) {
      return receiver.target;
    }
  };
  P.Point.prototype = {
    toString$0: function(_) {
      return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return H.checkSubtype(other, "$isPoint", [P.num], null) && this.x == other.x && this.y == other.y;
    },
    get$hashCode: function(_) {
      var t1, t2, hash;
      t1 = J.get$hashCode$(this.x);
      t2 = J.get$hashCode$(this.y);
      t2 = P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2);
      hash = 536870911 & t2 + ((67108863 & t2) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    }
  };
  P._RectangleBase.prototype = {};
  P.Rectangle.prototype = {};
  P.Length.prototype = {$isLength: 1};
  P.LengthList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isLength");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $asListMixin: function() {
      return [P.Length];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Length];
    },
    $isList: 1,
    $asList: function() {
      return [P.Length];
    },
    $asImmutableListMixin: function() {
      return [P.Length];
    }
  };
  P.Number.prototype = {$isNumber: 1};
  P.NumberList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isNumber");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $asListMixin: function() {
      return [P.Number];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Number];
    },
    $isList: 1,
    $asList: function() {
      return [P.Number];
    },
    $asImmutableListMixin: function() {
      return [P.Number];
    }
  };
  P.PointList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.ScriptElement.prototype = {$isScriptElement: 1};
  P.StringList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H.stringTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $asImmutableListMixin: function() {
      return [P.String];
    }
  };
  P.SvgElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
      var t1, html, t2, fragment, svgFragment, root;
      t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
      C.JSArray_methods.add$1(t1, W._Html5NodeValidator$(null));
      C.JSArray_methods.add$1(t1, W._TemplatingNodeValidator$());
      C.JSArray_methods.add$1(t1, new W._SvgNodeValidator());
      treeSanitizer = new W._ValidatingTreeSanitizer(new W.NodeValidatorBuilder(t1));
      html = '<svg version="1.1">' + svg + "</svg>";
      t1 = document;
      t2 = t1.body;
      fragment = (t2 && C.BodyElement_methods).createFragment$2$treeSanitizer(t2, html, treeSanitizer);
      svgFragment = t1.createDocumentFragment();
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      root = t1.get$single(t1);
      for (; t1 = root.firstChild, t1 != null;)
        svgFragment.appendChild(t1);
      return svgFragment;
    },
    get$onChange: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "change", false, [W.Event]);
    },
    get$onInput: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "input", false, [W.Event]);
    },
    get$onMouseMove: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "mousemove", false, [W.MouseEvent]);
    },
    $isSvgElement: 1
  };
  P.Transform.prototype = {$isTransform: 1};
  P.TransformList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isTransform");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $asListMixin: function() {
      return [P.Transform];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Transform];
    },
    $isList: 1,
    $asList: function() {
      return [P.Transform];
    },
    $asImmutableListMixin: function() {
      return [P.Transform];
    }
  };
  P._LengthList_Interceptor_ListMixin.prototype = {};
  P._LengthList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._NumberList_Interceptor_ListMixin.prototype = {};
  P._NumberList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._StringList_Interceptor_ListMixin.prototype = {};
  P._StringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._TransformList_Interceptor_ListMixin.prototype = {};
  P._TransformList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P.Float32List.prototype = {$isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    },
    $isTypedData: 1
  };
  P.AudioBuffer.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.AudioParamMap.prototype = {
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new P.AudioParamMap_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  P.AudioParamMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 2
  };
  P.AudioTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.BaseAudioContext.prototype = {};
  P.OfflineAudioContext.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P._AudioParamMap_Interceptor_MapMixin.prototype = {};
  P.Buffer.prototype = {$isBuffer: 1};
  P.Framebuffer0.prototype = {$isFramebuffer0: 1};
  P.Program.prototype = {$isProgram: 1};
  P.RenderingContext.prototype = {
    activeTexture$1: function(receiver, texture) {
      return receiver.activeTexture(texture);
    },
    attachShader$2: function(receiver, program, shader) {
      return receiver.attachShader(program, shader);
    },
    bindBuffer$2: function(receiver, target, buffer) {
      return receiver.bindBuffer(target, buffer);
    },
    bindFramebuffer$2: function(receiver, target, framebuffer) {
      return receiver.bindFramebuffer(target, framebuffer);
    },
    bindTexture$2: function(receiver, target, texture) {
      return receiver.bindTexture(target, texture);
    },
    blendEquation$1: function(receiver, mode) {
      return receiver.blendEquation(mode);
    },
    blendFunc$2: function(receiver, sfactor, dfactor) {
      return receiver.blendFunc(sfactor, dfactor);
    },
    bufferData$3: function(receiver, target, data_OR_size, usage) {
      return receiver.bufferData(target, data_OR_size, usage);
    },
    checkFramebufferStatus$1: function(receiver, target) {
      return receiver.checkFramebufferStatus(target);
    },
    clear$1: function(receiver, mask) {
      return receiver.clear(mask);
    },
    clearColor$4: function(receiver, red, green, blue, alpha) {
      return receiver.clearColor(red, green, blue, alpha);
    },
    compileShader$1: function(receiver, shader) {
      return receiver.compileShader(shader);
    },
    createBuffer$0: function(receiver) {
      return receiver.createBuffer();
    },
    createFramebuffer$0: function(receiver) {
      return receiver.createFramebuffer();
    },
    createProgram$0: function(receiver) {
      return receiver.createProgram();
    },
    createShader$1: function(receiver, type) {
      return receiver.createShader(type);
    },
    createTexture$0: function(receiver) {
      return receiver.createTexture();
    },
    depthMask$1: function(receiver, flag) {
      return receiver.depthMask(flag);
    },
    disable$1: function(receiver, cap) {
      return receiver.disable(cap);
    },
    drawArrays$3: function(receiver, mode, first, count) {
      return receiver.drawArrays(mode, first, count);
    },
    drawElements$4: function(receiver, mode, count, type, offset) {
      return receiver.drawElements(mode, count, type, offset);
    },
    enable$1: function(receiver, cap) {
      return receiver.enable(cap);
    },
    enableVertexAttribArray$1: function(receiver, index) {
      return receiver.enableVertexAttribArray(index);
    },
    framebufferTexture2D$5: function(receiver, target, attachment, textarget, texture, level) {
      return receiver.framebufferTexture2D(target, attachment, textarget, texture, level);
    },
    getContextAttributes$0: function(receiver) {
      return P.convertNativeToDart_Dictionary(receiver.getContextAttributes());
    },
    getError$0: function(receiver) {
      return receiver.getError();
    },
    getProgramInfoLog$1: function(receiver, program) {
      return receiver.getProgramInfoLog(program);
    },
    getProgramParameter$2: function(receiver, program, pname) {
      return receiver.getProgramParameter(program, pname);
    },
    getShaderInfoLog$1: function(receiver, shader) {
      return receiver.getShaderInfoLog(shader);
    },
    getShaderParameter$2: function(receiver, shader, pname) {
      return receiver.getShaderParameter(shader, pname);
    },
    getUniformLocation$2: function(receiver, program, $name) {
      return receiver.getUniformLocation(program, $name);
    },
    linkProgram$1: function(receiver, program) {
      return receiver.linkProgram(program);
    },
    shaderSource$2: function(receiver, shader, string) {
      return receiver.shaderSource(shader, string);
    },
    stencilFunc$3: function(receiver, func, ref, mask) {
      return receiver.stencilFunc(func, ref, mask);
    },
    texParameterf$3: function(receiver, target, pname, param) {
      return receiver.texParameterf(target, pname, param);
    },
    texParameteri$3: function(receiver, target, pname, param) {
      return receiver.texParameteri(target, pname, param);
    },
    uniform1f$2: function(receiver, $location, x) {
      return receiver.uniform1f($location, x);
    },
    uniform1fv$2: function(receiver, $location, v) {
      return receiver.uniform1fv($location, v);
    },
    uniform1i$2: function(receiver, $location, x) {
      return receiver.uniform1i($location, x);
    },
    uniform1iv$2: function(receiver, $location, v) {
      return receiver.uniform1iv($location, v);
    },
    uniform2fv$2: function(receiver, $location, v) {
      return receiver.uniform2fv($location, v);
    },
    uniform3fv$2: function(receiver, $location, v) {
      return receiver.uniform3fv($location, v);
    },
    uniform4fv$2: function(receiver, $location, v) {
      return receiver.uniform4fv($location, v);
    },
    uniformMatrix3fv$3: function(receiver, $location, transpose, array) {
      return receiver.uniformMatrix3fv($location, false, array);
    },
    uniformMatrix4fv$3: function(receiver, $location, transpose, array) {
      return receiver.uniformMatrix4fv($location, false, array);
    },
    useProgram$1: function(receiver, program) {
      return receiver.useProgram(program);
    },
    vertexAttribPointer$6: function(receiver, indx, size, type, normalized, stride, offset) {
      return receiver.vertexAttribPointer(indx, size, type, false, stride, offset);
    },
    viewport$4: function(receiver, x, y, width, height) {
      return receiver.viewport(x, y, width, height);
    }
  };
  P.RenderingContext2.prototype = {
    beginTransformFeedback$1: function(receiver, primitiveMode) {
      return receiver.beginTransformFeedback(primitiveMode);
    },
    bindVertexArray$1: function(receiver, vertexArray) {
      return receiver.bindVertexArray(vertexArray);
    },
    createVertexArray$0: function(receiver) {
      return receiver.createVertexArray();
    },
    drawArraysInstanced$4: function(receiver, mode, first, count, instanceCount) {
      return receiver.drawArraysInstanced(mode, first, count, instanceCount);
    },
    drawElementsInstanced$5: function(receiver, mode, count, type, offset, instanceCount) {
      return receiver.drawElementsInstanced(mode, count, type, offset, instanceCount);
    },
    endTransformFeedback$0: function(receiver) {
      return receiver.endTransformFeedback();
    },
    texStorage2D$5: function(receiver, target, levels, internalformat, width, height) {
      return receiver.texStorage2D(target, levels, internalformat, width, height);
    },
    transformFeedbackVaryings$3: function(receiver, program, varyings, bufferMode) {
      this._transformFeedbackVaryings_1$3(receiver, program, H.assertSubtype(varyings, "$isList", [P.String], "$asList"), bufferMode);
      return;
    },
    _transformFeedbackVaryings_1$3: function(receiver, program, varyings, bufferMode) {
      return receiver.transformFeedbackVaryings(program, varyings, bufferMode);
    },
    vertexAttribDivisor$2: function(receiver, index, divisor) {
      return receiver.vertexAttribDivisor(index, divisor);
    },
    activeTexture$1: function(receiver, texture) {
      return receiver.activeTexture(texture);
    },
    attachShader$2: function(receiver, program, shader) {
      return receiver.attachShader(program, shader);
    },
    bindBuffer$2: function(receiver, target, buffer) {
      return receiver.bindBuffer(target, buffer);
    },
    bindFramebuffer$2: function(receiver, target, framebuffer) {
      return receiver.bindFramebuffer(target, framebuffer);
    },
    bindTexture$2: function(receiver, target, texture) {
      return receiver.bindTexture(target, texture);
    },
    blendEquation$1: function(receiver, mode) {
      return receiver.blendEquation(mode);
    },
    blendFunc$2: function(receiver, sfactor, dfactor) {
      return receiver.blendFunc(sfactor, dfactor);
    },
    bufferData$3: function(receiver, target, data_OR_size, usage) {
      return receiver.bufferData(target, data_OR_size, usage);
    },
    checkFramebufferStatus$1: function(receiver, target) {
      return receiver.checkFramebufferStatus(target);
    },
    clear$1: function(receiver, mask) {
      return receiver.clear(mask);
    },
    clearColor$4: function(receiver, red, green, blue, alpha) {
      return receiver.clearColor(red, green, blue, alpha);
    },
    compileShader$1: function(receiver, shader) {
      return receiver.compileShader(shader);
    },
    createBuffer$0: function(receiver) {
      return receiver.createBuffer();
    },
    createFramebuffer$0: function(receiver) {
      return receiver.createFramebuffer();
    },
    createProgram$0: function(receiver) {
      return receiver.createProgram();
    },
    createShader$1: function(receiver, type) {
      return receiver.createShader(type);
    },
    createTexture$0: function(receiver) {
      return receiver.createTexture();
    },
    depthMask$1: function(receiver, flag) {
      return receiver.depthMask(flag);
    },
    disable$1: function(receiver, cap) {
      return receiver.disable(cap);
    },
    drawArrays$3: function(receiver, mode, first, count) {
      return receiver.drawArrays(mode, first, count);
    },
    drawElements$4: function(receiver, mode, count, type, offset) {
      return receiver.drawElements(mode, count, type, offset);
    },
    enable$1: function(receiver, cap) {
      return receiver.enable(cap);
    },
    enableVertexAttribArray$1: function(receiver, index) {
      return receiver.enableVertexAttribArray(index);
    },
    framebufferTexture2D$5: function(receiver, target, attachment, textarget, texture, level) {
      return receiver.framebufferTexture2D(target, attachment, textarget, texture, level);
    },
    getContextAttributes$0: function(receiver) {
      return P.convertNativeToDart_Dictionary(receiver.getContextAttributes());
    },
    getError$0: function(receiver) {
      return receiver.getError();
    },
    getProgramInfoLog$1: function(receiver, program) {
      return receiver.getProgramInfoLog(program);
    },
    getProgramParameter$2: function(receiver, program, pname) {
      return receiver.getProgramParameter(program, pname);
    },
    getShaderInfoLog$1: function(receiver, shader) {
      return receiver.getShaderInfoLog(shader);
    },
    getShaderParameter$2: function(receiver, shader, pname) {
      return receiver.getShaderParameter(shader, pname);
    },
    getUniformLocation$2: function(receiver, program, $name) {
      return receiver.getUniformLocation(program, $name);
    },
    linkProgram$1: function(receiver, program) {
      return receiver.linkProgram(program);
    },
    shaderSource$2: function(receiver, shader, string) {
      return receiver.shaderSource(shader, string);
    },
    stencilFunc$3: function(receiver, func, ref, mask) {
      return receiver.stencilFunc(func, ref, mask);
    },
    texParameterf$3: function(receiver, target, pname, param) {
      return receiver.texParameterf(target, pname, param);
    },
    texParameteri$3: function(receiver, target, pname, param) {
      return receiver.texParameteri(target, pname, param);
    },
    uniform1f$2: function(receiver, $location, x) {
      return receiver.uniform1f($location, x);
    },
    uniform1fv$2: function(receiver, $location, v) {
      return receiver.uniform1fv($location, v);
    },
    uniform1i$2: function(receiver, $location, x) {
      return receiver.uniform1i($location, x);
    },
    uniform1iv$2: function(receiver, $location, v) {
      return receiver.uniform1iv($location, v);
    },
    uniform2fv$2: function(receiver, $location, v) {
      return receiver.uniform2fv($location, v);
    },
    uniform3fv$2: function(receiver, $location, v) {
      return receiver.uniform3fv($location, v);
    },
    uniform4fv$2: function(receiver, $location, v) {
      return receiver.uniform4fv($location, v);
    },
    uniformMatrix3fv$3: function(receiver, $location, transpose, array) {
      return receiver.uniformMatrix3fv($location, false, array);
    },
    uniformMatrix4fv$3: function(receiver, $location, transpose, array) {
      return receiver.uniformMatrix4fv($location, false, array);
    },
    useProgram$1: function(receiver, program) {
      return receiver.useProgram(program);
    },
    vertexAttribPointer$6: function(receiver, indx, size, type, normalized, stride, offset) {
      return receiver.vertexAttribPointer(indx, size, type, false, stride, offset);
    },
    viewport$4: function(receiver, x, y, width, height) {
      return receiver.viewport(x, y, width, height);
    }
  };
  P.Shader.prototype = {$isShader: 1};
  P.Texture0.prototype = {$isTexture0: 1};
  P.UniformLocation.prototype = {$isUniformLocation: 1};
  P.VertexArrayObject.prototype = {$isVertexArrayObject: 1};
  P.SqlResultSetRowList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return P.convertNativeToDart_Dictionary(receiver.item(index));
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isMap");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $asListMixin: function() {
      return [[P.Map,,,]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Map,,,]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Map,,,]];
    },
    $asImmutableListMixin: function() {
      return [[P.Map,,,]];
    }
  };
  P._SqlResultSetRowList_Interceptor_ListMixin.prototype = {};
  P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  G.NamedEntity.prototype = {};
  G.UniformGroup.prototype = {
    ForceUniform$2: function(canonical, val) {
      this._lib$_uniforms.$indexSet(0, canonical, val);
    },
    GetUniforms$0: function() {
      return this._lib$_uniforms;
    },
    toString$0: function(_) {
      var out, t1, t2, t3;
      out = H.setRuntimeTypeInfo(["{" + new H.TypeImpl(H.getRti(this)).toString$0(0) + "}[" + this.name + "]"], [P.String]);
      for (t1 = this._lib$_uniforms, t2 = new H.LinkedHashMapKeyIterable(t1, [H.getTypeArgumentByIndex(t1, 0)]), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t3 = t2.__js_helper$_current;
        C.JSArray_methods.add$1(out, H.S(t3) + ": " + H.S(t1.$index(0, t3)));
      }
      return C.JSArray_methods.join$1(out, "\n");
    }
  };
  G.ChronosGL.prototype = {
    enableVertexAttribArray$2: function(_, index, divisor) {
      J.enableVertexAttribArray$1$x(this._gl, index);
      if (divisor > 0)
        J.vertexAttribDivisor$2$x(this._gl, index, divisor);
    },
    vertexAttribPointer$7: function(_, buffer, index, size, type, normalized, stride, offset) {
      J.bindBuffer$2$x(this._gl, 34962, buffer);
      J.vertexAttribPointer$6$x(this._gl, index, size, type, false, stride, offset);
    }
  };
  G.Framebuffer.prototype = {};
  G.Face3.prototype = {};
  G.Face4.prototype = {};
  G.GeometryBuilder.prototype = {
    EnableAttribute$1: function(canonical) {
      switch ($.$get$_VarsDb().$index(0, canonical).type) {
        case "vec2":
          this.attributes.$indexSet(0, canonical, H.setRuntimeTypeInfo([], [T.Vector2]));
          break;
        case "vec3":
          this.attributes.$indexSet(0, canonical, H.setRuntimeTypeInfo([], [T.Vector3]));
          break;
        case "vec4":
          this.attributes.$indexSet(0, canonical, H.setRuntimeTypeInfo([], [T.Vector4]));
          break;
        case "float":
          this.attributes.$indexSet(0, canonical, H.setRuntimeTypeInfo([], [P.double]));
          break;
        case "uvec4":
          this.attributes.$indexSet(0, canonical, H.setRuntimeTypeInfo([], [[P.List, P.int]]));
          break;
      }
    },
    AddFaces4$1: function(n) {
      var v, t1, i;
      v = this.vertices.length;
      for (t1 = this._faces4, i = 0; i < n; ++i, v += 4)
        C.JSArray_methods.add$1(t1, new G.Face4(v, v + 1, v + 2, v + 3));
    },
    AddVertices$1: function(vs) {
      var t1, t2, _i, v, t3;
      H.assertSubtype(vs, "$isList", [T.Vector3], "$asList");
      for (t1 = vs.length, t2 = this.vertices, _i = 0; _i < vs.length; vs.length === t1 || (0, H.throwConcurrentModificationError)(vs), ++_i) {
        v = vs[_i];
        t3 = new T.Vector3(new Float32Array(3));
        t3.setFrom$1(v);
        C.JSArray_methods.add$1(t2, t3);
      }
    },
    AddAttributesVector2$2: function(canonical, lst) {
      var t1, ts, t2, _i, v, t3, otherStorage;
      t1 = [T.Vector2];
      H.assertSubtype(lst, "$isList", t1, "$asList");
      ts = H.assertSubtype(this.attributes.$index(0, canonical), "$isList", t1, "$asList");
      for (t1 = lst.length, t2 = ts && C.JSArray_methods, _i = 0; _i < lst.length; lst.length === t1 || (0, H.throwConcurrentModificationError)(lst), ++_i) {
        v = lst[_i];
        t3 = new Float32Array(2);
        otherStorage = v._v2storage;
        t3[1] = otherStorage[1];
        t3[0] = otherStorage[0];
        t2.add$1(ts, new T.Vector2(t3));
      }
    },
    AddAttributesVector3$2: function(canonical, lst) {
      var t1, ts, t2, _i, v, t3;
      t1 = [T.Vector3];
      H.assertSubtype(lst, "$isList", t1, "$asList");
      ts = H.assertSubtype(this.attributes.$index(0, canonical), "$isList", t1, "$asList");
      for (t1 = lst.length, t2 = ts && C.JSArray_methods, _i = 0; _i < lst.length; lst.length === t1 || (0, H.throwConcurrentModificationError)(lst), ++_i) {
        v = lst[_i];
        t3 = new T.Vector3(new Float32Array(3));
        t3.setFrom$1(v);
        t2.add$1(ts, t3);
      }
    },
    GenerateFaceIndices$0: function() {
      var t1, t2, t3, faces, i, _i, f3, f4, t4;
      t1 = this._faces3;
      t2 = this._faces4;
      t3 = new Array(t1.length * 3 + t2.length * 6);
      t3.fixed$length = Array;
      faces = H.setRuntimeTypeInfo(t3, [P.int]);
      for (t3 = t1.length, i = 0, _i = 0; _i < t1.length; t1.length === t3 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        f3 = t1[_i];
        C.JSArray_methods.$indexSet(faces, i, f3.a);
        C.JSArray_methods.$indexSet(faces, i + 1, f3.b);
        C.JSArray_methods.$indexSet(faces, i + 2, f3.c);
        i += 3;
      }
      for (t1 = t2.length, _i = 0; _i < t2.length; t2.length === t1 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        f4 = t2[_i];
        t3 = f4.a;
        C.JSArray_methods.$indexSet(faces, i, t3);
        C.JSArray_methods.$indexSet(faces, i + 1, f4.b);
        t4 = f4.c;
        C.JSArray_methods.$indexSet(faces, i + 2, t4);
        C.JSArray_methods.$indexSet(faces, i + 3, t3);
        C.JSArray_methods.$indexSet(faces, i + 4, t4);
        C.JSArray_methods.$indexSet(faces, i + 5, f4.d);
        i += 6;
      }
      return faces;
    },
    GenerateRegularGridUV$2: function(w, h) {
      var uvs, t1, t2, y, t3, x, t4;
      uvs = H.setRuntimeTypeInfo([], [T.Vector2]);
      this.attributes.$indexSet(0, "aTexUV", uvs);
      for (t1 = h - 1, t2 = w - 1, y = 0; y < h; ++y)
        for (t3 = y / t1, x = 0; x < w; ++x) {
          t4 = new Float32Array(2);
          t4[0] = t3;
          t4[1] = x / t2;
          C.JSArray_methods.add$1(uvs, new T.Vector2(t4));
        }
    },
    GenerateRegularGridFaces$3: function(w, h, wrapped) {
      var t1, t2, t3, i, t4, ip, j, jp, t5;
      t1 = this._faces4;
      t2 = w - 1;
      t3 = h - 1;
      i = 0;
      while (true) {
        if (!(i < t3))
          break;
        t4 = i * w;
        ip = i + 1;
        j = 0;
        while (true) {
          if (!(j < t2))
            break;
          jp = j + 1;
          t5 = ip * w;
          C.JSArray_methods.add$1(t1, new G.Face4(t4 + jp, t5 + jp, t5 + j, t4 + j));
          j = jp;
        }
        i = ip;
      }
    },
    toString$0: function(_) {
      var s, t1, t2, t3, type;
      s = H.setRuntimeTypeInfo(["GB:", "V[" + this.vertices.length + "]", "f3[" + this._faces3.length + "]", "f4[" + this._faces4.length + "]"], [P.String]);
      for (t1 = this.attributes, t2 = new H.LinkedHashMapKeyIterable(t1, [H.getTypeArgumentByIndex(t1, 0)]), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t3 = t2.__js_helper$_current;
        type = $.$get$_VarsDb().$index(0, t3).type;
        C.JSArray_methods.add$1(s, H.S(t3) + "[" + type + "," + t1.$index(0, t3).length + "]");
      }
      return C.JSArray_methods.join$1(s, " ");
    }
  };
  G.Light.prototype = {
    Light$4: function($name, type, diffuse, specular) {
      this.colorDiffuse.setFrom$1(diffuse);
      this.colorSpecular.setFrom$1(specular);
    }
  };
  G.PointLight.prototype = {
    ExtractInfo$2: function(m, o) {
      var t1, t2, t3, t4;
      t1 = this.pos._v3storage;
      t2 = t1[0];
      t3 = m.length;
      if (o >= t3)
        return H.ioore(m, o);
      m[o] = t2;
      t2 = o + 1;
      t4 = t1[1];
      if (t2 >= t3)
        return H.ioore(m, t2);
      m[t2] = t4;
      t4 = o + 2;
      t1 = t1[2];
      if (t4 >= t3)
        return H.ioore(m, t4);
      m[t4] = t1;
      t1 = o + 8;
      t4 = this.colorDiffuse._v3storage;
      t2 = t4[0];
      if (t1 >= t3)
        return H.ioore(m, t1);
      m[t1] = t2;
      t2 = o + 9;
      t1 = t4[1];
      if (t2 >= t3)
        return H.ioore(m, t2);
      m[t2] = t1;
      t1 = o + 10;
      t4 = t4[2];
      if (t1 >= t3)
        return H.ioore(m, t1);
      m[t1] = t4;
      t4 = o + 12;
      t1 = this.colorSpecular._v3storage;
      t2 = t1[0];
      if (t4 >= t3)
        return H.ioore(m, t4);
      m[t4] = t2;
      t2 = o + 13;
      t4 = t1[1];
      if (t2 >= t3)
        return H.ioore(m, t2);
      m[t2] = t4;
      t4 = o + 14;
      t1 = t1[2];
      if (t4 >= t3)
        return H.ioore(m, t4);
      m[t4] = t1;
      t1 = o + 7;
      if (t1 >= t3)
        return H.ioore(m, t1);
      m[t1] = this.range;
    },
    ExtractShadowProjViewMatrix$0: function() {
      return new T.Matrix4(new Float32Array(16));
    },
    toString$0: function(_) {
      return "PL: p:" + H.S(this.pos) + "  r:" + this.range;
    }
  };
  G.DirectionalLight.prototype = {
    ExtractInfo$2: function(m, o) {
      var t1, t2, t3, t4;
      t1 = o + 4;
      t2 = this.dir._v3storage;
      t3 = t2[0];
      t4 = m.length;
      if (t1 >= t4)
        return H.ioore(m, t1);
      m[t1] = t3;
      t3 = o + 5;
      t1 = t2[1];
      if (t3 >= t4)
        return H.ioore(m, t3);
      m[t3] = t1;
      t1 = o + 6;
      t2 = t2[2];
      if (t1 >= t4)
        return H.ioore(m, t1);
      m[t1] = t2;
      t2 = o + 8;
      t1 = this.colorDiffuse._v3storage;
      t3 = t1[0];
      if (t2 >= t4)
        return H.ioore(m, t2);
      m[t2] = t3;
      t3 = o + 9;
      t2 = t1[1];
      if (t3 >= t4)
        return H.ioore(m, t3);
      m[t3] = t2;
      t2 = o + 10;
      t1 = t1[2];
      if (t2 >= t4)
        return H.ioore(m, t2);
      m[t2] = t1;
      t1 = o + 12;
      t2 = this.colorSpecular._v3storage;
      t3 = t2[0];
      if (t1 >= t4)
        return H.ioore(m, t1);
      m[t1] = t3;
      t3 = o + 13;
      t1 = t2[1];
      if (t3 >= t4)
        return H.ioore(m, t3);
      m[t3] = t1;
      t1 = o + 14;
      t2 = t2[2];
      if (t1 >= t4)
        return H.ioore(m, t1);
      m[t1] = t2;
    },
    ExtractShadowProjViewMatrix$0: function() {
      var t1, t2, t3, rml, t4, t5, up;
      t1 = this._projViewMat;
      t2 = this.dim;
      t3 = -t2;
      rml = t2 - t3;
      t1.setZero$0();
      t4 = 2 / rml;
      t5 = t1._m4storage;
      t5[0] = t4;
      t5[5] = t4;
      t5[10] = -2 / rml;
      t3 = -(t2 + t3) / rml;
      t5[12] = t3;
      t5[13] = t3;
      t5[14] = t3;
      t5[15] = 1;
      t2 = this.dir;
      t3 = t2._v3storage;
      up = t3[0] === 0 && t3[2] === 0 ? $.$get$_up2() : $.$get$_up();
      t3 = this._tmpMat;
      T.setViewMatrix(t3, new T.Vector3(new Float32Array(3)), t2, up);
      t1.multiply$1(0, t3);
      return t1;
    },
    toString$0: function(_) {
      return "DL: p:" + H.S(this.dir);
    }
  };
  G.SpotLight.prototype = {
    ExtractInfo$2: function(m, o) {
      var t1, t2, t3, t4;
      t1 = this.pos._v3storage;
      t2 = t1[0];
      t3 = m.length;
      if (o >= t3)
        return H.ioore(m, o);
      m[o] = t2;
      t2 = o + 1;
      t4 = t1[1];
      if (t2 >= t3)
        return H.ioore(m, t2);
      m[t2] = t4;
      t4 = o + 2;
      t1 = t1[2];
      if (t4 >= t3)
        return H.ioore(m, t4);
      m[t4] = t1;
      t1 = o + 4;
      t4 = this.dir._v3storage;
      t2 = t4[0];
      if (t1 >= t3)
        return H.ioore(m, t1);
      m[t1] = t2;
      t2 = o + 5;
      t1 = t4[1];
      if (t2 >= t3)
        return H.ioore(m, t2);
      m[t2] = t1;
      t1 = o + 6;
      t4 = t4[2];
      if (t1 >= t3)
        return H.ioore(m, t1);
      m[t1] = t4;
      t4 = o + 8;
      t1 = this.colorDiffuse._v3storage;
      t2 = t1[0];
      if (t4 >= t3)
        return H.ioore(m, t4);
      m[t4] = t2;
      t2 = o + 9;
      t4 = t1[1];
      if (t2 >= t3)
        return H.ioore(m, t2);
      m[t2] = t4;
      t4 = o + 10;
      t1 = t1[2];
      if (t4 >= t3)
        return H.ioore(m, t4);
      m[t4] = t1;
      t1 = o + 12;
      t4 = this.colorSpecular._v3storage;
      t2 = t4[0];
      if (t1 >= t3)
        return H.ioore(m, t1);
      m[t1] = t2;
      t2 = o + 13;
      t1 = t4[1];
      if (t2 >= t3)
        return H.ioore(m, t2);
      m[t2] = t1;
      t1 = o + 14;
      t4 = t4[2];
      if (t1 >= t3)
        return H.ioore(m, t1);
      m[t1] = t4;
      t4 = o + 7;
      if (t4 >= t3)
        return H.ioore(m, t4);
      m[t4] = this.range;
      t4 = o + 11;
      t1 = Math.cos(H.checkNum(this.angle));
      if (t4 >= t3)
        return H.ioore(m, t4);
      m[t4] = t1;
      t1 = o + 15;
      if (t1 >= t3)
        return H.ioore(m, t1);
      m[t1] = this._spotFocus;
    },
    ExtractShadowProjViewMatrix$0: function() {
      var t1, t2, up, t3;
      t1 = this.dir;
      t2 = t1._v3storage;
      up = t2[0] === 0 && t2[2] === 0 ? $.$get$_up2() : $.$get$_up();
      t2 = this._m1;
      t3 = this.pos;
      T.setViewMatrix(t2, t3, t1.$add(0, t3), up);
      t3 = this._m2;
      t1 = this.angle;
      if (typeof t1 !== "number")
        return H.iae(t1);
      T.setPerspectiveMatrix(t3, 2.1 * t1, this._aspect, this._near, this._far);
      t3.multiply$1(0, t2);
      return t3;
    },
    toString$0: function(_) {
      return "SL: p:" + H.S(this.pos) + "  d:" + H.S(this.dir) + "  r:" + this.range + "  a:" + H.S(this.angle);
    }
  };
  G.Illumination.prototype = {
    GetUniforms$0: function() {
      var t1, t2, t3;
      t1 = this._lightDescs;
      t2 = this._lightTypes;
      G.Illumination__SetLightInfo(t1, t2, this._lights);
      t3 = this._lib$_uniforms;
      t3.$indexSet(0, "uLightDescs", t1);
      t3.$indexSet(0, "uLightTypes", t2);
      return t3;
    }
  };
  G.TheStencilFunction.prototype = {};
  G.TheBlendEquation.prototype = {};
  G.Material.prototype = {};
  G.MeshData.prototype = {
    ChangeAttribute$3: function(canonical, data, width) {
      var t1, t2;
      C.JSString_methods._codeUnitAt$1(canonical, 0);
      H.interceptedTypeCheck(data, "$isFloat32List");
      this._attributes.$indexSet(0, canonical, data);
      t1 = this._cgl;
      t2 = this._buffers.$index(0, canonical);
      J.bindBuffer$2$x(t1._gl, 34962, t2);
      J.bufferData$3$x(t1._gl, 34962, data, 35048);
    },
    ChangeVertices$1: function(data) {
      this._vertices = data;
      this.ChangeAttribute$3("aPosition", data, 3);
    },
    GetNumItems$0: function() {
      var t1 = this._faces;
      if (t1 != null)
        return t1.length;
      return this._vertices.length / 3 | 0;
    },
    AddAttribute$3: function(canonical, data, width) {
      var instanced, t1, t2, desc, index;
      instanced = J._codeUnitAt$1$s(canonical, 0) === 105;
      if (instanced && this._instances === 0)
        this._instances = C.JSInt_methods.$tdiv(data.length, width);
      t1 = this._buffers;
      t2 = this._cgl;
      t1.$indexSet(0, canonical, J.createBuffer$0$x(t2._gl));
      this.ChangeAttribute$3(canonical, data, width);
      desc = $.$get$_VarsDb().$index(0, canonical);
      if (desc == null)
        throw H.wrapException("Unknown canonical " + canonical);
      index = this._locationMap.$index(0, canonical);
      J.bindVertexArray$1$x(t2._gl, this._vao);
      t2.enableVertexAttribArray$2(0, index, instanced ? 1 : 0);
      t2.vertexAttribPointer$7(0, t1.$index(0, canonical), index, desc.GetSize$0(), 5126, false, 0, 0);
    },
    AddVertices$1: function(data) {
      var t1, t2, desc, index;
      t1 = this._buffers;
      t2 = this._cgl;
      t1.$indexSet(0, "aPosition", J.createBuffer$0$x(t2._gl));
      this.ChangeVertices$1(data);
      desc = $.$get$_VarsDb().$index(0, "aPosition");
      if (desc == null)
        throw H.wrapException("Unknown canonical aPosition");
      index = this._locationMap.$index(0, "aPosition");
      J.bindVertexArray$1$x(t2._gl, this._vao);
      t2.enableVertexAttribArray$2(0, index, 0);
      t2.vertexAttribPointer$7(0, t1.$index(0, "aPosition"), index, desc.GetSize$0(), 5126, false, 0, 0);
    },
    ChangeFaces$1: function(faces) {
      var t1, t2, t3;
      H.assertSubtype(faces, "$isList", [P.int], "$asList");
      t1 = this._vertices.length;
      if (t1 < 768) {
        this.set$_faces(new Uint8Array(H._ensureNativeList(faces)));
        this._indexBufferType = 5121;
      } else if (t1 < 196608) {
        this.set$_faces(new Uint16Array(H._ensureNativeList(faces)));
        this._indexBufferType = 5123;
      } else {
        this.set$_faces(new Uint32Array(H._ensureNativeList(faces)));
        this._indexBufferType = 5125;
      }
      t1 = this._cgl;
      J.bindVertexArray$1$x(t1._gl, this._vao);
      t2 = this._indexBuffer;
      t3 = this._faces;
      J.bindBuffer$2$x(t1._gl, 34963, t2);
      J.bufferData$3$x(t1._gl, 34963, t3, 35048);
    },
    AddFaces$1: function(faces) {
      H.assertSubtype(faces, "$isList", [P.int], "$asList");
      this._indexBuffer = J.createBuffer$0$x(this._cgl._gl);
      this.ChangeFaces$1(faces);
    },
    toString$0: function(_) {
      var t1, lst, t2, t3;
      t1 = this._faces;
      lst = H.setRuntimeTypeInfo(["Faces:" + (t1 == null ? 0 : t1.length)], [P.String]);
      for (t1 = this._attributes, t2 = new H.LinkedHashMapKeyIterable(t1, [H.getTypeArgumentByIndex(t1, 0)]), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t3 = t2.__js_helper$_current;
        C.JSArray_methods.add$1(lst, H.S(t3) + ":" + t1.$index(0, t3).length);
      }
      return "MESH[" + this.name + "] " + C.JSArray_methods.join$1(lst, "  ");
    },
    set$_faces: function(_faces) {
      this._faces = H.assertSubtype(_faces, "$isList", [P.int], "$asList");
    }
  };
  G.Perspective.prototype = {
    AdjustAspect$2: function(w, h) {
      var a;
      if (typeof h !== "number")
        return H.iae(h);
      a = w / h;
      if (this._aspect === a)
        return;
      this._aspect = a;
      this.Update$0();
    },
    Update$0: function() {
      T.setPerspectiveMatrix(this._mat, this._fov * 3.141592653589793 / 180, this._aspect, this._near, this._far);
    },
    GetUniforms$0: function() {
      var t1, t2, t3;
      t1 = this._camera;
      t2 = this._lib$_uniforms;
      t2.$indexSet(0, "uEyePosition", t1.getPos$0());
      t3 = this._viewMatrix;
      t3.setFrom$1(t1.transform);
      t1 = this._perspectiveViewMatrix;
      t1.setFrom$1(this._mat);
      t1.multiply$1(0, t3);
      t2.$indexSet(0, "uPerspectiveViewMatrix", t1);
      return t2;
    }
  };
  G.DrawStats.prototype = {
    toString$0: function(_) {
      return "[" + this.name + "] " + this.numInstances + " " + this.numItems + " mode:" + this.drawMode + " [" + this.duration._duration + "usec]";
    }
  };
  G.RenderProgram.prototype = {
    RenderProgram$4: function($name, _cgl, _shaderObjectV, _shaderObjectF) {
      var t1, t2, t3, t4, t5, _i, v;
      for (t1 = this._shaderObjectV.uniformVars, t2 = t1.length, t3 = this._uniformLocations, t4 = this._cgl, t5 = this._program, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        v = t1[_i];
        t3.$indexSet(0, v, J.getUniformLocation$2$x(t4._gl, t5, v));
      }
      for (t1 = this._shaderObjectF.uniformVars, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        v = t1[_i];
        t3.$indexSet(0, v, J.getUniformLocation$2$x(t4._gl, t5, v));
      }
    },
    UninitializedInputs$0: function() {
      var t1, t2, out, t3;
      t1 = this._uniformsInitialized;
      t2 = this._uniformLocations;
      if (t1.__js_helper$_length === t2.__js_helper$_length && this._attributesInitialized._collection$_length === this._attributes._collection$_length)
        return H.setRuntimeTypeInfo([], [P.String]);
      out = H.setRuntimeTypeInfo([], [P.String]);
      for (t2 = new H.LinkedHashMapKeyIterable(t2, [H.getTypeArgumentByIndex(t2, 0)]), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t3 = t2.__js_helper$_current;
        if (!t1.containsKey$1(0, t3))
          C.JSArray_methods.add$1(out, t3);
      }
      for (t1 = this._attributes, t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H.getTypeArgumentByIndex(t1, 0)), t2 = this._attributesInitialized; t1.moveNext$0();) {
        t3 = t1._collection$_current;
        if (!t2.contains$1(0, t3))
          C.JSArray_methods.add$1(out, t3);
      }
      return out;
    },
    _ActivateUniforms$2: function(group, inputs) {
      var t1, t2, t3, t4, t5, t6, count, t7, val, desc, l, t8, t9, delta;
      H.assertSubtype(inputs, "$isMap", [P.String, P.Object], "$asMap");
      t1 = Date.now();
      for (t2 = new H.LinkedHashMapKeyIterable(inputs, [H.getTypeArgumentByIndex(inputs, 0)]), t2 = t2.get$iterator(t2), t3 = this._cgl, t4 = this._uniformLocations, t5 = this._uniformsInitialized, t6 = this.name, count = 0; t2.moveNext$0();) {
        t7 = t2.__js_helper$_current;
        switch (J._codeUnitAt$1$s(t7, 0)) {
          case 117:
            if (t4.containsKey$1(0, t7)) {
              val = inputs.$index(0, t7);
              if (t5.containsKey$1(0, t7))
                H.printString("E:" + (t6 + ":  " + t7 + " : group [" + group + "] overwrites [" + t7 + "] (" + H.S(t5.$index(0, t7)) + ")"));
              t5.$indexSet(0, t7, group);
              desc = $.$get$_VarsDb().$index(0, t7);
              if (desc == null)
                H.throwExpression("unknown " + t7);
              l = t4.$index(0, t7);
              t7 = desc.type;
              switch (t7) {
                case "int":
                  if (desc.arraySize === 0) {
                    H.intTypeCheck(val);
                    J.uniform1i$2$x(t3._gl, l, val);
                  } else if (!!J.getInterceptor$(val).$isInt32List)
                    J.uniform1iv$2$x(t3._gl, l, val);
                  break;
                case "float":
                  if (desc.arraySize === 0) {
                    H.doubleTypeCheck(val);
                    J.uniform1f$2$x(t3._gl, l, val);
                  } else if (!!J.getInterceptor$(val).$isFloat32List)
                    J.uniform1fv$2$x(t3._gl, l, val);
                  break;
                case "mat4":
                  if (desc.arraySize === 0) {
                    t7 = H.interceptedTypeCast(val, "$isMatrix4")._m4storage;
                    J.uniformMatrix4fv$3$x(t3._gl, l, false, t7);
                  } else if (!!J.getInterceptor$(val).$isFloat32List)
                    J.uniformMatrix4fv$3$x(t3._gl, l, false, val);
                  break;
                case "mat3":
                  if (desc.arraySize === 0) {
                    t7 = H.interceptedTypeCast(val, "$isMatrix3")._m3storage;
                    J.uniformMatrix3fv$3$x(t3._gl, l, false, t7);
                  } else if (!!J.getInterceptor$(val).$isFloat32List)
                    J.uniformMatrix3fv$3$x(t3._gl, l, false, val);
                  break;
                case "vec4":
                  t7 = desc.arraySize;
                  t8 = t3._gl;
                  if (t7 === 0)
                    J.uniform4fv$2$x(t8, l, H.interceptedTypeCast(val, "$isVector4")._v4storage);
                  else
                    J.uniform4fv$2$x(t8, l, H.interceptedTypeCheck(val, "$isFloat32List"));
                  break;
                case "vec3":
                  t7 = desc.arraySize;
                  t8 = t3._gl;
                  if (t7 === 0)
                    J.uniform3fv$2$x(t8, l, H.interceptedTypeCast(val, "$isVector3")._v3storage);
                  else
                    J.uniform3fv$2$x(t8, l, H.interceptedTypeCheck(val, "$isFloat32List"));
                  break;
                case "vec2":
                  t7 = desc.arraySize;
                  t8 = t3._gl;
                  if (t7 === 0)
                    J.uniform2fv$2$x(t8, l, H.interceptedTypeCast(val, "$isVector2")._v2storage);
                  else
                    J.uniform2fv$2$x(t8, l, H.interceptedTypeCheck(val, "$isFloat32List"));
                  break;
                case "sampler2D":
                case "sampler2DShadow":
                  t7 = this._nextTextureUnit;
                  if (typeof t7 !== "number")
                    return H.iae(t7);
                  J.activeTexture$1$x(t3._gl, 33984 + t7);
                  t7 = H.interceptedTypeCast(val, "$isTexture")._texture;
                  J.bindTexture$2$x(t3._gl, 3553, t7);
                  t7 = this._nextTextureUnit;
                  J.uniform1i$2$x(t3._gl, l, t7);
                  t7 = this._nextTextureUnit;
                  if (typeof t7 !== "number")
                    return t7.$add();
                  this._nextTextureUnit = t7 + 1;
                  break;
                case "samplerCube":
                  t7 = this._nextTextureUnit;
                  if (typeof t7 !== "number")
                    return H.iae(t7);
                  J.activeTexture$1$x(t3._gl, 33984 + t7);
                  t7 = H.interceptedTypeCast(val, "$isTexture")._texture;
                  J.bindTexture$2$x(t3._gl, 34067, t7);
                  t7 = this._nextTextureUnit;
                  J.uniform1i$2$x(t3._gl, l, t7);
                  t7 = this._nextTextureUnit;
                  if (typeof t7 !== "number")
                    return t7.$add();
                  this._nextTextureUnit = t7 + 1;
                  break;
                default:
                  H.printString("Error: unknow uniform type: " + t7);
              }
              ++count;
            }
            break;
          case 99:
            val = inputs.$index(0, t7);
            switch (t7) {
              case "cDepthTest":
                t7 = J.$eq$(val, true);
                t8 = t3._gl;
                if (t7)
                  J.enable$1$x(t8, 2929);
                else
                  J.disable$1$x(t8, 2929);
                break;
              case "cStencilFunc":
                H.interceptedTypeCast(val, "$isTheStencilFunction");
                t7 = val.func;
                t8 = t3._gl;
                if (t7 === 1281)
                  J.disable$1$x(t8, 2960);
                else {
                  J.enable$1$x(t8, 2960);
                  t8 = val.value;
                  t9 = val.mask;
                  J.stencilFunc$3$x(t3._gl, t7, t8, t9);
                }
                break;
              case "cDepthWrite":
                H.boolTypeCheck(val);
                J.depthMask$1$x(t3._gl, val);
                break;
              case "cBlendEquation":
                H.interceptedTypeCast(val, "$isTheBlendEquation");
                t7 = val.equation;
                t8 = t3._gl;
                if (t7 === 1281)
                  J.disable$1$x(t8, 3042);
                else {
                  J.enable$1$x(t8, 3042);
                  t8 = val.srcFactor;
                  t9 = val.dstFactor;
                  J.blendFunc$2$x(t3._gl, t8, t9);
                  J.blendEquation$1$x(t3._gl, t7);
                }
                break;
            }
            ++count;
            break;
        }
      }
      delta = P.Duration$(Date.now() - new P.DateTime(t1, false)._value, 0);
      "" + count;
      delta.toString$0(0);
    },
    Draw$3: function(md, uniforms, stats) {
      var t1, t2, t3, _i, u, t4, uninitialized, hasTransforms, t5, t6, t7;
      H.assertSubtype(uniforms, "$isList", [G.UniformGroup], "$asList");
      H.assertSubtype(stats, "$isList", [G.DrawStats], "$asList");
      t1 = Date.now();
      t2 = this._cgl;
      J.useProgram$1$x(t2._gl, this._program);
      this._nextTextureUnit = 0;
      t3 = this._uniformsInitialized;
      if (t3.__js_helper$_length > 0) {
        t3._last = null;
        t3._first = null;
        t3._rest = null;
        t3._nums = null;
        t3._strings = null;
        t3.__js_helper$_length = 0;
        t3._modified$0();
      }
      for (t3 = uniforms.length, _i = 0; _i < uniforms.length; uniforms.length === t3 || (0, H.throwConcurrentModificationError)(uniforms), ++_i) {
        u = uniforms[_i];
        this._ActivateUniforms$2(u.name, u.GetUniforms$0());
      }
      t3 = this._attributesInitialized;
      t3.clear$0(0);
      for (t4 = md._attributes, t4 = new H.LinkedHashMapKeyIterable(t4, [H.getTypeArgumentByIndex(t4, 0)]), t4 = t4.get$iterator(t4); t4.moveNext$0();)
        t3.add$1(0, t4.__js_helper$_current);
      uninitialized = this.UninitializedInputs$0();
      if (uninitialized.length !== 0)
        P.print("E:" + (this.name + " " + md._drawMode + ": uninitialized inputs: " + H.S(uninitialized)));
      J.bindVertexArray$1$x(md._cgl._gl, md._vao);
      hasTransforms = this._shaderObjectV.transformVars.length > 0;
      t3 = md._drawMode;
      t4 = md.GetNumItems$0();
      t5 = md._indexBufferType;
      t6 = md._instances;
      if (hasTransforms)
        J.beginTransformFeedback$1$x(t2._gl, t3);
      if (t5 !== -1) {
        t7 = t2._gl;
        if (t6 > 1)
          J.drawElementsInstanced$5$x(t7, t3, t4, t5, 0, t6);
        else
          J.drawElements$4$x(t7, t3, t4, t5, 0);
      } else {
        t5 = t2._gl;
        if (t6 > 1)
          J.drawArraysInstanced$4$x(t5, t3, 0, t4, t6);
        else
          J.drawArrays$3$x(t5, t3, 0, t4);
      }
      if (hasTransforms)
        J.endTransformFeedback$0$x(t2._gl);
      if (stats != null)
        C.JSArray_methods.add$1(stats, new G.DrawStats(this.name, md._instances, md.GetNumItems$0(), t3, P.Duration$(Date.now() - new P.DateTime(t1, false)._value, 0)));
    }
  };
  G.ShaderVarDesc.prototype = {
    GetSize$0: function() {
      switch (this.type) {
        case "float":
          return 1;
        case "vec2":
          return 2;
        case "vec3":
        case "uvec3":
          return 3;
        case "vec4":
        case "uvec4":
          return 4;
        default:
          return -1;
      }
    }
  };
  G.ShaderObject.prototype = {
    AddAttributeVars$1: function(names) {
      var t1, t2, t3, _i, n;
      H.assertSubtype(names, "$isList", [P.String], "$asList");
      for (t1 = names.length, t2 = this.attributeVars, t3 = this._canonicalToLayoutPos, _i = 0; _i < names.length; names.length === t1 || (0, H.throwConcurrentModificationError)(names), ++_i) {
        n = names[_i];
        C.JSArray_methods.add$1(t2, n);
        t3.$indexSet(0, n, this._nextLayoutPos);
        ++this._nextLayoutPos;
      }
      C.JSArray_methods.sort$0(t2);
    },
    AddUniformVars$1: function(names) {
      var t1, t2, _i;
      H.assertSubtype(names, "$isList", [P.String], "$asList");
      for (t1 = names.length, t2 = this.uniformVars, _i = 0; _i < names.length; names.length === t1 || (0, H.throwConcurrentModificationError)(names), ++_i)
        C.JSArray_methods.add$1(t2, names[_i]);
      C.JSArray_methods.sort$0(t2);
    },
    AddVaryingVars$1: function(names) {
      var t1, t2, _i;
      H.assertSubtype(names, "$isList", [P.String], "$asList");
      for (t1 = names.length, t2 = this.varyingVars, _i = 0; _i < names.length; names.length === t1 || (0, H.throwConcurrentModificationError)(names), ++_i)
        C.JSArray_methods.add$1(t2, names[_i]);
      C.JSArray_methods.sort$0(t2);
    },
    SetBodyWithMain$1: function(body) {
      this.shader = this._CreateShader$3(true, H.assertSubtype(body, "$isList", [P.String], "$asList"), null);
    },
    SetBody$2$prolog: function(body, prolog) {
      var t1 = [P.String];
      this.shader = this._CreateShader$3(false, H.assertSubtype(body, "$isList", t1, "$asList"), H.assertSubtype(prolog, "$isList", t1, "$asList"));
    },
    SetBody$1: function(body) {
      return this.SetBody$2$prolog(body, null);
    },
    _CreateShader$3: function(addWrapperForMain, body, prolog) {
      var t1, t2, isFragmentShader, out, t3, _i, a, d, modifier, v, suffix;
      t1 = [P.String];
      H.assertSubtype(body, "$isList", t1, "$asList");
      H.assertSubtype(prolog, "$isList", t1, "$asList");
      t2 = this.attributeVars;
      isFragmentShader = t2.length === 0;
      out = H.setRuntimeTypeInfo(["#version 300 es", "precision highp float;", "precision highp sampler2DShadow;", ""], t1);
      for (t1 = t2.length, t3 = this._canonicalToLayoutPos, _i = 0; _i < t2.length; t2.length === t1 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        a = t2[_i];
        d = $.$get$_VarsDb().$index(0, a);
        C.JSArray_methods.add$1(out, "layout (location=" + H.S(t3.$index(0, a)) + ") in " + d.type + " " + H.S(a) + ";");
      }
      C.JSArray_methods.add$1(out, "");
      modifier = isFragmentShader ? "in" : "out";
      if (isFragmentShader)
        C.JSArray_methods.add$1(out, "out vec4 oFragColor;");
      for (t1 = this.varyingVars, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        v = t1[_i];
        d = $.$get$_VarsDb().$index(0, v);
        C.JSArray_methods.add$1(out, modifier + " " + d.type + " " + H.S(v) + ";");
      }
      for (t1 = this.transformVars, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        v = t1[_i];
        d = $.$get$_VarsDb().$index(0, v);
        C.JSArray_methods.add$1(out, modifier + " " + d.type + " " + H.S(v) + ";");
      }
      C.JSArray_methods.add$1(out, "");
      for (t1 = this.uniformVars, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        v = t1[_i];
        d = $.$get$_VarsDb().$index(0, v);
        t3 = d.arraySize;
        suffix = t3 === 0 ? "" : "[" + t3 + "]";
        C.JSArray_methods.add$1(out, "uniform " + d.type + " " + H.S(v) + suffix + ";");
      }
      C.JSArray_methods.add$1(out, "");
      if (prolog != null)
        C.JSArray_methods.addAll$1(out, prolog);
      if (addWrapperForMain)
        C.JSArray_methods.add$1(out, "void main(void) {");
      C.JSArray_methods.addAll$1(out, body);
      if (addWrapperForMain)
        C.JSArray_methods.add$1(out, "}");
      return C.JSArray_methods.join$1(out, "\n");
    }
  };
  G.Spatial.prototype = {
    getPos$0: function() {
      var t1, t2, t3;
      t1 = this._pos;
      t2 = this.transform._m4storage;
      t3 = t1._v3storage;
      t3[0] = t2[12];
      t3[1] = t2[13];
      t3[2] = t2[14];
      return t1;
    },
    setPos$3: function(x, y, z) {
      var t1 = this.transform._m4storage;
      t1[12] = x;
      t1[13] = y;
      t1[14] = z;
    }
  };
  G.TextureProperties.prototype = {};
  G.Texture.prototype = {
    toString$0: function(_) {
      return "Texture[" + this._url + ", " + this._textureType + "]";
    }
  };
  G.TypedTexture.prototype = {
    toString$0: function(_) {
      return "TypedTexture[" + this._url + ", " + this._internalFormat + ", " + this._width + " X " + this._height + "]";
    }
  };
  R.Stats.prototype = {
    Stats$3: function(_root, fg, bg) {
      var t1, t2;
      t1 = this._root;
      if (t1 == null)
        throw H.wrapException("no element provided");
      t2 = t1.style;
      t2.color = fg;
      t2.fontFamily = "Helvetica,Arial,sans-serif";
      t2.fontSize = "9px";
      t2.lineHeight = "15px";
      t2.padding = "0 0 3px 3px";
      t2.textAlign = "left";
      t2.background = bg;
      t1.appendChild(this._text);
      t1.appendChild(this._graph);
      t1.appendChild(this._extra);
    }
  };
  R.StatsFps.prototype = {
    UpdateFrameCount$1: function(now) {
      var t1, fps, v, e, t2, t3;
      t1 = ++this._frames;
      if (now - this._lastSample < 1000)
        return;
      fps = t1 * 1000 / 1000;
      this._frames = 0;
      this._lastSample = now;
      this._text.textContent = C.JSDouble_methods.toStringAsFixed$1(fps, 2) + " fps";
      C.DivElement_methods.setInnerHtml$1(this._extra, "");
      v = C.JSInt_methods._tdivFast$1(30 * C.JSDouble_methods.ceil$0(fps), 90);
      if (v < 0)
        v = 0;
      if (v > 30)
        v = 30;
      t1 = this._graph;
      e = H.interceptedTypeCheck(t1.firstChild, "$isElement");
      t2 = e.style;
      t3 = "" + v + "px";
      t2.height = t3;
      t1.appendChild(e);
    }
  };
  R.ShadowMap.prototype = {};
  A.Node.prototype = {
    toString$0: function(_) {
      return "NODE[" + this.name + "]";
    }
  };
  A.Scene.prototype = {};
  A.RenderPhase.prototype = {
    Draw$1: function(stats) {
      var t1, t2, t3, t4, t5, t6, t7, _i, scene, uniforms, modelMatrix, _i0;
      H.assertSubtype(stats, "$isList", [G.DrawStats], "$asList");
      t1 = this._lib1$_framebuffer;
      t2 = this._clear_mode;
      t3 = this.viewPortX;
      t4 = this.viewPortY;
      t5 = this.viewPortW;
      t6 = this.viewPortH;
      t7 = t1._cgl;
      t1 = t1._framebuffer;
      J.bindFramebuffer$2$x(t7._gl, 36160, t1);
      J.viewport$4$x(t7._gl, t3, t4, t5, t6);
      if (t2 !== 0)
        J.clear$1$x(t7._gl, t2);
      for (t1 = this._scenes, t2 = t1.length, t3 = P.String, t4 = P.Object, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        scene = t1[_i];
        if (!scene.enabled)
          continue;
        t5 = scene.program;
        if (!t5.enabled)
          continue;
        uniforms = scene.uniforms;
        C.JSArray_methods.add$1(uniforms, new G.UniformGroup(P.LinkedHashMap_LinkedHashMap$_empty(t3, t4), "transforms"));
        modelMatrix = new T.Matrix4(new Float32Array(16));
        modelMatrix.setIdentity$0();
        for (t6 = scene.nodes, t7 = t6.length, _i0 = 0; _i0 < t6.length; t6.length === t7 || (0, H.throwConcurrentModificationError)(t6), ++_i0)
          A.drawRecursively(t5, t6[_i0], modelMatrix, stats, uniforms);
        if (0 >= uniforms.length)
          return H.ioore(uniforms, -1);
        uniforms.pop();
      }
    },
    Draw$0: function() {
      return this.Draw$1(null);
    }
  };
  B.TorusKnotGeometry_curveFunc.prototype = {
    call$2: function(u, out) {
      var t1, t2, cq, sq, cp, sp;
      t1 = this.radius;
      t2 = this.q * u;
      cq = Math.cos(t2);
      sq = Math.sin(t2);
      t2 = this.p * u;
      cp = Math.cos(t2);
      sp = Math.sin(t2);
      t2 = t1 * (2 + cq) * 0.5;
      out.set$x(0, t2 * cp);
      out.set$y(0, t2 * sp);
      out.set$z(0, this.heightScale * t1 * 0.5 * sq);
    },
    $signature: 26
  };
  D.Keyboard.prototype = {
    Keyboard$1: function(elem) {
      var t1, t2;
      elem = document;
      t1 = W.KeyboardEvent;
      t2 = {func: 1, ret: -1, args: [t1]};
      W._EventStreamSubscription$(elem, "keydown", H.functionTypeCheck(new D.Keyboard_closure(this), t2), false, t1);
      W._EventStreamSubscription$(elem, "keyup", H.functionTypeCheck(new D.Keyboard_closure0(this), t2), false, t1);
    }
  };
  D.Keyboard_closure.prototype = {
    call$1: function(e) {
      var t1;
      H.interceptedTypeCheck(e, "$isKeyboardEvent");
      t1 = this.$this;
      t1._currentlyPressedKeys.add$1(0, e.which);
      t1._justPressedKeys.add$1(0, e.which);
    },
    $signature: 11
  };
  D.Keyboard_closure0.prototype = {
    call$1: function(e) {
      var t1;
      H.interceptedTypeCheck(e, "$isKeyboardEvent");
      t1 = this.$this;
      t1._currentlyPressedKeys.remove$1(0, e.which);
      t1._justReleasedKeys.add$1(0, e.which);
    },
    $signature: 11
  };
  D.Mouse.prototype = {
    Mouse$1: function(elem) {
      var t1, t2, t3;
      if (elem == null)
        elem = document;
      t1 = J.getInterceptor$x(elem);
      t2 = t1.get$onMouseMove(elem);
      t3 = H.getTypeArgumentByIndex(t2, 0);
      W._EventStreamSubscription$(t2._target, t2._eventType, H.functionTypeCheck(new D.Mouse_closure(this), {func: 1, ret: -1, args: [t3]}), false, t3);
      t3 = t1.get$onMouseDown(elem);
      t2 = H.getTypeArgumentByIndex(t3, 0);
      W._EventStreamSubscription$(t3._target, t3._eventType, H.functionTypeCheck(new D.Mouse_closure0(this), {func: 1, ret: -1, args: [t2]}), false, t2);
      t2 = t1.get$onMouseUp(elem);
      t3 = H.getTypeArgumentByIndex(t2, 0);
      W._EventStreamSubscription$(t2._target, t2._eventType, H.functionTypeCheck(new D.Mouse_closure1(this), {func: 1, ret: -1, args: [t3]}), false, t3);
      t1 = t1.get$onMouseWheel(elem);
      t3 = H.getTypeArgumentByIndex(t1, 0);
      W._EventStreamSubscription$(t1._target, t1._eventType, H.functionTypeCheck(new D.Mouse_closure2(this), {func: 1, ret: -1, args: [t3]}), false, t3);
    }
  };
  D.Mouse_closure.prototype = {
    call$1: function(e) {
      var t1;
      H.interceptedTypeCheck(e, "$isMouseEvent");
      e.preventDefault();
      t1 = J.getInterceptor$x(e);
      H.intTypeCheck(t1.get$offset(e).x);
      H.intTypeCheck(t1.get$offset(e).y);
      t1 = this.$this;
      t1.moveDeltaX = e.movementX;
      t1.moveDeltaY = e.movementY;
    },
    $signature: 3
  };
  D.Mouse_closure0.prototype = {
    call$1: function(e) {
      var t1;
      H.interceptedTypeCheck(e, "$isMouseEvent");
      e.preventDefault();
      P.print("BUTTON " + H.S(e.button));
      t1 = this.$this;
      t1._currentlyPressedButtons.add$1(0, e.button);
      t1._justPressedButtons.add$1(0, e.button);
    },
    $signature: 3
  };
  D.Mouse_closure1.prototype = {
    call$1: function(e) {
      var t1;
      H.interceptedTypeCheck(e, "$isMouseEvent");
      e.preventDefault();
      t1 = this.$this;
      t1._currentlyPressedButtons.remove$1(0, e.button);
      t1._justReleasedButtons.add$1(0, e.button);
    },
    $signature: 3
  };
  D.Mouse_closure2.prototype = {
    call$1: function(e) {
      H.interceptedTypeCheck(e, "$isWheelEvent");
      e.preventDefault();
      this.$this.wheelDeltaY = H.intTypeCheck(C.WheelEvent_methods.get$deltaY(e));
    },
    $signature: 27
  };
  D.OrbitCamera.prototype = {};
  A.hashObjects_closure.prototype = {
    call$2: function(h, i) {
      var t1, hash;
      H.intTypeCheck(h);
      t1 = J.get$hashCode$(i);
      if (typeof h !== "number")
        return h.$add();
      hash = 536870911 & h + t1;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    $signature: 28
  };
  T.Matrix3.prototype = {
    setFrom$1: function(arg) {
      var argStorage, t1;
      argStorage = arg._m3storage;
      t1 = this._m3storage;
      t1[8] = argStorage[8];
      t1[7] = argStorage[7];
      t1[6] = argStorage[6];
      t1[5] = argStorage[5];
      t1[4] = argStorage[4];
      t1[3] = argStorage[3];
      t1[2] = argStorage[2];
      t1[1] = argStorage[1];
      t1[0] = argStorage[0];
    },
    toString$0: function(_) {
      return "[0] " + this.getRow$1(0).toString$0(0) + "\n[1] " + this.getRow$1(1).toString$0(0) + "\n[2] " + this.getRow$1(2).toString$0(0) + "\n";
    },
    $index: function(_, i) {
      return C.NativeFloat32List_methods.$index(this._m3storage, i);
    },
    $eq: function(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      if (other instanceof T.Matrix3) {
        t1 = this._m3storage;
        t2 = t1[0];
        t3 = other._m3storage;
        t1 = t2 === t3[0] && t1[1] === t3[1] && t1[2] === t3[2] && t1[3] === t3[3] && t1[4] === t3[4] && t1[5] === t3[5] && t1[6] === t3[6] && t1[7] === t3[7] && t1[8] === t3[8];
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return A.hashObjects(this._m3storage);
    },
    getRow$1: function(row) {
      var t1, t2, t3;
      t1 = new Float32Array(3);
      t2 = this._m3storage;
      if (row >= 9)
        return H.ioore(t2, row);
      t1[0] = t2[row];
      t3 = 3 + row;
      if (t3 >= 9)
        return H.ioore(t2, t3);
      t1[1] = t2[t3];
      t3 = 6 + row;
      if (t3 >= 9)
        return H.ioore(t2, t3);
      t1[2] = t2[t3];
      return new T.Vector3(t1);
    },
    copyInverse$1: function(arg) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, det, invDet, t14;
      t1 = arg._m3storage;
      t2 = t1[0];
      t3 = t1[4];
      t4 = t1[8];
      t5 = t1[5];
      t6 = t1[7];
      t7 = t3 * t4 - t5 * t6;
      t8 = t1[1];
      t9 = t1[3];
      t10 = t9 * t4;
      t11 = t1[6];
      t12 = t5 * t11;
      t1 = t1[2];
      t13 = t9 * t6 - t3 * t11;
      det = t2 * t7 - t8 * (t10 - t12) + t1 * t13;
      if (det === 0) {
        this.setFrom$1(arg);
        return 0;
      }
      invDet = 1 / det;
      t14 = this._m3storage;
      t14[0] = invDet * t7;
      t14[1] = invDet * (t1 * t6 - t8 * t4);
      t14[2] = invDet * (t8 * t5 - t1 * t3);
      t14[3] = invDet * (t12 - t10);
      t14[4] = invDet * (t2 * t4 - t1 * t11);
      t14[5] = invDet * (t1 * t9 - t2 * t5);
      t14[6] = invDet * t13;
      t14[7] = invDet * (t8 * t11 - t2 * t6);
      t14[8] = invDet * (t2 * t3 - t8 * t9);
      return det;
    }
  };
  T.Matrix4.prototype = {
    setFrom$1: function(arg) {
      var argStorage, t1;
      argStorage = arg._m4storage;
      t1 = this._m4storage;
      t1[15] = argStorage[15];
      t1[14] = argStorage[14];
      t1[13] = argStorage[13];
      t1[12] = argStorage[12];
      t1[11] = argStorage[11];
      t1[10] = argStorage[10];
      t1[9] = argStorage[9];
      t1[8] = argStorage[8];
      t1[7] = argStorage[7];
      t1[6] = argStorage[6];
      t1[5] = argStorage[5];
      t1[4] = argStorage[4];
      t1[3] = argStorage[3];
      t1[2] = argStorage[2];
      t1[1] = argStorage[1];
      t1[0] = argStorage[0];
    },
    toString$0: function(_) {
      return "[0] " + this.getRow$1(0).toString$0(0) + "\n[1] " + this.getRow$1(1).toString$0(0) + "\n[2] " + this.getRow$1(2).toString$0(0) + "\n[3] " + this.getRow$1(3).toString$0(0) + "\n";
    },
    $index: function(_, i) {
      var t1 = this._m4storage;
      if (i >= 16)
        return H.ioore(t1, i);
      return t1[i];
    },
    $eq: function(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      if (other instanceof T.Matrix4) {
        t1 = this._m4storage;
        t2 = t1[0];
        t3 = other._m4storage;
        t1 = t2 === t3[0] && t1[1] === t3[1] && t1[2] === t3[2] && t1[3] === t3[3] && t1[4] === t3[4] && t1[5] === t3[5] && t1[6] === t3[6] && t1[7] === t3[7] && t1[8] === t3[8] && t1[9] === t3[9] && t1[10] === t3[10] && t1[11] === t3[11] && t1[12] === t3[12] && t1[13] === t3[13] && t1[14] === t3[14] && t1[15] === t3[15];
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return A.hashObjects(this._m4storage);
    },
    getRow$1: function(row) {
      var t1, t2, t3;
      t1 = new Float32Array(4);
      t2 = this._m4storage;
      if (row >= 16)
        return H.ioore(t2, row);
      t1[0] = t2[row];
      t3 = 4 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[1] = t2[t3];
      t3 = 8 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[2] = t2[t3];
      t3 = 12 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[3] = t2[t3];
      return new T.Vector4(t1);
    },
    setZero$0: function() {
      var t1 = this._m4storage;
      t1[0] = 0;
      t1[1] = 0;
      t1[2] = 0;
      t1[3] = 0;
      t1[4] = 0;
      t1[5] = 0;
      t1[6] = 0;
      t1[7] = 0;
      t1[8] = 0;
      t1[9] = 0;
      t1[10] = 0;
      t1[11] = 0;
      t1[12] = 0;
      t1[13] = 0;
      t1[14] = 0;
      t1[15] = 0;
    },
    setIdentity$0: function() {
      var t1 = this._m4storage;
      t1[0] = 1;
      t1[1] = 0;
      t1[2] = 0;
      t1[3] = 0;
      t1[4] = 0;
      t1[5] = 1;
      t1[6] = 0;
      t1[7] = 0;
      t1[8] = 0;
      t1[9] = 0;
      t1[10] = 1;
      t1[11] = 0;
      t1[12] = 0;
      t1[13] = 0;
      t1[14] = 0;
      t1[15] = 1;
    },
    multiply$1: function(_, arg) {
      var t1, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33, argStorage, n00, n01, n02, n03, n10, n11, n12, n13, n20, n21, n22, n23, n30, n31, n32, n33;
      t1 = this._m4storage;
      m00 = t1[0];
      m01 = t1[4];
      m02 = t1[8];
      m03 = t1[12];
      m10 = t1[1];
      m11 = t1[5];
      m12 = t1[9];
      m13 = t1[13];
      m20 = t1[2];
      m21 = t1[6];
      m22 = t1[10];
      m23 = t1[14];
      m30 = t1[3];
      m31 = t1[7];
      m32 = t1[11];
      m33 = t1[15];
      argStorage = arg._m4storage;
      n00 = argStorage[0];
      n01 = argStorage[4];
      n02 = argStorage[8];
      n03 = argStorage[12];
      n10 = argStorage[1];
      n11 = argStorage[5];
      n12 = argStorage[9];
      n13 = argStorage[13];
      n20 = argStorage[2];
      n21 = argStorage[6];
      n22 = argStorage[10];
      n23 = argStorage[14];
      n30 = argStorage[3];
      n31 = argStorage[7];
      n32 = argStorage[11];
      n33 = argStorage[15];
      t1[0] = m00 * n00 + m01 * n10 + m02 * n20 + m03 * n30;
      t1[4] = m00 * n01 + m01 * n11 + m02 * n21 + m03 * n31;
      t1[8] = m00 * n02 + m01 * n12 + m02 * n22 + m03 * n32;
      t1[12] = m00 * n03 + m01 * n13 + m02 * n23 + m03 * n33;
      t1[1] = m10 * n00 + m11 * n10 + m12 * n20 + m13 * n30;
      t1[5] = m10 * n01 + m11 * n11 + m12 * n21 + m13 * n31;
      t1[9] = m10 * n02 + m11 * n12 + m12 * n22 + m13 * n32;
      t1[13] = m10 * n03 + m11 * n13 + m12 * n23 + m13 * n33;
      t1[2] = m20 * n00 + m21 * n10 + m22 * n20 + m23 * n30;
      t1[6] = m20 * n01 + m21 * n11 + m22 * n21 + m23 * n31;
      t1[10] = m20 * n02 + m21 * n12 + m22 * n22 + m23 * n32;
      t1[14] = m20 * n03 + m21 * n13 + m22 * n23 + m23 * n33;
      t1[3] = m30 * n00 + m31 * n10 + m32 * n20 + m33 * n30;
      t1[7] = m30 * n01 + m31 * n11 + m32 * n21 + m33 * n31;
      t1[11] = m30 * n02 + m31 * n12 + m32 * n22 + m33 * n32;
      t1[15] = m30 * n03 + m31 * n13 + m32 * n23 + m33 * n33;
    }
  };
  T.Quaternion.prototype = {
    setAxisAngle$2: function(axis, radians) {
      var len, t1, halfSin, axisStorage, t2;
      len = Math.sqrt(axis.get$length2());
      if (len === 0)
        return;
      t1 = radians * 0.5;
      halfSin = Math.sin(t1) / len;
      axisStorage = axis._v3storage;
      t2 = this._qStorage;
      t2[0] = axisStorage[0] * halfSin;
      t2[1] = axisStorage[1] * halfSin;
      t2[2] = axisStorage[2] * halfSin;
      t2[3] = Math.cos(t1);
    },
    get$length: function(_) {
      var t1, x, y, z, w;
      t1 = this._qStorage;
      x = t1[0];
      y = t1[1];
      z = t1[2];
      w = t1[3];
      return Math.sqrt(x * x + y * y + z * z + w * w);
    },
    $index: function(_, i) {
      return C.NativeFloat32List_methods.$index(this._qStorage, i);
    },
    toString$0: function(_) {
      var t1 = this._qStorage;
      return H.S(t1[0]) + ", " + H.S(t1[1]) + ", " + H.S(t1[2]) + " @ " + H.S(t1[3]);
    }
  };
  T.Vector2.prototype = {
    setValues$2: function(x_, y_) {
      var t1 = this._v2storage;
      t1[0] = x_;
      t1[1] = y_;
    },
    toString$0: function(_) {
      var t1 = this._v2storage;
      return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "]";
    },
    $eq: function(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      if (other instanceof T.Vector2) {
        t1 = this._v2storage;
        t2 = t1[0];
        t3 = other._v2storage;
        t1 = t2 === t3[0] && t1[1] === t3[1];
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return A.hashObjects(this._v2storage);
    },
    $index: function(_, i) {
      return C.NativeFloat32List_methods.$index(this._v2storage, i);
    },
    get$length: function(_) {
      var t1, t2;
      t1 = this._v2storage;
      t2 = t1[0];
      t1 = t1[1];
      return Math.sqrt(t2 * t2 + t1 * t1);
    }
  };
  T.Vector3.prototype = {
    setValues$3: function(x_, y_, z_) {
      var t1 = this._v3storage;
      C.NativeFloat32List_methods.$indexSet(t1, 0, x_);
      C.NativeFloat32List_methods.$indexSet(t1, 1, y_);
      C.NativeFloat32List_methods.$indexSet(t1, 2, z_);
    },
    setFrom$1: function(other) {
      var otherStorage, t1;
      otherStorage = other._v3storage;
      t1 = this._v3storage;
      t1[0] = otherStorage[0];
      t1[1] = otherStorage[1];
      t1[2] = otherStorage[2];
    },
    toString$0: function(_) {
      var t1 = this._v3storage;
      return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "]";
    },
    $eq: function(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      if (other instanceof T.Vector3) {
        t1 = this._v3storage;
        t2 = t1[0];
        t3 = other._v3storage;
        t1 = t2 === t3[0] && t1[1] === t3[1] && t1[2] === t3[2];
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return A.hashObjects(this._v3storage);
    },
    $add: function(_, other) {
      var t1 = new T.Vector3(new Float32Array(3));
      t1.setFrom$1(this);
      t1.add$1(0, other);
      return t1;
    },
    $index: function(_, i) {
      var t1 = this._v3storage;
      if (i >= 3)
        return H.ioore(t1, i);
      return t1[i];
    },
    get$length: function(_) {
      return Math.sqrt(this.get$length2());
    },
    get$length2: function() {
      var t1, t2, t3;
      t1 = this._v3storage;
      t2 = t1[0];
      t3 = t1[1];
      t1 = t1[2];
      return t2 * t2 + t3 * t3 + t1 * t1;
    },
    normalize$0: function(_) {
      var l, d, t1;
      l = Math.sqrt(this.get$length2());
      if (l === 0)
        return 0;
      d = 1 / l;
      t1 = this._v3storage;
      t1[0] = t1[0] * d;
      t1[1] = t1[1] * d;
      t1[2] = t1[2] * d;
      return l;
    },
    dot$1: function(other) {
      var otherStorage, t1;
      otherStorage = other._v3storage;
      t1 = this._v3storage;
      return t1[0] * otherStorage[0] + t1[1] * otherStorage[1] + t1[2] * otherStorage[2];
    },
    cross$1: function(other) {
      var t1, _x, _y, _z, otherStorage, ox, oy, oz;
      t1 = this._v3storage;
      _x = t1[0];
      _y = t1[1];
      _z = t1[2];
      otherStorage = other._v3storage;
      ox = otherStorage[0];
      oy = otherStorage[1];
      oz = otherStorage[2];
      t1 = new T.Vector3(new Float32Array(3));
      t1.setValues$3(_y * oz - _z * oy, _z * ox - _x * oz, _x * oy - _y * ox);
      return t1;
    },
    add$1: function(_, arg) {
      var argStorage, t1;
      argStorage = arg._v3storage;
      t1 = this._v3storage;
      t1[0] = t1[0] + argStorage[0];
      t1[1] = t1[1] + argStorage[1];
      t1[2] = t1[2] + argStorage[2];
    },
    addScaled$2: function(arg, factor) {
      var argStorage, t1;
      argStorage = arg._v3storage;
      t1 = this._v3storage;
      t1[0] = t1[0] + argStorage[0] * factor;
      t1[1] = t1[1] + argStorage[1] * factor;
      t1[2] = t1[2] + argStorage[2] * factor;
    },
    sub$1: function(_, arg) {
      var argStorage, t1;
      argStorage = arg._v3storage;
      t1 = this._v3storage;
      t1[0] = t1[0] - argStorage[0];
      t1[1] = t1[1] - argStorage[1];
      t1[2] = t1[2] - argStorage[2];
    },
    scale$1: function(_, arg) {
      var t1 = this._v3storage;
      t1[2] = t1[2] * arg;
      t1[1] = t1[1] * arg;
      t1[0] = t1[0] * arg;
    },
    scaled$1: function(arg) {
      var t1 = new T.Vector3(new Float32Array(3));
      t1.setFrom$1(this);
      t1.scale$1(0, arg);
      return t1;
    },
    set$x: function(_, arg) {
      C.NativeFloat32List_methods.$indexSet(this._v3storage, 0, arg);
      return arg;
    },
    set$y: function(_, arg) {
      C.NativeFloat32List_methods.$indexSet(this._v3storage, 1, arg);
      return arg;
    },
    set$z: function(_, arg) {
      C.NativeFloat32List_methods.$indexSet(this._v3storage, 2, arg);
      return arg;
    }
  };
  T.Vector4.prototype = {
    toString$0: function(_) {
      var t1 = this._v4storage;
      return H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "," + H.S(t1[3]);
    },
    $eq: function(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      if (other instanceof T.Vector4) {
        t1 = this._v4storage;
        t2 = t1[0];
        t3 = other._v4storage;
        t1 = t2 === t3[0] && t1[1] === t3[1] && t1[2] === t3[2] && t1[3] === t3[3];
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return A.hashObjects(this._v4storage);
    },
    $index: function(_, i) {
      return C.NativeFloat32List_methods.$index(this._v4storage, i);
    },
    get$length: function(_) {
      var t1, t2, t3, t4;
      t1 = this._v4storage;
      t2 = t1[0];
      t3 = t1[1];
      t4 = t1[2];
      t1 = t1[3];
      return Math.sqrt(t2 * t2 + t3 * t3 + t4 * t4 + t1 * t1);
    }
  };
  L.main_closure.prototype = {
    call$1: function(e) {
      var input = H.interceptedTypeCast(J.get$target$x(e), "$isInputElement");
      if (input.type === "radio")
        L.EventRadioChanged(input.id);
    },
    $signature: 12
  };
  L.main_closure0.prototype = {
    call$1: function(e) {
      var input, $name, value, t1;
      input = H.interceptedTypeCast(J.get$target$x(e), "$isInputElement");
      if (input.type === "range") {
        $name = input.id;
        value = P.double_parse(input.value);
        if (J.startsWith$1$s($name, "pos")) {
          P.print("EventPositionChanged " + $name + " " + H.S(value));
          switch ($name) {
            case "posx":
              t1 = $.$get$lightSources();
              H.interceptedTypeCast(t1.$index(0, "idSpot"), "$isSpotLight").pos.set$x(0, value);
              H.interceptedTypeCast(t1.$index(0, "idPoint"), "$isPointLight").pos.set$x(0, value);
              break;
            case "posy":
              t1 = $.$get$lightSources();
              H.interceptedTypeCast(t1.$index(0, "idSpot"), "$isSpotLight").pos.set$y(0, value);
              H.interceptedTypeCast(t1.$index(0, "idPoint"), "$isPointLight").pos.set$y(0, value);
              break;
            case "posz":
              t1 = $.$get$lightSources();
              H.interceptedTypeCast(t1.$index(0, "idSpot"), "$isSpotLight").pos.set$z(0, value);
              H.interceptedTypeCast(t1.$index(0, "idPoint"), "$isPointLight").pos.set$z(0, value);
              break;
          }
        } else if (C.JSString_methods.startsWith$1($name, "dir")) {
          P.print("EventDirectionChanged " + $name + " " + H.S(value));
          switch ($name) {
            case "dirx":
              t1 = $.$get$lightSources();
              H.interceptedTypeCast(t1.$index(0, "idSpot"), "$isSpotLight").dir.set$x(0, value);
              H.interceptedTypeCast(t1.$index(0, "idDirectional"), "$isDirectionalLight").dir.set$x(0, value);
              break;
            case "diry":
              t1 = $.$get$lightSources();
              H.interceptedTypeCast(t1.$index(0, "idSpot"), "$isSpotLight").dir.set$y(0, value);
              H.interceptedTypeCast(t1.$index(0, "idDirectional"), "$isDirectionalLight").dir.set$y(0, value);
              break;
            case "dirz":
              t1 = $.$get$lightSources();
              H.interceptedTypeCast(t1.$index(0, "idSpot"), "$isSpotLight").dir.set$z(0, value);
              H.interceptedTypeCast(t1.$index(0, "idDirectional"), "$isDirectionalLight").dir.set$z(0, value);
              break;
          }
        } else if ($name === "cutoff")
          P.print("set cutoff " + H.S(value));
      }
    },
    $signature: 12
  };
  L.main_resolutionChange.prototype = {
    call$1: function(ev) {
      var t1, w, h, t2;
      t1 = this.canvas;
      w = t1.clientWidth;
      h = t1.clientHeight;
      t1.width = w;
      t1.height = h;
      P.print("size change " + H.S(w) + " " + H.S(h));
      if (typeof w !== "number")
        return w.$tdiv();
      t1 = C.JSInt_methods._tdivFast$1(w, 2);
      this.perspective.AdjustAspect$2(t1, h);
      t2 = this.phaseMain;
      t2.viewPortW = t1;
      t2.viewPortH = h;
      t2 = this.shadowMap._phaseVisualize;
      t2.viewPortX = t1;
      t2.viewPortY = 0;
      t2.viewPortW = t1;
      t2.viewPortH = h;
    },
    $signature: 13
  };
  L.main_animate.prototype = {
    call$1: function(timeMs) {
      var t1, t2, t3, t4, t5, t6, t7, rcp, t8, up, len, x, y, z, c, s, $C, m11, m12, m13, m21, m22, m23, m31, m32, m33, t9, t10, t11, t12, t13, t14, t15, t16, lm, dl;
      H.numTypeCheck(timeMs);
      if (typeof timeMs !== "number")
        return timeMs.$sub();
      t1 = this._box_0;
      t1._lastTimeMs = timeMs + 0;
      t2 = this.orbit;
      t3 = t2.mouse;
      t4 = t3._currentlyPressedButtons;
      if (t4.contains$1(0, 0) || t4.contains$1(0, 1)) {
        t4 = t2.azimuth;
        t5 = t3.moveDeltaX;
        if (typeof t5 !== "number")
          return t5.$mul();
        t2.azimuth = t4 + t5 * 0.01;
        t5 = t2.polar;
        t4 = t3.moveDeltaY;
        if (typeof t4 !== "number")
          return t4.$mul();
        t2.polar = t5 + t4 * 0.01;
      }
      t4 = t2.keyboard;
      t5 = t4._currentlyPressedKeys;
      if (t5.contains$1(0, 37))
        t2.azimuth += 0.03;
      else if (t5.contains$1(0, 39))
        t2.azimuth -= 0.03;
      if (t5.contains$1(0, 38))
        t2.polar += 0.03;
      else if (t5.contains$1(0, 40))
        t2.polar -= 0.03;
      if (t5.contains$1(0, 33))
        t2._radius *= 0.99;
      else if (t5.contains$1(0, 34))
        t2._radius *= 1.01;
      if (t5.contains$1(0, 32)) {
        t2.azimuth = 0;
        t2.polar = 0;
      }
      t5 = t3.wheelDeltaY;
      if (typeof t5 !== "number")
        return t5.$mul();
      t5 = t2._radius - t5 * t2.mouseWheelFactor;
      if (t5 > 0)
        t2._radius = t5;
      t5 = C.JSNumber_methods.clamp$2(t2.polar, -1.4707963267948965, 1.4707963267948965);
      t2.polar = t5;
      t6 = t2._radius;
      t7 = t2.azimuth;
      rcp = t6 * Math.cos(t5);
      t2.setPos$3(rcp * Math.cos(t7), t6 * Math.sin(t5), rcp * Math.sin(t7));
      t7 = t2._lookAtPos;
      t5 = t2.transform;
      t6 = t5._m4storage;
      t8 = t7._v3storage;
      t6[12] = t6[12] + t8[0];
      t6[13] = t6[13] + t8[1];
      t6[14] = t6[14] + t8[2];
      up = new T.Vector3(new Float32Array(3));
      up.setValues$3(0, 1, 0);
      T.setViewMatrix(t5, t2.getPos$0(), t7, up);
      t5 = t2._back;
      t7 = t5._v3storage;
      t7[0] = t6[2];
      t7[1] = t6[6];
      t7[2] = t6[10];
      t2 = -t2.roll;
      len = Math.sqrt(t5.get$length2());
      x = t7[0] / len;
      y = t7[1] / len;
      z = t7[2] / len;
      c = Math.cos(t2);
      s = Math.sin(t2);
      $C = 1 - c;
      m11 = x * x * $C + c;
      t2 = z * s;
      m12 = x * y * $C - t2;
      t7 = y * s;
      m13 = x * z * $C + t7;
      m21 = y * x * $C + t2;
      m22 = y * y * $C + c;
      t2 = x * s;
      m23 = y * z * $C - t2;
      m31 = z * x * $C - t7;
      m32 = z * y * $C + t2;
      m33 = z * z * $C + c;
      t2 = t6[0];
      t7 = t6[4];
      t5 = t6[8];
      t8 = t6[1];
      t9 = t6[5];
      t10 = t6[9];
      t11 = t6[2];
      t12 = t6[6];
      t13 = t6[10];
      t14 = t6[3];
      t15 = t6[7];
      t16 = t6[11];
      t6[0] = t2 * m11 + t7 * m21 + t5 * m31;
      t6[1] = t8 * m11 + t9 * m21 + t10 * m31;
      t6[2] = t11 * m11 + t12 * m21 + t13 * m31;
      t6[3] = t14 * m11 + t15 * m21 + t16 * m31;
      t6[4] = t2 * m12 + t7 * m22 + t5 * m32;
      t6[5] = t8 * m12 + t9 * m22 + t10 * m32;
      t6[6] = t11 * m12 + t12 * m22 + t13 * m32;
      t6[7] = t14 * m12 + t15 * m22 + t16 * m32;
      t6[8] = t2 * m13 + t7 * m23 + t5 * m33;
      t6[9] = t8 * m13 + t9 * m23 + t10 * m33;
      t6[10] = t11 * m13 + t12 * m23 + t13 * m33;
      t6[11] = t14 * m13 + t15 * m23 + t16 * m33;
      t4._justReleasedKeys.clear$0(0);
      t4._justPressedKeys.clear$0(0);
      t3.moveDeltaY = 0;
      t3.moveDeltaX = 0;
      t3.wheelDeltaY = 0;
      t3._justReleasedButtons.clear$0(0);
      t3._justPressedButtons.clear$0(0);
      lm = $.gActiveLight.ExtractShadowProjViewMatrix$0();
      t3 = this.mdLight;
      dl = $.gActiveLight;
      t2 = J.getInterceptor$(dl);
      if (!!t2.$isDirectionalLight) {
        t2 = dl.dim;
        R.UpdateDirectionalLightVisualizer(t3, t2, t2 / 4, dl.dir);
      } else if (!!t2.$isSpotLight)
        R.UpdateSpotLightVisualizer(t3, dl.pos, dl.dir, dl.range, dl.angle);
      else if (!!t2.$isPointLight)
        R.UpdatePointLightVisualizer(t3, dl.pos, dl.range);
      t2 = this.fps;
      C.DivElement_methods.setInnerHtml$1(t2._extra, H.S($.gActiveLight));
      t3 = this.shadowMap;
      t3._uniforms._lib$_uniforms.$indexSet(0, "uLightPerspectiveViewMatrix", lm);
      t3._phaseCompute.Draw$0();
      this.uniforms._lib$_uniforms.$indexSet(0, "uLightPerspectiveViewMatrix", lm);
      this.phaseMain.Draw$0();
      t4 = t3._lib0$_cgl;
      t5 = t3._depthTexture;
      J.bindTexture$2$x(t4._gl, 3553, t5._texture);
      J.texParameteri$3$x(t4._gl, 3553, 34892, 0);
      J.texParameteri$3$x(t4._gl, 3553, 10240, 9728);
      J.texParameteri$3$x(t4._gl, 3553, 10241, 9728);
      J.bindTexture$2$x(t4._gl, 3553, null);
      t3._phaseVisualize.Draw$1(H.setRuntimeTypeInfo([], [G.DrawStats]));
      t3 = t3._depthTexture;
      J.bindTexture$2$x(t4._gl, 3553, t3._texture);
      J.texParameteri$3$x(t4._gl, 3553, 34892, 34894);
      J.texParameteri$3$x(t4._gl, 3553, 10240, 9729);
      J.texParameteri$3$x(t4._gl, 3553, 10241, 9729);
      J.bindTexture$2$x(t4._gl, 3553, null);
      C.Window_methods.get$animationFrame(window).then$1$1(this, -1);
      t2.UpdateFrameCount$1(t1._lastTimeMs);
    },
    $signature: 29
  };
  (function aliases() {
    var _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = P.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _ = W.Element.prototype;
    _.super$Element$createFragment = _.createFragment$3$treeSanitizer$validator;
    _ = W._SimpleNodeValidator.prototype;
    _.super$_SimpleNodeValidator$allowsAttribute = _.allowsAttribute$3;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _static = hunkHelpers.installStaticTearOff;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 30);
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 4);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 4);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 4);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 1);
    _static_1(W, "html_Element__determineMouseWheelEventType$closure", "Element__determineMouseWheelEventType", 31);
    _static(W, "html__Html5NodeValidator__standardAttributeValidator$closure", 4, null, ["call$4"], ["_Html5NodeValidator__standardAttributeValidator"], 14, 0);
    _static(W, "html__Html5NodeValidator__uriAttributeValidator$closure", 4, null, ["call$4"], ["_Html5NodeValidator__uriAttributeValidator"], 14, 0);
    _static_1(L, "shadow__SwallowEvent$closure", "SwallowEvent", 13);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, J.Interceptor, J.ArrayIterator, P.Iterable, H.ListIterator, P.Iterator, H.FixedLengthListMixin, H.TypeErrorDecoder, P.Error, H.Closure, H._StackTrace, H.TypeImpl, P.MapMixin, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, P._TimerImpl, P._Completer, P._FutureListener, P._Future, P._AsyncCallbackEntry, P.Stream, P.StreamSubscription, P.AsyncError, P._Zone, P._SetBase, P._LinkedHashSetCell, P._LinkedHashSetIterator, P._ListBase_Object_ListMixin, P.ListMixin, P.bool, P.DateTime, P.num, P.Duration, P.StackOverflowError, P._Exception, P.FormatException, P.Function, P.List, P.Map, P.Null, P.StackTrace, P.String, P.StringBuffer, W.CssStyleDeclarationBase, W._CustomEventStreamProvider, W._Html5NodeValidator, W.ImmutableListMixin, W.NodeValidatorBuilder, W._SimpleNodeValidator, W._SvgNodeValidator, W.FixedSizeListIterator, W._DOMWindowCrossFrame, W.NodeValidator, W._SameOriginUriPolicy, W._ValidatingTreeSanitizer, P.Point, P._RectangleBase, P.Float32List, G.NamedEntity, G.ChronosGL, G.Framebuffer, G.Face3, G.Face4, G.GeometryBuilder, G.TheStencilFunction, G.TheBlendEquation, G.DrawStats, G.ShaderVarDesc, G.ShaderObject, G.TextureProperties, G.Texture, R.Stats, R.ShadowMap, D.Keyboard, D.Mouse, T.Matrix3, T.Matrix4, T.Quaternion, T.Vector2, T.Vector3, T.Vector4]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, H.NativeTypedData, W.EventTarget, W.AccessibleNodeList, W.Blob, W.CanvasRenderingContext2D, W.CssStyleValue, W.CssTransformComponent, W.CssRule, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.DataTransferItemList, W.DomException, W._DomRectList_Interceptor_ListMixin, W.DomRectReadOnly, W._DomStringList_Interceptor_ListMixin, W.DomTokenList, W.Event, W._FileList_Interceptor_ListMixin, W.Gamepad, W.History, W._HtmlCollection_Interceptor_ListMixin, W.Location, W.MediaList, W._MidiInputMap_Interceptor_MapMixin, W._MidiOutputMap_Interceptor_MapMixin, W.MimeType, W._MimeTypeArray_Interceptor_ListMixin, W._NodeList_Interceptor_ListMixin, W.Plugin, W._PluginArray_Interceptor_ListMixin, W._RtcStatsReport_Interceptor_MapMixin, W.SpeechGrammar, W._SpeechGrammarList_Interceptor_ListMixin, W.SpeechRecognitionResult, W._Storage_Interceptor_MapMixin, W.StyleSheet, W._TextTrackCueList_Interceptor_ListMixin, W.TimeRanges, W.Touch, W._TouchList_Interceptor_ListMixin, W.TrackDefaultList, W.Url, W.__CssRuleList_Interceptor_ListMixin, W.__GamepadList_Interceptor_ListMixin, W.__NamedNodeMap_Interceptor_ListMixin, W.__SpeechRecognitionResultList_Interceptor_ListMixin, W.__StyleSheetList_Interceptor_ListMixin, P.Length, P._LengthList_Interceptor_ListMixin, P.Number, P._NumberList_Interceptor_ListMixin, P.PointList, P._StringList_Interceptor_ListMixin, P.Transform, P._TransformList_Interceptor_ListMixin, P.AudioBuffer, P._AudioParamMap_Interceptor_MapMixin, P.Buffer, P.Framebuffer0, P.Program, P.RenderingContext, P.RenderingContext2, P.Shader, P.Texture0, P.UniformLocation, P.VertexArrayObject, P._SqlResultSetRowList_Interceptor_ListMixin]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSDouble]);
    _inheritMany(P.Iterable, [H.EfficientLengthIterable, H.MappedIterable, H.WhereIterable]);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.LinkedHashMapKeyIterable]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [H.MappedIterator, H.WhereIterator]);
    _inherit(H.MappedListIterable, H.ListIterable);
    _inheritMany(P.Error, [H.NullError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.TypeErrorImplementation, H.CastErrorImplementation, H.RuntimeError, P.NullThrownError, P.ArgumentError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError]);
    _inheritMany(H.Closure, [H.unwrapException_saveStackTrace, H.TearOffClosure, H.JsLinkedHashMap_values_closure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P.Stream_length_closure, P.Stream_length_closure0, P._rootHandleUncaughtError_closure, P._RootZone_bindCallback_closure, P._RootZone_bindCallbackGuarded_closure, P._RootZone_bindUnaryCallbackGuarded_closure, P.MapBase_mapToString_closure, P.Duration_toString_sixDigits, P.Duration_toString_twoDigits, W.Element_Element$html_closure, W.MidiInputMap_keys_closure, W.MidiOutputMap_keys_closure, W.RtcStatsReport_keys_closure, W.Storage_keys_closure, W.Window_animationFrame_closure, W._EventStreamSubscription_closure, W.NodeValidatorBuilder_allowsElement_closure, W.NodeValidatorBuilder_allowsAttribute_closure, W._SimpleNodeValidator_closure, W._SimpleNodeValidator_closure0, W._TemplatingNodeValidator_closure, W._ValidatingTreeSanitizer_sanitizeTree_walk, P.convertDartToNative_Dictionary_closure, P.AudioParamMap_keys_closure, B.TorusKnotGeometry_curveFunc, D.Keyboard_closure, D.Keyboard_closure0, D.Mouse_closure, D.Mouse_closure0, D.Mouse_closure1, D.Mouse_closure2, A.hashObjects_closure, L.main_closure, L.main_closure0, L.main_resolutionChange, L.main_animate]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(P.MapBase, P.MapMixin);
    _inheritMany(P.MapBase, [H.JsLinkedHashMap, W._AttributeMap]);
    _inherit(H.NativeTypedArray, H.NativeTypedData);
    _inheritMany(H.NativeTypedArray, [H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfDouble, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfInt, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H.NativeFloat32List, H.NativeTypedArrayOfDouble);
    _inheritMany(H.NativeTypedArrayOfInt, [H.NativeInt16List, H.NativeInt32List, H.NativeInt8List, H.NativeUint16List, H.NativeUint32List, H.NativeUint8ClampedList, H.NativeUint8List]);
    _inherit(P._SyncCompleter, P._Completer);
    _inherit(P._RootZone, P._Zone);
    _inherit(P._LinkedHashSet, P._SetBase);
    _inherit(P.ListBase, P._ListBase_Object_ListMixin);
    _inheritMany(P.num, [P.double, P.int]);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inheritMany(W.EventTarget, [W.Node0, W.FileWriter, W.SourceBuffer, W._SourceBufferList_EventTarget_ListMixin, W.TextTrack, W.TextTrackCue, W._TextTrackList_EventTarget_ListMixin, W.VideoTrackList, W.Window, P.Request, P.AudioTrackList, P.BaseAudioContext]);
    _inheritMany(W.Node0, [W.Element, W.CharacterData, W.Document, W._Attr]);
    _inheritMany(W.Element, [W.HtmlElement, P.SvgElement]);
    _inheritMany(W.HtmlElement, [W.AnchorElement, W.AreaElement, W.BaseElement, W.BodyElement, W.CanvasElement, W.DivElement, W.FormElement, W.InputElement, W.SelectElement, W.TableElement, W.TableRowElement, W.TableSectionElement, W.TemplateElement]);
    _inheritMany(W.CssStyleValue, [W.CssNumericValue, W.CssTransformValue, W.CssUnparsedValue]);
    _inherit(W.CssPerspective, W.CssTransformComponent);
    _inherit(W.CssStyleDeclaration, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase);
    _inherit(W._DomRectList_Interceptor_ListMixin_ImmutableListMixin, W._DomRectList_Interceptor_ListMixin);
    _inherit(W.DomRectList, W._DomRectList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._DomStringList_Interceptor_ListMixin_ImmutableListMixin, W._DomStringList_Interceptor_ListMixin);
    _inherit(W.DomStringList, W._DomStringList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.File, W.Blob);
    _inherit(W._FileList_Interceptor_ListMixin_ImmutableListMixin, W._FileList_Interceptor_ListMixin);
    _inherit(W.FileList, W._FileList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W._HtmlCollection_Interceptor_ListMixin);
    _inherit(W.HtmlCollection, W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.Event, [W.UIEvent, P.VersionChangeEvent]);
    _inheritMany(W.UIEvent, [W.KeyboardEvent, W.MouseEvent]);
    _inherit(W.MidiInputMap, W._MidiInputMap_Interceptor_MapMixin);
    _inherit(W.MidiOutputMap, W._MidiOutputMap_Interceptor_MapMixin);
    _inherit(W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin, W._MimeTypeArray_Interceptor_ListMixin);
    _inherit(W.MimeTypeArray, W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._ChildNodeListLazy, P.ListBase);
    _inherit(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W._NodeList_Interceptor_ListMixin);
    _inherit(W.NodeList, W._NodeList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._PluginArray_Interceptor_ListMixin_ImmutableListMixin, W._PluginArray_Interceptor_ListMixin);
    _inherit(W.PluginArray, W._PluginArray_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.RtcStatsReport, W._RtcStatsReport_Interceptor_MapMixin);
    _inherit(W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, W._SourceBufferList_EventTarget_ListMixin);
    _inherit(W.SourceBufferList, W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin, W._SpeechGrammarList_Interceptor_ListMixin);
    _inherit(W.SpeechGrammarList, W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.Storage, W._Storage_Interceptor_MapMixin);
    _inherit(W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin, W._TextTrackCueList_Interceptor_ListMixin);
    _inherit(W.TextTrackCueList, W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, W._TextTrackList_EventTarget_ListMixin);
    _inherit(W.TextTrackList, W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(W._TouchList_Interceptor_ListMixin_ImmutableListMixin, W._TouchList_Interceptor_ListMixin);
    _inherit(W.TouchList, W._TouchList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.WheelEvent, W.MouseEvent);
    _inherit(W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin, W.__CssRuleList_Interceptor_ListMixin);
    _inherit(W._CssRuleList, W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._DomRect, W.DomRectReadOnly);
    _inherit(W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin, W.__GamepadList_Interceptor_ListMixin);
    _inherit(W._GamepadList, W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.__NamedNodeMap_Interceptor_ListMixin);
    _inherit(W._NamedNodeMap, W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin, W.__SpeechRecognitionResultList_Interceptor_ListMixin);
    _inherit(W._SpeechRecognitionResultList, W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin, W.__StyleSheetList_Interceptor_ListMixin);
    _inherit(W._StyleSheetList, W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._ElementAttributeMap, W._AttributeMap);
    _inherit(W._EventStream, P.Stream);
    _inherit(W._ElementEventStreamImpl, W._EventStream);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inherit(W._TemplatingNodeValidator, W._SimpleNodeValidator);
    _inherit(P.OpenDBRequest, P.Request);
    _inherit(P.Rectangle, P._RectangleBase);
    _inherit(P._LengthList_Interceptor_ListMixin_ImmutableListMixin, P._LengthList_Interceptor_ListMixin);
    _inherit(P.LengthList, P._LengthList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._NumberList_Interceptor_ListMixin_ImmutableListMixin, P._NumberList_Interceptor_ListMixin);
    _inherit(P.NumberList, P._NumberList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P.ScriptElement, P.SvgElement);
    _inherit(P._StringList_Interceptor_ListMixin_ImmutableListMixin, P._StringList_Interceptor_ListMixin);
    _inherit(P.StringList, P._StringList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._TransformList_Interceptor_ListMixin_ImmutableListMixin, P._TransformList_Interceptor_ListMixin);
    _inherit(P.TransformList, P._TransformList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P.AudioParamMap, P._AudioParamMap_Interceptor_MapMixin);
    _inherit(P.OfflineAudioContext, P.BaseAudioContext);
    _inherit(P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin, P._SqlResultSetRowList_Interceptor_ListMixin);
    _inherit(P.SqlResultSetRowList, P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(G.NamedEntity, [G.UniformGroup, G.Light, G.MeshData, G.RenderProgram, G.Spatial, A.Scene, A.RenderPhase]);
    _inheritMany(G.Light, [G.PointLight, G.DirectionalLight, G.SpotLight]);
    _inheritMany(G.UniformGroup, [G.Illumination, G.Material, G.Perspective]);
    _inherit(G.TypedTexture, G.Texture);
    _inherit(R.StatsFps, R.Stats);
    _inheritMany(G.Spatial, [A.Node, D.OrbitCamera]);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(P._ListBase_Object_ListMixin, P.ListMixin);
    _mixin(W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.CssStyleDeclarationBase);
    _mixin(W._DomRectList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._DomRectList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._DomStringList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._DomStringList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._FileList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._FileList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._HtmlCollection_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._MidiInputMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._MidiOutputMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._MimeTypeArray_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._PluginArray_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._PluginArray_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._RtcStatsReport_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._SourceBufferList_EventTarget_ListMixin, P.ListMixin);
    _mixin(W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._SpeechGrammarList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._Storage_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._TextTrackCueList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._TextTrackList_EventTarget_ListMixin, P.ListMixin);
    _mixin(W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._TouchList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._TouchList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__CssRuleList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__GamepadList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__SpeechRecognitionResultList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__StyleSheetList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._LengthList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._LengthList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._NumberList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._NumberList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._StringList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._StringList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._TransformList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._TransformList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._AudioParamMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(P._SqlResultSetRowList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.BodyElement_methods = W.BodyElement.prototype;
    C.CanvasElement_methods = W.CanvasElement.prototype;
    C.CssStyleDeclaration_methods = W.CssStyleDeclaration.prototype;
    C.DivElement_methods = W.DivElement.prototype;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSDouble_methods = J.JSDouble.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.NativeFloat32List_methods = H.NativeFloat32List.prototype;
    C.NativeUint32List_methods = H.NativeUint32List.prototype;
    C.NodeList_methods = W.NodeList.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.TableElement_methods = W.TableElement.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.WheelEvent_methods = W.WheelEvent.prototype;
    C.Window_methods = W.Window.prototype;
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST3 = function(hooks) { return hooks; }
;
    C.C__RootZone = new P._RootZone();
    C.List_2Zi = H.setRuntimeTypeInfo(makeConstList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::autofocus", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [P.String]);
    C.List_ego = H.setRuntimeTypeInfo(makeConstList(["HEAD", "AREA", "BASE", "BASEFONT", "BR", "COL", "COLGROUP", "EMBED", "FRAME", "FRAMESET", "HR", "IMAGE", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM", "SOURCE", "STYLE", "TITLE", "WBR"]), [P.String]);
    C.List_empty = H.setRuntimeTypeInfo(makeConstList([]), [P.String]);
    C.List_wSV = H.setRuntimeTypeInfo(makeConstList(["bind", "if", "ref", "repeat", "syntax"]), [P.String]);
    C.List_yrN = H.setRuntimeTypeInfo(makeConstList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [P.String]);
    C.ShaderVarDesc_IyK = new G.ShaderVarDesc("", 0);
    C.ShaderVarDesc_float_0 = new G.ShaderVarDesc("float", 0);
    C.ShaderVarDesc_float_00 = new G.ShaderVarDesc("float", 0);
    C.ShaderVarDesc_float_02 = new G.ShaderVarDesc("float", 0);
    C.ShaderVarDesc_float_03 = new G.ShaderVarDesc("float", 0);
    C.ShaderVarDesc_float_01 = new G.ShaderVarDesc("float", 0);
    C.ShaderVarDesc_float_4 = new G.ShaderVarDesc("float", 4);
    C.ShaderVarDesc_mat3_0 = new G.ShaderVarDesc("mat3", 0);
    C.ShaderVarDesc_mat4_0 = new G.ShaderVarDesc("mat4", 0);
    C.ShaderVarDesc_mat4_128 = new G.ShaderVarDesc("mat4", 128);
    C.ShaderVarDesc_mat4_4 = new G.ShaderVarDesc("mat4", 4);
    C.ShaderVarDesc_sampler2DShadow_0 = new G.ShaderVarDesc("sampler2DShadow", 0);
    C.ShaderVarDesc_sampler2D_0 = new G.ShaderVarDesc("sampler2D", 0);
    C.ShaderVarDesc_samplerCube_0 = new G.ShaderVarDesc("samplerCube", 0);
    C.ShaderVarDesc_vec2_00 = new G.ShaderVarDesc("vec2", 0);
    C.ShaderVarDesc_vec2_0 = new G.ShaderVarDesc("vec2", 0);
    C.ShaderVarDesc_vec3_0 = new G.ShaderVarDesc("vec3", 0);
    C.ShaderVarDesc_vec3_00 = new G.ShaderVarDesc("vec3", 0);
    C.ShaderVarDesc_vec3_03 = new G.ShaderVarDesc("vec3", 0);
    C.ShaderVarDesc_vec3_05 = new G.ShaderVarDesc("vec3", 0);
    C.ShaderVarDesc_vec3_01 = new G.ShaderVarDesc("vec3", 0);
    C.ShaderVarDesc_vec3_02 = new G.ShaderVarDesc("vec3", 0);
    C.ShaderVarDesc_vec3_04 = new G.ShaderVarDesc("vec3", 0);
    C.ShaderVarDesc_vec4_01 = new G.ShaderVarDesc("vec4", 0);
    C.ShaderVarDesc_vec4_02 = new G.ShaderVarDesc("vec4", 0);
    C.ShaderVarDesc_vec4_00 = new G.ShaderVarDesc("vec4", 0);
    C.ShaderVarDesc_vec4_0 = new G.ShaderVarDesc("vec4", 0);
    C._CustomEventStreamProvider__determineMouseWheelEventType = new W._CustomEventStreamProvider(W.html_Element__determineMouseWheelEventType$closure(), [W.WheelEvent]);
  })();
  (function staticFields() {
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $._inTypeAssertion = false;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $.Element__parseDocument = null;
    $.Element__parseRange = null;
    $.Element__defaultValidator = null;
    $.Element__defaultSanitizer = null;
    $.Device__isOpera = null;
    $.Device__isIE = null;
    $.Device__isFirefox = null;
    $.Device__cachedCssPrefix = null;
    $.gLogLevel = 0;
    $.gActiveLight = null;
    $.kNear = 0.1;
    $.kFar = 50;
  })();
  (function lazyInitializers() {
    var _lazy = hunkHelpers.lazy;
    _lazy($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazy($, "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
      return H.getIsolateAffinityTag("_$dart_js");
    });
    _lazy($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazy($, "_toStringVisiting", "$get$_toStringVisiting", function() {
      return [];
    });
    _lazy($, "CssStyleDeclaration__propertyCache", "$get$CssStyleDeclaration__propertyCache", function() {
      return {};
    });
    _lazy($, "_Html5NodeValidator__allowedElements", "$get$_Html5NodeValidator__allowedElements", function() {
      return P.LinkedHashSet_LinkedHashSet$from(["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"], P.String);
    });
    _lazy($, "_Html5NodeValidator__attributeValidators", "$get$_Html5NodeValidator__attributeValidators", function() {
      return P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.Function);
    });
    _lazy($, "_up", "$get$_up", function() {
      return T.Vector3_Vector3(0, 1, 0);
    });
    _lazy($, "_up2", "$get$_up2", function() {
      return T.Vector3_Vector3(0, 0, 1);
    });
    _lazy($, "StencilFunctionNone", "$get$StencilFunctionNone", function() {
      return new G.TheStencilFunction(1281, 0, 4294967295);
    });
    _lazy($, "BlendEquationNone", "$get$BlendEquationNone", function() {
      return new G.TheBlendEquation(1281, 1281, 1281);
    });
    _lazy($, "_VarsDb", "$get$_VarsDb", function() {
      return P.LinkedHashMap_LinkedHashMap$_literal(["cBlendEquation", C.ShaderVarDesc_IyK, "cDepthWrite", C.ShaderVarDesc_IyK, "cDepthTest", C.ShaderVarDesc_IyK, "cStencilFunc", C.ShaderVarDesc_IyK, "tPosition", C.ShaderVarDesc_vec3_0, "tSpeed", C.ShaderVarDesc_vec3_0, "tForce", C.ShaderVarDesc_vec3_0, "aColor", C.ShaderVarDesc_vec3_00, "aColorAlpha", C.ShaderVarDesc_vec4_0, "aPosition", C.ShaderVarDesc_vec3_01, "aTexUV", C.ShaderVarDesc_vec2_0, "aNormal", C.ShaderVarDesc_vec3_02, "aBinormal", C.ShaderVarDesc_vec3_03, "aCenter", C.ShaderVarDesc_vec4_00, "aPointSize", C.ShaderVarDesc_float_0, "aBoneIndex", C.ShaderVarDesc_vec4_01, "aBoneWeight", C.ShaderVarDesc_vec4_01, "aTangent", C.ShaderVarDesc_vec3_04, "aBitangent", C.ShaderVarDesc_vec3_05, "iaRotation", C.ShaderVarDesc_vec4_01, "iaTranslation", C.ShaderVarDesc_vec3_0, "iaScale", C.ShaderVarDesc_float_0, "iaColor", C.ShaderVarDesc_vec3_0, "vColor", C.ShaderVarDesc_vec3_00, "vTexUV", C.ShaderVarDesc_vec2_00, "vLightWeighting", C.ShaderVarDesc_vec3_0, "vNormal", C.ShaderVarDesc_vec3_0, "vPosition", C.ShaderVarDesc_vec3_01, "vPositionFromLight", C.ShaderVarDesc_vec4_02, "vCenter", C.ShaderVarDesc_vec4_00, "vDepth", C.ShaderVarDesc_float_00, "uTransformationMatrix", C.ShaderVarDesc_mat4_0, "uModelMatrix", C.ShaderVarDesc_mat4_0, "uNormalMatrix", C.ShaderVarDesc_mat3_0, "uConvolutionMatrix", C.ShaderVarDesc_mat3_0, "uPerspectiveViewMatrix", C.ShaderVarDesc_mat4_0, "uLightPerspectiveViewMatrix", C.ShaderVarDesc_mat4_0, "uShadowMap", C.ShaderVarDesc_sampler2DShadow_0, "uTexture", C.ShaderVarDesc_sampler2D_0, "uTexture2", C.ShaderVarDesc_sampler2D_0, "uTexture3", C.ShaderVarDesc_sampler2D_0, "uTexture4", C.ShaderVarDesc_sampler2D_0, "uSpecularMap", C.ShaderVarDesc_sampler2D_0, "uNormalMap", C.ShaderVarDesc_sampler2D_0, "uBumpMap", C.ShaderVarDesc_sampler2D_0, "uDepthMap", C.ShaderVarDesc_sampler2D_0, "uCubeTexture", C.ShaderVarDesc_samplerCube_0, "uAnimationTable", C.ShaderVarDesc_sampler2D_0, "uTime", C.ShaderVarDesc_float_01, "uCameraNear", C.ShaderVarDesc_float_0, "uCameraFar", C.ShaderVarDesc_float_0, "uFogNear", C.ShaderVarDesc_float_0, "uFogFar", C.ShaderVarDesc_float_0, "uPointSize", C.ShaderVarDesc_float_0, "uScale", C.ShaderVarDesc_float_0, "uAngle", C.ShaderVarDesc_float_0, "uCanvasSize", C.ShaderVarDesc_vec2_00, "uCenter2", C.ShaderVarDesc_vec2_00, "uCutOff", C.ShaderVarDesc_float_0, "uShininess", C.ShaderVarDesc_float_0, "uShadowBias", C.ShaderVarDesc_float_0, "uOpacity", C.ShaderVarDesc_float_0, "uColor", C.ShaderVarDesc_vec3_0, "uAmbientDiffuse", C.ShaderVarDesc_vec3_0, "uColorEmissive", C.ShaderVarDesc_vec3_0, "uColorSpecular", C.ShaderVarDesc_vec3_0, "uColorDiffuse", C.ShaderVarDesc_vec3_0, "uColorAlpha", C.ShaderVarDesc_vec4_01, "uColorAlpha2", C.ShaderVarDesc_vec4_01, "uEyePosition", C.ShaderVarDesc_vec3_0, "uMaterial", C.ShaderVarDesc_mat4_0, "uRange", C.ShaderVarDesc_vec2_00, "uDirection", C.ShaderVarDesc_vec2_00, "uBoneMatrices", C.ShaderVarDesc_mat4_128, "uLightDescs", C.ShaderVarDesc_mat4_4, "uLightCount", C.ShaderVarDesc_float_0, "uLightTypes", C.ShaderVarDesc_float_4, "uBumpScale", C.ShaderVarDesc_float_02, "uNormalScale", C.ShaderVarDesc_float_03], P.String, G.ShaderVarDesc);
    });
    _lazy($, "TexturePropertiesFramebuffer", "$get$TexturePropertiesFramebuffer", function() {
      var t1 = G.TextureProperties$();
      t1.clamp = true;
      t1.mipmap = false;
      t1.minFilter = 9728;
      t1.magFilter = 9728;
      return t1;
    });
    _lazy($, "TexturePropertiesShadowMap", "$get$TexturePropertiesShadowMap", function() {
      var t1 = G.TextureProperties$();
      t1.clamp = true;
      t1.mipmap = false;
      t1.shadow = true;
      return t1;
    });
    _lazy($, "EmptyMaterial", "$get$EmptyMaterial", function() {
      return G.Material$("empty-mat");
    });
    _lazy($, "ColorGray4", "$get$ColorGray4", function() {
      return T.Vector3_Vector3(0.4, 0.4, 0.4);
    });
    _lazy($, "ColorGray2", "$get$ColorGray2", function() {
      return T.Vector3_Vector3(0.2, 0.2, 0.2);
    });
    _lazy($, "ColorBlack", "$get$ColorBlack", function() {
      return T.Vector3_Vector3(0, 0, 0);
    });
    _lazy($, "ColorBlue", "$get$ColorBlue", function() {
      return T.Vector3_Vector3(0, 0, 1);
    });
    _lazy($, "ColorLiteBlue", "$get$ColorLiteBlue", function() {
      return T.Vector3_Vector3(0, 0, 0.5);
    });
    _lazy($, "ColorYellow", "$get$ColorYellow", function() {
      return T.Vector3_Vector3(1, 1, 0);
    });
    _lazy($, "shadowVertexShaderDepth", "$get$shadowVertexShaderDepth", function() {
      var t1, t2;
      t1 = G.ShaderObject$("ShadowMapV");
      t2 = [P.String];
      t1.AddAttributeVars$1(H.setRuntimeTypeInfo(["aPosition"], t2));
      t1.AddUniformVars$1(H.setRuntimeTypeInfo(["uLightPerspectiveViewMatrix", "uModelMatrix"], t2));
      t1.SetBody$1(H.setRuntimeTypeInfo(["void main() {\n    gl_Position = uLightPerspectiveViewMatrix * uModelMatrix *\n                  vec4(aPosition, 1.0);\n}\n    "], t2));
      return t1;
    });
    _lazy($, "shadowFragmentShaderDepth", "$get$shadowFragmentShaderDepth", function() {
      var t1 = G.ShaderObject$("ShadowMapF");
      t1.SetBodyWithMain$1(H.setRuntimeTypeInfo(["oFragColor.r = 1.0;"], [P.String]));
      return t1;
    });
    _lazy($, "visualizeShadowmapVertexShaderLinearDepth16", "$get$visualizeShadowmapVertexShaderLinearDepth16", function() {
      var t1, t2;
      t1 = G.ShaderObject$("copyV");
      t2 = [P.String];
      t1.AddAttributeVars$1(H.setRuntimeTypeInfo(["aPosition", "aTexUV"], t2));
      t1.AddVaryingVars$1(H.setRuntimeTypeInfo(["vTexUV"], t2));
      t1.SetBody$1(H.setRuntimeTypeInfo(["void main() {\n  gl_Position = vec4(aPosition, 1.0);\n  vTexUV = aTexUV;\n}\n"], t2));
      return t1;
    });
    _lazy($, "visualizeShadowmapFragmentShaderLinearDepth16", "$get$visualizeShadowmapFragmentShaderLinearDepth16", function() {
      var t1, t2;
      t1 = G.ShaderObject$("copyF");
      t2 = [P.String];
      t1.AddVaryingVars$1(H.setRuntimeTypeInfo(["vTexUV"], t2));
      t1.AddUniformVars$1(H.setRuntimeTypeInfo(["uTexture", "uCutOff", "uCameraFar", "uCameraNear"], t2));
      t1.SetBody$1(H.setRuntimeTypeInfo(["void main() {     \n   float d = texture(uTexture,  vTexUV).x;\n   float near = uCameraNear;\n   float far = uCameraFar;\n   float gray = (2.0 * near) / (far + near - d * (far - near));\n   oFragColor.rgb = vec3(gray);\n   // oFragColor.rgb = vec3(d >= uCutOff ? d : 0.0);\n   // oFragColor.rgb = vec3(d);\n}\n"], t2));
      return t1;
    });
    _lazy($, "solidColorVertexShader", "$get$solidColorVertexShader", function() {
      var t1, t2;
      t1 = G.ShaderObject$("SolidColor");
      t2 = [P.String];
      t1.AddAttributeVars$1(H.setRuntimeTypeInfo(["aPosition"], t2));
      t1.AddUniformVars$1(H.setRuntimeTypeInfo(["uPerspectiveViewMatrix", "uModelMatrix"], t2));
      t1.SetBodyWithMain$1(H.setRuntimeTypeInfo(["gl_Position = uPerspectiveViewMatrix * uModelMatrix * vec4(aPosition, 1.0);"], t2));
      return t1;
    });
    _lazy($, "solidColorFragmentShader", "$get$solidColorFragmentShader", function() {
      var t1, t2;
      t1 = G.ShaderObject$("SolidColorF");
      t2 = [P.String];
      t1.AddUniformVars$1(H.setRuntimeTypeInfo(["uColor"], t2));
      t1.SetBodyWithMain$1(H.setRuntimeTypeInfo(["oFragColor = vec4( uColor, 1.0 );"], t2));
      return t1;
    });
    _lazy($, "_CubeNormals", "$get$_CubeNormals", function() {
      return H.setRuntimeTypeInfo([T.Vector3_Vector3(0, 0, 1), T.Vector3_Vector3(0, 0, -1), T.Vector3_Vector3(0, 1, 0), T.Vector3_Vector3(0, -1, 0), T.Vector3_Vector3(1, 0, 0), T.Vector3_Vector3(-1, 0, 0)], [T.Vector3]);
    });
    _lazy($, "IcosahedronFaceList", "$get$IcosahedronFaceList", function() {
      return H.setRuntimeTypeInfo([G.Face3$(0, 11, 5), G.Face3$(0, 5, 1), G.Face3$(0, 1, 7), G.Face3$(0, 7, 10), G.Face3$(0, 10, 11), G.Face3$(1, 5, 9), G.Face3$(5, 11, 4), G.Face3$(11, 10, 2), G.Face3$(10, 7, 6), G.Face3$(7, 1, 8), G.Face3$(3, 9, 4), G.Face3$(3, 4, 2), G.Face3$(3, 2, 6), G.Face3$(3, 6, 8), G.Face3$(3, 8, 9), G.Face3$(4, 9, 5), G.Face3$(2, 4, 11), G.Face3$(6, 2, 10), G.Face3$(8, 6, 7), G.Face3$(9, 8, 1)], [G.Face3]);
    });
    _lazy($, "t", "$get$t", function() {
      return (1 + P.sqrt(5)) / 2;
    });
    _lazy($, "IcosahedronVertexList", "$get$IcosahedronVertexList", function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
      t1 = $.$get$t();
      t2 = T.Vector3_Vector3(-1, t1, 0);
      t2.normalize$0(0);
      t3 = T.Vector3_Vector3(1, t1, 0);
      t3.normalize$0(0);
      if (typeof t1 !== "number")
        return t1.$negate();
      t4 = T.Vector3_Vector3(-1, -t1, 0);
      t4.normalize$0(0);
      t5 = T.Vector3_Vector3(1, -t1, 0);
      t5.normalize$0(0);
      t6 = T.Vector3_Vector3(0, -1, t1);
      t6.normalize$0(0);
      t7 = T.Vector3_Vector3(0, 1, t1);
      t7.normalize$0(0);
      t8 = T.Vector3_Vector3(0, -1, -t1);
      t8.normalize$0(0);
      t9 = T.Vector3_Vector3(0, 1, -t1);
      t9.normalize$0(0);
      t10 = T.Vector3_Vector3(t1, 0, -1);
      t10.normalize$0(0);
      t11 = T.Vector3_Vector3(t1, 0, 1);
      t11.normalize$0(0);
      t12 = T.Vector3_Vector3(-t1, 0, -1);
      t12.normalize$0(0);
      t1 = T.Vector3_Vector3(-t1, 0, 1);
      t1.normalize$0(0);
      return H.setRuntimeTypeInfo([t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t1], [T.Vector3]);
    });
    _lazy($, "lightVertexShaderBlinnPhongWithShadow", "$get$lightVertexShaderBlinnPhongWithShadow", function() {
      var t1, t2;
      t1 = G.ShaderObject$("LightBlinnPhongShadowV");
      t2 = [P.String];
      t1.AddAttributeVars$1(H.setRuntimeTypeInfo(["aPosition", "aNormal"], t2));
      t1.AddVaryingVars$1(H.setRuntimeTypeInfo(["vPosition", "vNormal", "vPositionFromLight"], t2));
      t1.AddUniformVars$1(H.setRuntimeTypeInfo(["uPerspectiveViewMatrix", "uLightPerspectiveViewMatrix", "uModelMatrix", "uNormalMatrix"], t2));
      t1.SetBody$1(H.setRuntimeTypeInfo(["void main() {\n    vec4 pos = uModelMatrix * vec4(aPosition, 1.0);\n    vPositionFromLight = uLightPerspectiveViewMatrix * pos;\n    gl_Position = uPerspectiveViewMatrix * pos;\n    vPosition = pos.xyz;\n    vNormal = uNormalMatrix * aNormal;\n}\n    "], t2));
      return t1;
    });
    _lazy($, "lightFragmentShaderBlinnPhongWithShadow", "$get$lightFragmentShaderBlinnPhongWithShadow", function() {
      var t1, t2;
      t1 = G.ShaderObject$("LightBlinnPhongShadowF");
      t2 = [P.String];
      t1.AddVaryingVars$1(H.setRuntimeTypeInfo(["vPosition", "vNormal", "vPositionFromLight"], t2));
      t1.AddUniformVars$1(H.setRuntimeTypeInfo(["uLightDescs", "uLightTypes", "uShininess"], t2));
      t1.AddUniformVars$1(H.setRuntimeTypeInfo(["uShadowMap", "uEyePosition", "uColor", "uShadowBias"], t2));
      t1.SetBody$2$prolog(H.setRuntimeTypeInfo(["void main() {\n    vec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\n\t\t// depth is in [-1, 1] but we want [0, 1] for the texture lookup\n\t\tdepth = 0.5 * depth + vec3(0.5);\n\n    float shadow = GetShadow(depth, uShadowMap, 0.001, 0.001);\n\n    ColorComponents acc = ColorComponents(vec3(0.0), vec3(0.0));\n    if (shadow > 0.0) {\n        acc = CombinedLight(vPosition, vNormal, uEyePosition,\n                            uLightDescs, uLightTypes, uShininess);\n    }\n\n    oFragColor.rgb = shadow * acc.diffuse +\n                       shadow * acc.specular +\n                       uColor;\n    oFragColor.a = 1.0;\n    // if ( oFragColor.r != 66.0)  gl_FragColor.rgb = vec3(shadow);\n}\n      "], t2), H.setRuntimeTypeInfo(["", "// ============================================================\n// MISC\n// ============================================================\n\nvec3 ColorFromPosition(vec3 pos) {\n    return vec3( sin(pos.x) / 2.0 + 0.5,\n                 cos(pos.y) / 2.0 + 0.5,\n                 sin(pos.z) / 2.0 + 0.5);\n}\n\nvec3 RangeToGray(float f, float a, float b) {\n    if (f > a) return vec3(1.0);\n    if (f < b) return vec3(0.0);\n    return vec3 ((f - b) / (a-b));\n}\n\nfloat useValueButReturnZero(float x) {\n    return (x + 1.0) * (x + 1.0) - x * x - 2.0 * x - 1.0;\n}\n\n// ============================================================\n// LIGHT\n// ============================================================\n\nfloat GetDiffuse(vec3 lightDir, vec3 normal) {\n    return max(dot(normal, lightDir), 0.0);\n}\n\nfloat GetSpecular(vec3 lightDir, vec3 viewDir, vec3 normal, float glossiness) {\n    vec3 angleW = normalize(viewDir + lightDir);\n    float specComp = max(0., dot(normal, angleW));\n    return pow(specComp, max(1.0, glossiness));\n}\n\nstruct ColorComponents {\n   vec3 diffuse;\n   vec3 specular;\n};\n\n// ============================================================\n// Spot Light\n// ============================================================\n\nstruct SpotLightInfo {\n    vec3 pos;      // for spot and point\n    vec3 dir;      // for spot and dir light\n    vec3 diffuseColor;\n    vec3 specularColor;\n    float range;        // for spot and point\n    float spotCutoff;   // for spot\n    float spotFocus;    // for spot\n    // float glossiness;   // Oddball: this comes from the material\n};\n\nSpotLightInfo UnpackSpotLightInfo(mat4 m) {\n    SpotLightInfo info;\n    info.pos = m[0].xyz;\n    info.dir = normalize(m[1].xyz);\n    info.diffuseColor = m[2].xyz;\n    info.specularColor = m[3].xyz;\n    // info.glossiness = m[0].a;\n    info.range = m[1].a;\n    info.spotCutoff = m[2].a;\n    info.spotFocus = m[3].a;\n    return info;\n}\n\nColorComponents SpotLightGetDiffuseAndSpecular(SpotLightInfo light,\n                                               vec3 vertexPos,\n                                               vec3 vertexNormal,\n                                               vec3 eyePos,\n                                               float uShininess) {\n    vec3 toSpot = light.pos - vertexPos;\n    vec3 spotDir = normalize(toSpot);\n    vec3 lightDirNorm = -normalize(light.dir);\n    float cosAngle = max(0., dot(lightDirNorm, spotDir));\n\t  if (cosAngle < light.spotCutoff) {\n        return ColorComponents(vec3(0.0), vec3(0.0));\n    }\n\n    cosAngle = max(0.0, pow(cosAngle, light.spotFocus));\n\t  float attenuation = max(0.0, 1.0 - length(toSpot) / light.range) * cosAngle;\n\t  vec3 viewDirNorm = normalize(eyePos - vertexPos);\n\t  return ColorComponents(\n\t           attenuation *\n             GetDiffuse(lightDirNorm, vertexNormal) *\n             light.diffuseColor,\n             attenuation *\n             GetSpecular(lightDirNorm, viewDirNorm, vertexNormal, uShininess) *\n             light.specularColor);\n}\n\n// ============================================================\n// Point Light\n// ============================================================\n\nstruct PointLightInfo {\n    vec3 pos;\n    vec3 diffuseColor;\n    vec3 specularColor;\n    float range;\n    // float glossiness;\n};\n\nPointLightInfo UnpackPointLightInfo(mat4 m) {\n    PointLightInfo info;\n    info.pos = m[0].xyz;\n    info.diffuseColor = m[2].xyz;\n    info.specularColor = m[3].xyz;\n    info.range = m[1].a;\n    // info.glossiness = m[0].a;\n    return info;\n}\n\nColorComponents PointLightGetDiffuseAndSpecular(PointLightInfo info,\n                                     vec3 vertexPos,\n                                     vec3 vertexNormal,\n                                     vec3 eyePos,\n                                     float uShininess) {\n    vec3 lightDir = info.pos - vertexPos;\n    float attenuation = max(0.0, 1.0 - length(lightDir) / info.range);\n    vec3 lightDirNorm = normalize(lightDir);\n    vec3 viewDirNorm = normalize(eyePos - vertexPos);\n    return ColorComponents(\n              attenuation *\n              GetDiffuse(lightDirNorm, vertexNormal) *\n              info.diffuseColor,\n               attenuation *\n               GetSpecular(lightDirNorm, viewDirNorm, vertexNormal, uShininess) *\n               info.specularColor);\n}\n\n// ============================================================\n// Directional Light\n// ============================================================\n\nstruct DirectionalLightInfo {\n    vec3 dir;      // for spot and dir light\n    vec3 diffuseColor;\n    vec3 specularColor;\n    // float glossiness;   // Oddball: this comes from the material\n};\n\nDirectionalLightInfo UnpackDirectionalLightInfo(mat4 m) {\n    DirectionalLightInfo info;\n    info.dir = normalize(m[1].xyz);\n    info.diffuseColor = m[2].xyz;\n    info.specularColor = m[3].xyz;\n    // info.glossiness = m[0].a;\n    return info;\n}\n\nColorComponents DirectionalLightGetDiffuseAndSpecular(DirectionalLightInfo info,\n                                                      vec3 vertexPos,\n                                                      vec3 vertexNormal,\n                                                      vec3 eyePos,\n                                                      float uShininess) {\n    vec3 viewDirNorm = normalize(eyePos - vertexPos);\n    return ColorComponents(\n              GetDiffuse(-info.dir, vertexNormal) *\n              info.diffuseColor,\n              GetSpecular(-info.dir, viewDirNorm, vertexNormal, uShininess) *\n              info.specularColor);\n}\n\n\nColorComponents CombinedLightSpot(\n    vec3 vVertexPosition, vec3 vNormal, vec3 uEyePosition, mat4 lightDesc,\n    float shininess) {\n    SpotLightInfo info = UnpackSpotLightInfo(lightDesc);\n    return SpotLightGetDiffuseAndSpecular(\n        info, vVertexPosition, vNormal, uEyePosition, shininess);\n}\n\nColorComponents CombinedLightPoint(\n    vec3 vVertexPosition, vec3 vNormal, vec3 uEyePosition, mat4 lightDesc,\n    float shininess) {\n    PointLightInfo info = UnpackPointLightInfo(lightDesc);\n    return PointLightGetDiffuseAndSpecular(\n        info, vVertexPosition, vNormal, uEyePosition, shininess);\n}\n\nColorComponents CombinedLightDirectional(\n    vec3 vVertexPosition, vec3 vNormal, vec3 uEyePosition, mat4 lightDesc,\n    float shininess) {\n    DirectionalLightInfo info = UnpackDirectionalLightInfo(lightDesc);\n    return DirectionalLightGetDiffuseAndSpecular(\n        info, vVertexPosition, vNormal, uEyePosition, shininess);\n}\n\n// ============================================================\n// Combined Light\n// ============================================================\nColorComponents CombinedLight(vec3 vVertexPosition,\n                   vec3 vNormal,\n                   vec3 uEyePosition,\n                   const mat4 uLightDescs[4],\n                   const float uLightTypes[4],\n                   float uShininess) {\n    ColorComponents acc = ColorComponents(vec3(0.0), vec3(0.0));\n\n    for (int i = 0; i < 4; ++i) {\n        ColorComponents curr;\n        float type = uLightTypes[i];\n        if (type == 2.0) {\n            curr = CombinedLightSpot(\n                       vVertexPosition, vNormal, uEyePosition, uLightDescs[i], \n                       uShininess);\n        } else if (type == 3.0) {\n            curr = CombinedLightPoint(\n                       vVertexPosition, vNormal, uEyePosition, uLightDescs[i], \n                       uShininess);\n        } else if (type == 1.0) {\n            curr = CombinedLightDirectional(\n                       vVertexPosition, vNormal, uEyePosition, uLightDescs[i], \n                       uShininess);\n        } else {\n            continue;\n        }\n        acc.diffuse = acc.diffuse + curr.diffuse;\n        acc.specular = acc.specular + curr.specular;\n    }\n    return acc;\n}\n", "\nfloat GetShadow(vec3 depth, sampler2DShadow shadowMap, float bias1, float bias2) {\n    depth.z = depth.z - bias1;\n    return texture(shadowMap, depth);\n    //return 1.0 - smoothstep(bias1, bias2, depth.z - d);\n}\n"], t2));
      return t1;
    });
    _lazy($, "posLight", "$get$posLight", function() {
      return T.Vector3_Vector3(11, 20, 0);
    });
    _lazy($, "dirLight", "$get$dirLight", function() {
      return T.Vector3_Vector3(0, -30, 0);
    });
    _lazy($, "lightSources", "$get$lightSources", function() {
      var t1, t2, t3, t4, t5;
      t1 = $.$get$dirLight();
      t2 = $.$get$ColorBlue();
      t3 = $.$get$ColorBlack();
      t4 = new G.DirectionalLight(t1, 40, T.Matrix4$zero(), T.Matrix4$zero(), 1, T.Vector3$zero(), T.Vector3$zero(), "dir");
      t4.Light$4("dir", 1, t2, t3);
      t5 = $.$get$posLight();
      t1 = new G.SpotLight(t5, t1, 40, 0.5235987755982988, 0.5, 1, 0.5, 44, T.Matrix4$zero(), T.Matrix4$zero(), 2, T.Vector3$zero(), T.Vector3$zero(), "spot");
      t1.Light$4("spot", 2, t2, t3);
      t3 = $.$get$ColorLiteBlue();
      t5 = new G.PointLight(t5, 40, 3, T.Vector3$zero(), T.Vector3$zero(), "point");
      t5.Light$4("point", 3, t3, t2);
      return P.LinkedHashMap_LinkedHashMap$_literal(["idDirectional", t4, "idSpot", t1, "idPoint", t5], P.String, G.Light);
    });
    _lazy($, "matGray", "$get$matGray", function() {
      var t1 = G.Material$("matGray");
      t1.ForceUniform$2("uColor", $.$get$ColorGray4());
      t1.ForceUniform$2("uShininess", 10);
      return t1;
    });
    _lazy($, "matObjects", "$get$matObjects", function() {
      var t1 = G.Material$("objects");
      t1.ForceUniform$2("uColor", $.$get$ColorGray2());
      t1.ForceUniform$2("uShininess", 10);
      return t1;
    });
    _lazy($, "lightSourceMat", "$get$lightSourceMat", function() {
      var t1 = G.Material$("light");
      t1.ForceUniform$2("uColor", $.$get$ColorYellow());
      return t1;
    });
  })();
  var init = {mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"}, mangledNames: {}, getTypeFromName: getGlobalFromName, metadata: [], types: [{func: 1, ret: P.Null}, {func: 1, ret: -1}, {func: 1, ret: -1, args: [P.String,,]}, {func: 1, ret: P.Null, args: [W.MouseEvent]}, {func: 1, ret: -1, args: [{func: 1, ret: -1}]}, {func: 1, args: [,]}, {func: 1, ret: P.Null, args: [,]}, {func: 1, ret: P.Null, args: [,,]}, {func: 1, ret: P.String, args: [P.int]}, {func: 1, ret: P.bool, args: [W.NodeValidator]}, {func: 1, ret: P.bool, args: [P.String]}, {func: 1, ret: P.Null, args: [W.KeyboardEvent]}, {func: 1, ret: P.Null, args: [W.Event]}, {func: 1, ret: -1, args: [W.Event]}, {func: 1, ret: P.bool, args: [W.Element, P.String, P.String, W._Html5NodeValidator]}, {func: 1, args: [, P.String]}, {func: 1, args: [P.String]}, {func: 1, ret: P.Null, args: [{func: 1, ret: -1}]}, {func: 1, ret: P.Null, args: [,], opt: [P.StackTrace]}, {func: 1, ret: [P._Future,,], args: [,]}, {func: 1, ret: P.bool, args: [W.Node0]}, {func: 1, ret: -1, args: [P.String, P.String]}, {func: 1, ret: P.Null, args: [P.num]}, {func: 1, args: [W.Event]}, {func: 1, ret: P.String, args: [P.String]}, {func: 1, ret: -1, args: [W.Node0, W.Node0]}, {func: 1, ret: -1, args: [P.double, T.Vector3]}, {func: 1, ret: P.Null, args: [W.WheelEvent]}, {func: 1, ret: P.int, args: [P.int, P.Object]}, {func: 1, ret: -1, args: [P.num]}, {func: 1, ret: P.int, args: [,,]}, {func: 1, ret: P.String, args: [W.EventTarget]}], interceptorsByTag: null, leafTags: null};
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: J.Interceptor, AnimationEffectReadOnly: J.Interceptor, AnimationEffectTiming: J.Interceptor, AnimationEffectTimingReadOnly: J.Interceptor, AnimationTimeline: J.Interceptor, AnimationWorkletGlobalScope: J.Interceptor, AuthenticatorAssertionResponse: J.Interceptor, AuthenticatorAttestationResponse: J.Interceptor, AuthenticatorResponse: J.Interceptor, BackgroundFetchFetch: J.Interceptor, BackgroundFetchManager: J.Interceptor, BackgroundFetchSettledFetch: J.Interceptor, BarProp: J.Interceptor, BarcodeDetector: J.Interceptor, BluetoothRemoteGATTDescriptor: J.Interceptor, Body: J.Interceptor, BudgetState: J.Interceptor, CacheStorage: J.Interceptor, CanvasGradient: J.Interceptor, CanvasPattern: J.Interceptor, Client: J.Interceptor, Clients: J.Interceptor, CookieStore: J.Interceptor, Coordinates: J.Interceptor, Credential: J.Interceptor, CredentialUserData: J.Interceptor, CredentialsContainer: J.Interceptor, Crypto: J.Interceptor, CryptoKey: J.Interceptor, CSS: J.Interceptor, CSSVariableReferenceValue: J.Interceptor, CustomElementRegistry: J.Interceptor, DataTransfer: J.Interceptor, DataTransferItem: J.Interceptor, DeprecatedStorageInfo: J.Interceptor, DeprecatedStorageQuota: J.Interceptor, DeprecationReport: J.Interceptor, DetectedBarcode: J.Interceptor, DetectedFace: J.Interceptor, DetectedText: J.Interceptor, DeviceAcceleration: J.Interceptor, DeviceRotationRate: J.Interceptor, DirectoryEntry: J.Interceptor, DirectoryReader: J.Interceptor, DocumentOrShadowRoot: J.Interceptor, DocumentTimeline: J.Interceptor, DOMError: J.Interceptor, DOMImplementation: J.Interceptor, Iterator: J.Interceptor, DOMMatrix: J.Interceptor, DOMMatrixReadOnly: J.Interceptor, DOMParser: J.Interceptor, DOMPoint: J.Interceptor, DOMPointReadOnly: J.Interceptor, DOMQuad: J.Interceptor, DOMStringMap: J.Interceptor, Entry: J.Interceptor, External: J.Interceptor, FaceDetector: J.Interceptor, FederatedCredential: J.Interceptor, FileEntry: J.Interceptor, DOMFileSystem: J.Interceptor, FontFace: J.Interceptor, FontFaceSource: J.Interceptor, FormData: J.Interceptor, GamepadButton: J.Interceptor, GamepadPose: J.Interceptor, Geolocation: J.Interceptor, Position: J.Interceptor, Headers: J.Interceptor, HTMLHyperlinkElementUtils: J.Interceptor, IdleDeadline: J.Interceptor, ImageBitmap: J.Interceptor, ImageBitmapRenderingContext: J.Interceptor, ImageCapture: J.Interceptor, ImageData: J.Interceptor, InputDeviceCapabilities: J.Interceptor, IntersectionObserver: J.Interceptor, IntersectionObserverEntry: J.Interceptor, InterventionReport: J.Interceptor, KeyframeEffect: J.Interceptor, KeyframeEffectReadOnly: J.Interceptor, MediaCapabilities: J.Interceptor, MediaCapabilitiesInfo: J.Interceptor, MediaDeviceInfo: J.Interceptor, MediaError: J.Interceptor, MediaKeyStatusMap: J.Interceptor, MediaKeySystemAccess: J.Interceptor, MediaKeys: J.Interceptor, MediaKeysPolicy: J.Interceptor, MediaMetadata: J.Interceptor, MediaSession: J.Interceptor, MediaSettingsRange: J.Interceptor, MemoryInfo: J.Interceptor, MessageChannel: J.Interceptor, Metadata: J.Interceptor, MutationObserver: J.Interceptor, WebKitMutationObserver: J.Interceptor, MutationRecord: J.Interceptor, NavigationPreloadManager: J.Interceptor, Navigator: J.Interceptor, NavigatorAutomationInformation: J.Interceptor, NavigatorConcurrentHardware: J.Interceptor, NavigatorCookies: J.Interceptor, NavigatorUserMediaError: J.Interceptor, NodeFilter: J.Interceptor, NodeIterator: J.Interceptor, NonDocumentTypeChildNode: J.Interceptor, NonElementParentNode: J.Interceptor, NoncedElement: J.Interceptor, OffscreenCanvasRenderingContext2D: J.Interceptor, OverconstrainedError: J.Interceptor, PaintRenderingContext2D: J.Interceptor, PaintSize: J.Interceptor, PaintWorkletGlobalScope: J.Interceptor, PasswordCredential: J.Interceptor, Path2D: J.Interceptor, PaymentAddress: J.Interceptor, PaymentInstruments: J.Interceptor, PaymentManager: J.Interceptor, PaymentResponse: J.Interceptor, PerformanceEntry: J.Interceptor, PerformanceLongTaskTiming: J.Interceptor, PerformanceMark: J.Interceptor, PerformanceMeasure: J.Interceptor, PerformanceNavigation: J.Interceptor, PerformanceNavigationTiming: J.Interceptor, PerformanceObserver: J.Interceptor, PerformanceObserverEntryList: J.Interceptor, PerformancePaintTiming: J.Interceptor, PerformanceResourceTiming: J.Interceptor, PerformanceServerTiming: J.Interceptor, PerformanceTiming: J.Interceptor, Permissions: J.Interceptor, PhotoCapabilities: J.Interceptor, PositionError: J.Interceptor, Presentation: J.Interceptor, PresentationReceiver: J.Interceptor, PublicKeyCredential: J.Interceptor, PushManager: J.Interceptor, PushMessageData: J.Interceptor, PushSubscription: J.Interceptor, PushSubscriptionOptions: J.Interceptor, Range: J.Interceptor, RelatedApplication: J.Interceptor, ReportBody: J.Interceptor, ReportingObserver: J.Interceptor, ResizeObserver: J.Interceptor, ResizeObserverEntry: J.Interceptor, RTCCertificate: J.Interceptor, RTCIceCandidate: J.Interceptor, mozRTCIceCandidate: J.Interceptor, RTCLegacyStatsReport: J.Interceptor, RTCRtpContributingSource: J.Interceptor, RTCRtpReceiver: J.Interceptor, RTCRtpSender: J.Interceptor, RTCSessionDescription: J.Interceptor, mozRTCSessionDescription: J.Interceptor, RTCStatsResponse: J.Interceptor, Screen: J.Interceptor, ScrollState: J.Interceptor, ScrollTimeline: J.Interceptor, Selection: J.Interceptor, SharedArrayBuffer: J.Interceptor, SpeechRecognitionAlternative: J.Interceptor, SpeechSynthesisVoice: J.Interceptor, StaticRange: J.Interceptor, StorageManager: J.Interceptor, StyleMedia: J.Interceptor, StylePropertyMap: J.Interceptor, StylePropertyMapReadonly: J.Interceptor, SyncManager: J.Interceptor, TaskAttributionTiming: J.Interceptor, TextDetector: J.Interceptor, TextMetrics: J.Interceptor, TrackDefault: J.Interceptor, TreeWalker: J.Interceptor, TrustedHTML: J.Interceptor, TrustedScriptURL: J.Interceptor, TrustedURL: J.Interceptor, UnderlyingSourceBase: J.Interceptor, URLSearchParams: J.Interceptor, VRCoordinateSystem: J.Interceptor, VRDisplayCapabilities: J.Interceptor, VREyeParameters: J.Interceptor, VRFrameData: J.Interceptor, VRFrameOfReference: J.Interceptor, VRPose: J.Interceptor, VRStageBounds: J.Interceptor, VRStageBoundsPoint: J.Interceptor, VRStageParameters: J.Interceptor, ValidityState: J.Interceptor, VideoPlaybackQuality: J.Interceptor, VideoTrack: J.Interceptor, VTTRegion: J.Interceptor, WindowClient: J.Interceptor, WorkletAnimation: J.Interceptor, WorkletGlobalScope: J.Interceptor, XPathEvaluator: J.Interceptor, XPathExpression: J.Interceptor, XPathNSResolver: J.Interceptor, XPathResult: J.Interceptor, XMLSerializer: J.Interceptor, XSLTProcessor: J.Interceptor, Bluetooth: J.Interceptor, BluetoothCharacteristicProperties: J.Interceptor, BluetoothRemoteGATTServer: J.Interceptor, BluetoothRemoteGATTService: J.Interceptor, BluetoothUUID: J.Interceptor, BudgetService: J.Interceptor, Cache: J.Interceptor, DOMFileSystemSync: J.Interceptor, DirectoryEntrySync: J.Interceptor, DirectoryReaderSync: J.Interceptor, EntrySync: J.Interceptor, FileEntrySync: J.Interceptor, FileReaderSync: J.Interceptor, FileWriterSync: J.Interceptor, HTMLAllCollection: J.Interceptor, Mojo: J.Interceptor, MojoHandle: J.Interceptor, MojoWatcher: J.Interceptor, NFC: J.Interceptor, PagePopupController: J.Interceptor, Report: J.Interceptor, Request: J.Interceptor, Response: J.Interceptor, SubtleCrypto: J.Interceptor, USBAlternateInterface: J.Interceptor, USBConfiguration: J.Interceptor, USBDevice: J.Interceptor, USBEndpoint: J.Interceptor, USBInTransferResult: J.Interceptor, USBInterface: J.Interceptor, USBIsochronousInTransferPacket: J.Interceptor, USBIsochronousInTransferResult: J.Interceptor, USBIsochronousOutTransferPacket: J.Interceptor, USBIsochronousOutTransferResult: J.Interceptor, USBOutTransferResult: J.Interceptor, WorkerLocation: J.Interceptor, WorkerNavigator: J.Interceptor, Worklet: J.Interceptor, IDBCursor: J.Interceptor, IDBCursorWithValue: J.Interceptor, IDBFactory: J.Interceptor, IDBIndex: J.Interceptor, IDBKeyRange: J.Interceptor, IDBObjectStore: J.Interceptor, IDBObservation: J.Interceptor, IDBObserver: J.Interceptor, IDBObserverChanges: J.Interceptor, SVGAngle: J.Interceptor, SVGAnimatedAngle: J.Interceptor, SVGAnimatedBoolean: J.Interceptor, SVGAnimatedEnumeration: J.Interceptor, SVGAnimatedInteger: J.Interceptor, SVGAnimatedLength: J.Interceptor, SVGAnimatedLengthList: J.Interceptor, SVGAnimatedNumber: J.Interceptor, SVGAnimatedNumberList: J.Interceptor, SVGAnimatedPreserveAspectRatio: J.Interceptor, SVGAnimatedRect: J.Interceptor, SVGAnimatedString: J.Interceptor, SVGAnimatedTransformList: J.Interceptor, SVGMatrix: J.Interceptor, SVGPoint: J.Interceptor, SVGPreserveAspectRatio: J.Interceptor, SVGRect: J.Interceptor, SVGUnitTypes: J.Interceptor, AudioListener: J.Interceptor, AudioParam: J.Interceptor, AudioTrack: J.Interceptor, AudioWorkletGlobalScope: J.Interceptor, AudioWorkletProcessor: J.Interceptor, PeriodicWave: J.Interceptor, WebGLActiveInfo: J.Interceptor, ANGLEInstancedArrays: J.Interceptor, ANGLE_instanced_arrays: J.Interceptor, WebGLCanvas: J.Interceptor, WebGLColorBufferFloat: J.Interceptor, WebGLCompressedTextureASTC: J.Interceptor, WebGLCompressedTextureATC: J.Interceptor, WEBGL_compressed_texture_atc: J.Interceptor, WebGLCompressedTextureETC1: J.Interceptor, WEBGL_compressed_texture_etc1: J.Interceptor, WebGLCompressedTextureETC: J.Interceptor, WebGLCompressedTexturePVRTC: J.Interceptor, WEBGL_compressed_texture_pvrtc: J.Interceptor, WebGLCompressedTextureS3TC: J.Interceptor, WEBGL_compressed_texture_s3tc: J.Interceptor, WebGLCompressedTextureS3TCsRGB: J.Interceptor, WebGLDebugRendererInfo: J.Interceptor, WEBGL_debug_renderer_info: J.Interceptor, WebGLDebugShaders: J.Interceptor, WEBGL_debug_shaders: J.Interceptor, WebGLDepthTexture: J.Interceptor, WEBGL_depth_texture: J.Interceptor, WebGLDrawBuffers: J.Interceptor, WEBGL_draw_buffers: J.Interceptor, EXTsRGB: J.Interceptor, EXT_sRGB: J.Interceptor, EXTBlendMinMax: J.Interceptor, EXT_blend_minmax: J.Interceptor, EXTColorBufferFloat: J.Interceptor, EXTColorBufferHalfFloat: J.Interceptor, EXTDisjointTimerQuery: J.Interceptor, EXTDisjointTimerQueryWebGL2: J.Interceptor, EXTFragDepth: J.Interceptor, EXT_frag_depth: J.Interceptor, EXTShaderTextureLOD: J.Interceptor, EXT_shader_texture_lod: J.Interceptor, EXTTextureFilterAnisotropic: J.Interceptor, EXT_texture_filter_anisotropic: J.Interceptor, WebGLGetBufferSubDataAsync: J.Interceptor, WebGLLoseContext: J.Interceptor, WebGLExtensionLoseContext: J.Interceptor, WEBGL_lose_context: J.Interceptor, OESElementIndexUint: J.Interceptor, OES_element_index_uint: J.Interceptor, OESStandardDerivatives: J.Interceptor, OES_standard_derivatives: J.Interceptor, OESTextureFloat: J.Interceptor, OES_texture_float: J.Interceptor, OESTextureFloatLinear: J.Interceptor, OES_texture_float_linear: J.Interceptor, OESTextureHalfFloat: J.Interceptor, OES_texture_half_float: J.Interceptor, OESTextureHalfFloatLinear: J.Interceptor, OES_texture_half_float_linear: J.Interceptor, OESVertexArrayObject: J.Interceptor, OES_vertex_array_object: J.Interceptor, WebGLQuery: J.Interceptor, WebGLRenderbuffer: J.Interceptor, WebGLSampler: J.Interceptor, WebGLShaderPrecisionFormat: J.Interceptor, WebGLSync: J.Interceptor, WebGLTimerQueryEXT: J.Interceptor, WebGLTransformFeedback: J.Interceptor, WebGLVertexArrayObjectOES: J.Interceptor, WebGL: J.Interceptor, WebGL2RenderingContextBase: J.Interceptor, Database: J.Interceptor, SQLError: J.Interceptor, SQLResultSet: J.Interceptor, SQLTransaction: J.Interceptor, DataView: H.NativeTypedData, ArrayBufferView: H.NativeTypedData, Float64Array: H.NativeTypedArrayOfDouble, Float32Array: H.NativeFloat32List, Int16Array: H.NativeInt16List, Int32Array: H.NativeInt32List, Int8Array: H.NativeInt8List, Uint16Array: H.NativeUint16List, Uint32Array: H.NativeUint32List, Uint8ClampedArray: H.NativeUint8ClampedList, CanvasPixelArray: H.NativeUint8ClampedList, Uint8Array: H.NativeUint8List, HTMLAudioElement: W.HtmlElement, HTMLBRElement: W.HtmlElement, HTMLButtonElement: W.HtmlElement, HTMLContentElement: W.HtmlElement, HTMLDListElement: W.HtmlElement, HTMLDataElement: W.HtmlElement, HTMLDataListElement: W.HtmlElement, HTMLDetailsElement: W.HtmlElement, HTMLDialogElement: W.HtmlElement, HTMLEmbedElement: W.HtmlElement, HTMLFieldSetElement: W.HtmlElement, HTMLHRElement: W.HtmlElement, HTMLHeadElement: W.HtmlElement, HTMLHeadingElement: W.HtmlElement, HTMLHtmlElement: W.HtmlElement, HTMLIFrameElement: W.HtmlElement, HTMLImageElement: W.HtmlElement, HTMLLIElement: W.HtmlElement, HTMLLabelElement: W.HtmlElement, HTMLLegendElement: W.HtmlElement, HTMLLinkElement: W.HtmlElement, HTMLMapElement: W.HtmlElement, HTMLMediaElement: W.HtmlElement, HTMLMenuElement: W.HtmlElement, HTMLMetaElement: W.HtmlElement, HTMLMeterElement: W.HtmlElement, HTMLModElement: W.HtmlElement, HTMLOListElement: W.HtmlElement, HTMLObjectElement: W.HtmlElement, HTMLOptGroupElement: W.HtmlElement, HTMLOptionElement: W.HtmlElement, HTMLOutputElement: W.HtmlElement, HTMLParagraphElement: W.HtmlElement, HTMLParamElement: W.HtmlElement, HTMLPictureElement: W.HtmlElement, HTMLPreElement: W.HtmlElement, HTMLProgressElement: W.HtmlElement, HTMLQuoteElement: W.HtmlElement, HTMLScriptElement: W.HtmlElement, HTMLShadowElement: W.HtmlElement, HTMLSlotElement: W.HtmlElement, HTMLSourceElement: W.HtmlElement, HTMLSpanElement: W.HtmlElement, HTMLStyleElement: W.HtmlElement, HTMLTableCaptionElement: W.HtmlElement, HTMLTableCellElement: W.HtmlElement, HTMLTableDataCellElement: W.HtmlElement, HTMLTableHeaderCellElement: W.HtmlElement, HTMLTableColElement: W.HtmlElement, HTMLTextAreaElement: W.HtmlElement, HTMLTimeElement: W.HtmlElement, HTMLTitleElement: W.HtmlElement, HTMLTrackElement: W.HtmlElement, HTMLUListElement: W.HtmlElement, HTMLUnknownElement: W.HtmlElement, HTMLVideoElement: W.HtmlElement, HTMLDirectoryElement: W.HtmlElement, HTMLFontElement: W.HtmlElement, HTMLFrameElement: W.HtmlElement, HTMLFrameSetElement: W.HtmlElement, HTMLMarqueeElement: W.HtmlElement, HTMLElement: W.HtmlElement, AccessibleNodeList: W.AccessibleNodeList, HTMLAnchorElement: W.AnchorElement, HTMLAreaElement: W.AreaElement, HTMLBaseElement: W.BaseElement, Blob: W.Blob, HTMLBodyElement: W.BodyElement, HTMLCanvasElement: W.CanvasElement, CanvasRenderingContext2D: W.CanvasRenderingContext2D, CDATASection: W.CharacterData, CharacterData: W.CharacterData, Comment: W.CharacterData, ProcessingInstruction: W.CharacterData, Text: W.CharacterData, CSSNumericValue: W.CssNumericValue, CSSUnitValue: W.CssNumericValue, CSSPerspective: W.CssPerspective, CSSCharsetRule: W.CssRule, CSSConditionRule: W.CssRule, CSSFontFaceRule: W.CssRule, CSSGroupingRule: W.CssRule, CSSImportRule: W.CssRule, CSSKeyframeRule: W.CssRule, MozCSSKeyframeRule: W.CssRule, WebKitCSSKeyframeRule: W.CssRule, CSSKeyframesRule: W.CssRule, MozCSSKeyframesRule: W.CssRule, WebKitCSSKeyframesRule: W.CssRule, CSSMediaRule: W.CssRule, CSSNamespaceRule: W.CssRule, CSSPageRule: W.CssRule, CSSRule: W.CssRule, CSSStyleRule: W.CssRule, CSSSupportsRule: W.CssRule, CSSViewportRule: W.CssRule, CSSStyleDeclaration: W.CssStyleDeclaration, MSStyleCSSProperties: W.CssStyleDeclaration, CSS2Properties: W.CssStyleDeclaration, CSSImageValue: W.CssStyleValue, CSSKeywordValue: W.CssStyleValue, CSSPositionValue: W.CssStyleValue, CSSResourceValue: W.CssStyleValue, CSSURLImageValue: W.CssStyleValue, CSSStyleValue: W.CssStyleValue, CSSMatrixComponent: W.CssTransformComponent, CSSRotation: W.CssTransformComponent, CSSScale: W.CssTransformComponent, CSSSkew: W.CssTransformComponent, CSSTranslation: W.CssTransformComponent, CSSTransformComponent: W.CssTransformComponent, CSSTransformValue: W.CssTransformValue, CSSUnparsedValue: W.CssUnparsedValue, DataTransferItemList: W.DataTransferItemList, HTMLDivElement: W.DivElement, Document: W.Document, HTMLDocument: W.Document, XMLDocument: W.Document, DOMException: W.DomException, ClientRectList: W.DomRectList, DOMRectList: W.DomRectList, DOMRectReadOnly: W.DomRectReadOnly, DOMStringList: W.DomStringList, DOMTokenList: W.DomTokenList, Element: W.Element, AbortPaymentEvent: W.Event, AnimationEvent: W.Event, AnimationPlaybackEvent: W.Event, ApplicationCacheErrorEvent: W.Event, BackgroundFetchClickEvent: W.Event, BackgroundFetchEvent: W.Event, BackgroundFetchFailEvent: W.Event, BackgroundFetchedEvent: W.Event, BeforeInstallPromptEvent: W.Event, BeforeUnloadEvent: W.Event, BlobEvent: W.Event, CanMakePaymentEvent: W.Event, ClipboardEvent: W.Event, CloseEvent: W.Event, CustomEvent: W.Event, DeviceMotionEvent: W.Event, DeviceOrientationEvent: W.Event, ErrorEvent: W.Event, ExtendableEvent: W.Event, ExtendableMessageEvent: W.Event, FetchEvent: W.Event, FontFaceSetLoadEvent: W.Event, ForeignFetchEvent: W.Event, GamepadEvent: W.Event, HashChangeEvent: W.Event, InstallEvent: W.Event, MediaEncryptedEvent: W.Event, MediaKeyMessageEvent: W.Event, MediaQueryListEvent: W.Event, MediaStreamEvent: W.Event, MediaStreamTrackEvent: W.Event, MessageEvent: W.Event, MIDIConnectionEvent: W.Event, MIDIMessageEvent: W.Event, MutationEvent: W.Event, NotificationEvent: W.Event, PageTransitionEvent: W.Event, PaymentRequestEvent: W.Event, PaymentRequestUpdateEvent: W.Event, PopStateEvent: W.Event, PresentationConnectionAvailableEvent: W.Event, PresentationConnectionCloseEvent: W.Event, ProgressEvent: W.Event, PromiseRejectionEvent: W.Event, PushEvent: W.Event, RTCDataChannelEvent: W.Event, RTCDTMFToneChangeEvent: W.Event, RTCPeerConnectionIceEvent: W.Event, RTCTrackEvent: W.Event, SecurityPolicyViolationEvent: W.Event, SensorErrorEvent: W.Event, SpeechRecognitionError: W.Event, SpeechRecognitionEvent: W.Event, SpeechSynthesisEvent: W.Event, StorageEvent: W.Event, SyncEvent: W.Event, TrackEvent: W.Event, TransitionEvent: W.Event, WebKitTransitionEvent: W.Event, VRDeviceEvent: W.Event, VRDisplayEvent: W.Event, VRSessionEvent: W.Event, MojoInterfaceRequestEvent: W.Event, ResourceProgressEvent: W.Event, USBConnectionEvent: W.Event, AudioProcessingEvent: W.Event, OfflineAudioCompletionEvent: W.Event, WebGLContextEvent: W.Event, Event: W.Event, InputEvent: W.Event, AbsoluteOrientationSensor: W.EventTarget, Accelerometer: W.EventTarget, AccessibleNode: W.EventTarget, AmbientLightSensor: W.EventTarget, Animation: W.EventTarget, ApplicationCache: W.EventTarget, DOMApplicationCache: W.EventTarget, OfflineResourceList: W.EventTarget, BackgroundFetchRegistration: W.EventTarget, BatteryManager: W.EventTarget, BroadcastChannel: W.EventTarget, CanvasCaptureMediaStreamTrack: W.EventTarget, DedicatedWorkerGlobalScope: W.EventTarget, EventSource: W.EventTarget, FileReader: W.EventTarget, FontFaceSet: W.EventTarget, Gyroscope: W.EventTarget, XMLHttpRequest: W.EventTarget, XMLHttpRequestEventTarget: W.EventTarget, XMLHttpRequestUpload: W.EventTarget, LinearAccelerationSensor: W.EventTarget, Magnetometer: W.EventTarget, MediaDevices: W.EventTarget, MediaKeySession: W.EventTarget, MediaQueryList: W.EventTarget, MediaRecorder: W.EventTarget, MediaSource: W.EventTarget, MediaStream: W.EventTarget, MediaStreamTrack: W.EventTarget, MessagePort: W.EventTarget, MIDIAccess: W.EventTarget, MIDIInput: W.EventTarget, MIDIOutput: W.EventTarget, MIDIPort: W.EventTarget, NetworkInformation: W.EventTarget, Notification: W.EventTarget, OffscreenCanvas: W.EventTarget, OrientationSensor: W.EventTarget, PaymentRequest: W.EventTarget, Performance: W.EventTarget, PermissionStatus: W.EventTarget, PresentationAvailability: W.EventTarget, PresentationConnection: W.EventTarget, PresentationConnectionList: W.EventTarget, PresentationRequest: W.EventTarget, RelativeOrientationSensor: W.EventTarget, RemotePlayback: W.EventTarget, RTCDataChannel: W.EventTarget, DataChannel: W.EventTarget, RTCDTMFSender: W.EventTarget, RTCPeerConnection: W.EventTarget, webkitRTCPeerConnection: W.EventTarget, mozRTCPeerConnection: W.EventTarget, ScreenOrientation: W.EventTarget, Sensor: W.EventTarget, ServiceWorker: W.EventTarget, ServiceWorkerContainer: W.EventTarget, ServiceWorkerGlobalScope: W.EventTarget, ServiceWorkerRegistration: W.EventTarget, SharedWorker: W.EventTarget, SharedWorkerGlobalScope: W.EventTarget, SpeechRecognition: W.EventTarget, SpeechSynthesis: W.EventTarget, SpeechSynthesisUtterance: W.EventTarget, VR: W.EventTarget, VRDevice: W.EventTarget, VRDisplay: W.EventTarget, VRSession: W.EventTarget, VisualViewport: W.EventTarget, WebSocket: W.EventTarget, Worker: W.EventTarget, WorkerGlobalScope: W.EventTarget, WorkerPerformance: W.EventTarget, BluetoothDevice: W.EventTarget, BluetoothRemoteGATTCharacteristic: W.EventTarget, Clipboard: W.EventTarget, MojoInterfaceInterceptor: W.EventTarget, USB: W.EventTarget, IDBDatabase: W.EventTarget, IDBTransaction: W.EventTarget, AnalyserNode: W.EventTarget, RealtimeAnalyserNode: W.EventTarget, AudioBufferSourceNode: W.EventTarget, AudioDestinationNode: W.EventTarget, AudioNode: W.EventTarget, AudioScheduledSourceNode: W.EventTarget, AudioWorkletNode: W.EventTarget, BiquadFilterNode: W.EventTarget, ChannelMergerNode: W.EventTarget, AudioChannelMerger: W.EventTarget, ChannelSplitterNode: W.EventTarget, AudioChannelSplitter: W.EventTarget, ConstantSourceNode: W.EventTarget, ConvolverNode: W.EventTarget, DelayNode: W.EventTarget, DynamicsCompressorNode: W.EventTarget, GainNode: W.EventTarget, AudioGainNode: W.EventTarget, IIRFilterNode: W.EventTarget, MediaElementAudioSourceNode: W.EventTarget, MediaStreamAudioDestinationNode: W.EventTarget, MediaStreamAudioSourceNode: W.EventTarget, OscillatorNode: W.EventTarget, Oscillator: W.EventTarget, PannerNode: W.EventTarget, AudioPannerNode: W.EventTarget, webkitAudioPannerNode: W.EventTarget, ScriptProcessorNode: W.EventTarget, JavaScriptAudioNode: W.EventTarget, StereoPannerNode: W.EventTarget, WaveShaperNode: W.EventTarget, EventTarget: W.EventTarget, File: W.File, FileList: W.FileList, FileWriter: W.FileWriter, HTMLFormElement: W.FormElement, Gamepad: W.Gamepad, History: W.History, HTMLCollection: W.HtmlCollection, HTMLFormControlsCollection: W.HtmlCollection, HTMLOptionsCollection: W.HtmlCollection, HTMLInputElement: W.InputElement, KeyboardEvent: W.KeyboardEvent, Location: W.Location, MediaList: W.MediaList, MIDIInputMap: W.MidiInputMap, MIDIOutputMap: W.MidiOutputMap, MimeType: W.MimeType, MimeTypeArray: W.MimeTypeArray, PointerEvent: W.MouseEvent, MouseEvent: W.MouseEvent, DragEvent: W.MouseEvent, DocumentFragment: W.Node0, ShadowRoot: W.Node0, DocumentType: W.Node0, Node: W.Node0, NodeList: W.NodeList, RadioNodeList: W.NodeList, Plugin: W.Plugin, PluginArray: W.PluginArray, RTCStatsReport: W.RtcStatsReport, HTMLSelectElement: W.SelectElement, SourceBuffer: W.SourceBuffer, SourceBufferList: W.SourceBufferList, SpeechGrammar: W.SpeechGrammar, SpeechGrammarList: W.SpeechGrammarList, SpeechRecognitionResult: W.SpeechRecognitionResult, Storage: W.Storage, CSSStyleSheet: W.StyleSheet, StyleSheet: W.StyleSheet, HTMLTableElement: W.TableElement, HTMLTableRowElement: W.TableRowElement, HTMLTableSectionElement: W.TableSectionElement, HTMLTemplateElement: W.TemplateElement, TextTrack: W.TextTrack, TextTrackCue: W.TextTrackCue, VTTCue: W.TextTrackCue, TextTrackCueList: W.TextTrackCueList, TextTrackList: W.TextTrackList, TimeRanges: W.TimeRanges, Touch: W.Touch, TouchList: W.TouchList, TrackDefaultList: W.TrackDefaultList, CompositionEvent: W.UIEvent, FocusEvent: W.UIEvent, TextEvent: W.UIEvent, TouchEvent: W.UIEvent, UIEvent: W.UIEvent, URL: W.Url, VideoTrackList: W.VideoTrackList, WheelEvent: W.WheelEvent, Window: W.Window, DOMWindow: W.Window, Attr: W._Attr, CSSRuleList: W._CssRuleList, ClientRect: W._DomRect, DOMRect: W._DomRect, GamepadList: W._GamepadList, NamedNodeMap: W._NamedNodeMap, MozNamedAttrMap: W._NamedNodeMap, SpeechRecognitionResultList: W._SpeechRecognitionResultList, StyleSheetList: W._StyleSheetList, IDBOpenDBRequest: P.OpenDBRequest, IDBVersionChangeRequest: P.OpenDBRequest, IDBRequest: P.Request, IDBVersionChangeEvent: P.VersionChangeEvent, SVGLength: P.Length, SVGLengthList: P.LengthList, SVGNumber: P.Number, SVGNumberList: P.NumberList, SVGPointList: P.PointList, SVGScriptElement: P.ScriptElement, SVGStringList: P.StringList, SVGAElement: P.SvgElement, SVGAnimateElement: P.SvgElement, SVGAnimateMotionElement: P.SvgElement, SVGAnimateTransformElement: P.SvgElement, SVGAnimationElement: P.SvgElement, SVGCircleElement: P.SvgElement, SVGClipPathElement: P.SvgElement, SVGDefsElement: P.SvgElement, SVGDescElement: P.SvgElement, SVGDiscardElement: P.SvgElement, SVGEllipseElement: P.SvgElement, SVGFEBlendElement: P.SvgElement, SVGFEColorMatrixElement: P.SvgElement, SVGFEComponentTransferElement: P.SvgElement, SVGFECompositeElement: P.SvgElement, SVGFEConvolveMatrixElement: P.SvgElement, SVGFEDiffuseLightingElement: P.SvgElement, SVGFEDisplacementMapElement: P.SvgElement, SVGFEDistantLightElement: P.SvgElement, SVGFEFloodElement: P.SvgElement, SVGFEFuncAElement: P.SvgElement, SVGFEFuncBElement: P.SvgElement, SVGFEFuncGElement: P.SvgElement, SVGFEFuncRElement: P.SvgElement, SVGFEGaussianBlurElement: P.SvgElement, SVGFEImageElement: P.SvgElement, SVGFEMergeElement: P.SvgElement, SVGFEMergeNodeElement: P.SvgElement, SVGFEMorphologyElement: P.SvgElement, SVGFEOffsetElement: P.SvgElement, SVGFEPointLightElement: P.SvgElement, SVGFESpecularLightingElement: P.SvgElement, SVGFESpotLightElement: P.SvgElement, SVGFETileElement: P.SvgElement, SVGFETurbulenceElement: P.SvgElement, SVGFilterElement: P.SvgElement, SVGForeignObjectElement: P.SvgElement, SVGGElement: P.SvgElement, SVGGeometryElement: P.SvgElement, SVGGraphicsElement: P.SvgElement, SVGImageElement: P.SvgElement, SVGLineElement: P.SvgElement, SVGLinearGradientElement: P.SvgElement, SVGMarkerElement: P.SvgElement, SVGMaskElement: P.SvgElement, SVGMetadataElement: P.SvgElement, SVGPathElement: P.SvgElement, SVGPatternElement: P.SvgElement, SVGPolygonElement: P.SvgElement, SVGPolylineElement: P.SvgElement, SVGRadialGradientElement: P.SvgElement, SVGRectElement: P.SvgElement, SVGSetElement: P.SvgElement, SVGStopElement: P.SvgElement, SVGStyleElement: P.SvgElement, SVGSVGElement: P.SvgElement, SVGSwitchElement: P.SvgElement, SVGSymbolElement: P.SvgElement, SVGTSpanElement: P.SvgElement, SVGTextContentElement: P.SvgElement, SVGTextElement: P.SvgElement, SVGTextPathElement: P.SvgElement, SVGTextPositioningElement: P.SvgElement, SVGTitleElement: P.SvgElement, SVGUseElement: P.SvgElement, SVGViewElement: P.SvgElement, SVGGradientElement: P.SvgElement, SVGComponentTransferFunctionElement: P.SvgElement, SVGFEDropShadowElement: P.SvgElement, SVGMPathElement: P.SvgElement, SVGElement: P.SvgElement, SVGTransform: P.Transform, SVGTransformList: P.TransformList, AudioBuffer: P.AudioBuffer, AudioParamMap: P.AudioParamMap, AudioTrackList: P.AudioTrackList, AudioContext: P.BaseAudioContext, webkitAudioContext: P.BaseAudioContext, BaseAudioContext: P.BaseAudioContext, OfflineAudioContext: P.OfflineAudioContext, WebGLBuffer: P.Buffer, WebGLFramebuffer: P.Framebuffer0, WebGLProgram: P.Program, WebGLRenderingContext: P.RenderingContext, WebGL2RenderingContext: P.RenderingContext2, WebGLShader: P.Shader, WebGLTexture: P.Texture0, WebGLUniformLocation: P.UniformLocation, WebGLVertexArrayObject: P.VertexArrayObject, SQLResultSetRowList: P.SqlResultSetRowList});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, AnimationEffectReadOnly: true, AnimationEffectTiming: true, AnimationEffectTimingReadOnly: true, AnimationTimeline: true, AnimationWorkletGlobalScope: true, AuthenticatorAssertionResponse: true, AuthenticatorAttestationResponse: true, AuthenticatorResponse: true, BackgroundFetchFetch: true, BackgroundFetchManager: true, BackgroundFetchSettledFetch: true, BarProp: true, BarcodeDetector: true, BluetoothRemoteGATTDescriptor: true, Body: true, BudgetState: true, CacheStorage: true, CanvasGradient: true, CanvasPattern: true, Client: true, Clients: true, CookieStore: true, Coordinates: true, Credential: true, CredentialUserData: true, CredentialsContainer: true, Crypto: true, CryptoKey: true, CSS: true, CSSVariableReferenceValue: true, CustomElementRegistry: true, DataTransfer: true, DataTransferItem: true, DeprecatedStorageInfo: true, DeprecatedStorageQuota: true, DeprecationReport: true, DetectedBarcode: true, DetectedFace: true, DetectedText: true, DeviceAcceleration: true, DeviceRotationRate: true, DirectoryEntry: true, DirectoryReader: true, DocumentOrShadowRoot: true, DocumentTimeline: true, DOMError: true, DOMImplementation: true, Iterator: true, DOMMatrix: true, DOMMatrixReadOnly: true, DOMParser: true, DOMPoint: true, DOMPointReadOnly: true, DOMQuad: true, DOMStringMap: true, Entry: true, External: true, FaceDetector: true, FederatedCredential: true, FileEntry: true, DOMFileSystem: true, FontFace: true, FontFaceSource: true, FormData: true, GamepadButton: true, GamepadPose: true, Geolocation: true, Position: true, Headers: true, HTMLHyperlinkElementUtils: true, IdleDeadline: true, ImageBitmap: true, ImageBitmapRenderingContext: true, ImageCapture: true, ImageData: true, InputDeviceCapabilities: true, IntersectionObserver: true, IntersectionObserverEntry: true, InterventionReport: true, KeyframeEffect: true, KeyframeEffectReadOnly: true, MediaCapabilities: true, MediaCapabilitiesInfo: true, MediaDeviceInfo: true, MediaError: true, MediaKeyStatusMap: true, MediaKeySystemAccess: true, MediaKeys: true, MediaKeysPolicy: true, MediaMetadata: true, MediaSession: true, MediaSettingsRange: true, MemoryInfo: true, MessageChannel: true, Metadata: true, MutationObserver: true, WebKitMutationObserver: true, MutationRecord: true, NavigationPreloadManager: true, Navigator: true, NavigatorAutomationInformation: true, NavigatorConcurrentHardware: true, NavigatorCookies: true, NavigatorUserMediaError: true, NodeFilter: true, NodeIterator: true, NonDocumentTypeChildNode: true, NonElementParentNode: true, NoncedElement: true, OffscreenCanvasRenderingContext2D: true, OverconstrainedError: true, PaintRenderingContext2D: true, PaintSize: true, PaintWorkletGlobalScope: true, PasswordCredential: true, Path2D: true, PaymentAddress: true, PaymentInstruments: true, PaymentManager: true, PaymentResponse: true, PerformanceEntry: true, PerformanceLongTaskTiming: true, PerformanceMark: true, PerformanceMeasure: true, PerformanceNavigation: true, PerformanceNavigationTiming: true, PerformanceObserver: true, PerformanceObserverEntryList: true, PerformancePaintTiming: true, PerformanceResourceTiming: true, PerformanceServerTiming: true, PerformanceTiming: true, Permissions: true, PhotoCapabilities: true, PositionError: true, Presentation: true, PresentationReceiver: true, PublicKeyCredential: true, PushManager: true, PushMessageData: true, PushSubscription: true, PushSubscriptionOptions: true, Range: true, RelatedApplication: true, ReportBody: true, ReportingObserver: true, ResizeObserver: true, ResizeObserverEntry: true, RTCCertificate: true, RTCIceCandidate: true, mozRTCIceCandidate: true, RTCLegacyStatsReport: true, RTCRtpContributingSource: true, RTCRtpReceiver: true, RTCRtpSender: true, RTCSessionDescription: true, mozRTCSessionDescription: true, RTCStatsResponse: true, Screen: true, ScrollState: true, ScrollTimeline: true, Selection: true, SharedArrayBuffer: true, SpeechRecognitionAlternative: true, SpeechSynthesisVoice: true, StaticRange: true, StorageManager: true, StyleMedia: true, StylePropertyMap: true, StylePropertyMapReadonly: true, SyncManager: true, TaskAttributionTiming: true, TextDetector: true, TextMetrics: true, TrackDefault: true, TreeWalker: true, TrustedHTML: true, TrustedScriptURL: true, TrustedURL: true, UnderlyingSourceBase: true, URLSearchParams: true, VRCoordinateSystem: true, VRDisplayCapabilities: true, VREyeParameters: true, VRFrameData: true, VRFrameOfReference: true, VRPose: true, VRStageBounds: true, VRStageBoundsPoint: true, VRStageParameters: true, ValidityState: true, VideoPlaybackQuality: true, VideoTrack: true, VTTRegion: true, WindowClient: true, WorkletAnimation: true, WorkletGlobalScope: true, XPathEvaluator: true, XPathExpression: true, XPathNSResolver: true, XPathResult: true, XMLSerializer: true, XSLTProcessor: true, Bluetooth: true, BluetoothCharacteristicProperties: true, BluetoothRemoteGATTServer: true, BluetoothRemoteGATTService: true, BluetoothUUID: true, BudgetService: true, Cache: true, DOMFileSystemSync: true, DirectoryEntrySync: true, DirectoryReaderSync: true, EntrySync: true, FileEntrySync: true, FileReaderSync: true, FileWriterSync: true, HTMLAllCollection: true, Mojo: true, MojoHandle: true, MojoWatcher: true, NFC: true, PagePopupController: true, Report: true, Request: true, Response: true, SubtleCrypto: true, USBAlternateInterface: true, USBConfiguration: true, USBDevice: true, USBEndpoint: true, USBInTransferResult: true, USBInterface: true, USBIsochronousInTransferPacket: true, USBIsochronousInTransferResult: true, USBIsochronousOutTransferPacket: true, USBIsochronousOutTransferResult: true, USBOutTransferResult: true, WorkerLocation: true, WorkerNavigator: true, Worklet: true, IDBCursor: true, IDBCursorWithValue: true, IDBFactory: true, IDBIndex: true, IDBKeyRange: true, IDBObjectStore: true, IDBObservation: true, IDBObserver: true, IDBObserverChanges: true, SVGAngle: true, SVGAnimatedAngle: true, SVGAnimatedBoolean: true, SVGAnimatedEnumeration: true, SVGAnimatedInteger: true, SVGAnimatedLength: true, SVGAnimatedLengthList: true, SVGAnimatedNumber: true, SVGAnimatedNumberList: true, SVGAnimatedPreserveAspectRatio: true, SVGAnimatedRect: true, SVGAnimatedString: true, SVGAnimatedTransformList: true, SVGMatrix: true, SVGPoint: true, SVGPreserveAspectRatio: true, SVGRect: true, SVGUnitTypes: true, AudioListener: true, AudioParam: true, AudioTrack: true, AudioWorkletGlobalScope: true, AudioWorkletProcessor: true, PeriodicWave: true, WebGLActiveInfo: true, ANGLEInstancedArrays: true, ANGLE_instanced_arrays: true, WebGLCanvas: true, WebGLColorBufferFloat: true, WebGLCompressedTextureASTC: true, WebGLCompressedTextureATC: true, WEBGL_compressed_texture_atc: true, WebGLCompressedTextureETC1: true, WEBGL_compressed_texture_etc1: true, WebGLCompressedTextureETC: true, WebGLCompressedTexturePVRTC: true, WEBGL_compressed_texture_pvrtc: true, WebGLCompressedTextureS3TC: true, WEBGL_compressed_texture_s3tc: true, WebGLCompressedTextureS3TCsRGB: true, WebGLDebugRendererInfo: true, WEBGL_debug_renderer_info: true, WebGLDebugShaders: true, WEBGL_debug_shaders: true, WebGLDepthTexture: true, WEBGL_depth_texture: true, WebGLDrawBuffers: true, WEBGL_draw_buffers: true, EXTsRGB: true, EXT_sRGB: true, EXTBlendMinMax: true, EXT_blend_minmax: true, EXTColorBufferFloat: true, EXTColorBufferHalfFloat: true, EXTDisjointTimerQuery: true, EXTDisjointTimerQueryWebGL2: true, EXTFragDepth: true, EXT_frag_depth: true, EXTShaderTextureLOD: true, EXT_shader_texture_lod: true, EXTTextureFilterAnisotropic: true, EXT_texture_filter_anisotropic: true, WebGLGetBufferSubDataAsync: true, WebGLLoseContext: true, WebGLExtensionLoseContext: true, WEBGL_lose_context: true, OESElementIndexUint: true, OES_element_index_uint: true, OESStandardDerivatives: true, OES_standard_derivatives: true, OESTextureFloat: true, OES_texture_float: true, OESTextureFloatLinear: true, OES_texture_float_linear: true, OESTextureHalfFloat: true, OES_texture_half_float: true, OESTextureHalfFloatLinear: true, OES_texture_half_float_linear: true, OESVertexArrayObject: true, OES_vertex_array_object: true, WebGLQuery: true, WebGLRenderbuffer: true, WebGLSampler: true, WebGLShaderPrecisionFormat: true, WebGLSync: true, WebGLTimerQueryEXT: true, WebGLTransformFeedback: true, WebGLVertexArrayObjectOES: true, WebGL: true, WebGL2RenderingContextBase: true, Database: true, SQLError: true, SQLResultSet: true, SQLTransaction: true, DataView: true, ArrayBufferView: false, Float64Array: true, Float32Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, HTMLAudioElement: true, HTMLBRElement: true, HTMLButtonElement: true, HTMLContentElement: true, HTMLDListElement: true, HTMLDataElement: true, HTMLDataListElement: true, HTMLDetailsElement: true, HTMLDialogElement: true, HTMLEmbedElement: true, HTMLFieldSetElement: true, HTMLHRElement: true, HTMLHeadElement: true, HTMLHeadingElement: true, HTMLHtmlElement: true, HTMLIFrameElement: true, HTMLImageElement: true, HTMLLIElement: true, HTMLLabelElement: true, HTMLLegendElement: true, HTMLLinkElement: true, HTMLMapElement: true, HTMLMediaElement: true, HTMLMenuElement: true, HTMLMetaElement: true, HTMLMeterElement: true, HTMLModElement: true, HTMLOListElement: true, HTMLObjectElement: true, HTMLOptGroupElement: true, HTMLOptionElement: true, HTMLOutputElement: true, HTMLParagraphElement: true, HTMLParamElement: true, HTMLPictureElement: true, HTMLPreElement: true, HTMLProgressElement: true, HTMLQuoteElement: true, HTMLScriptElement: true, HTMLShadowElement: true, HTMLSlotElement: true, HTMLSourceElement: true, HTMLSpanElement: true, HTMLStyleElement: true, HTMLTableCaptionElement: true, HTMLTableCellElement: true, HTMLTableDataCellElement: true, HTMLTableHeaderCellElement: true, HTMLTableColElement: true, HTMLTextAreaElement: true, HTMLTimeElement: true, HTMLTitleElement: true, HTMLTrackElement: true, HTMLUListElement: true, HTMLUnknownElement: true, HTMLVideoElement: true, HTMLDirectoryElement: true, HTMLFontElement: true, HTMLFrameElement: true, HTMLFrameSetElement: true, HTMLMarqueeElement: true, HTMLElement: false, AccessibleNodeList: true, HTMLAnchorElement: true, HTMLAreaElement: true, HTMLBaseElement: true, Blob: false, HTMLBodyElement: true, HTMLCanvasElement: true, CanvasRenderingContext2D: true, CDATASection: true, CharacterData: true, Comment: true, ProcessingInstruction: true, Text: true, CSSNumericValue: true, CSSUnitValue: true, CSSPerspective: true, CSSCharsetRule: true, CSSConditionRule: true, CSSFontFaceRule: true, CSSGroupingRule: true, CSSImportRule: true, CSSKeyframeRule: true, MozCSSKeyframeRule: true, WebKitCSSKeyframeRule: true, CSSKeyframesRule: true, MozCSSKeyframesRule: true, WebKitCSSKeyframesRule: true, CSSMediaRule: true, CSSNamespaceRule: true, CSSPageRule: true, CSSRule: true, CSSStyleRule: true, CSSSupportsRule: true, CSSViewportRule: true, CSSStyleDeclaration: true, MSStyleCSSProperties: true, CSS2Properties: true, CSSImageValue: true, CSSKeywordValue: true, CSSPositionValue: true, CSSResourceValue: true, CSSURLImageValue: true, CSSStyleValue: false, CSSMatrixComponent: true, CSSRotation: true, CSSScale: true, CSSSkew: true, CSSTranslation: true, CSSTransformComponent: false, CSSTransformValue: true, CSSUnparsedValue: true, DataTransferItemList: true, HTMLDivElement: true, Document: true, HTMLDocument: true, XMLDocument: true, DOMException: true, ClientRectList: true, DOMRectList: true, DOMRectReadOnly: false, DOMStringList: true, DOMTokenList: true, Element: false, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ErrorEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, MediaEncryptedEvent: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MessageEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PopStateEvent: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, ProgressEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, StorageEvent: true, SyncEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, MojoInterfaceRequestEvent: true, ResourceProgressEvent: true, USBConnectionEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, AbsoluteOrientationSensor: true, Accelerometer: true, AccessibleNode: true, AmbientLightSensor: true, Animation: true, ApplicationCache: true, DOMApplicationCache: true, OfflineResourceList: true, BackgroundFetchRegistration: true, BatteryManager: true, BroadcastChannel: true, CanvasCaptureMediaStreamTrack: true, DedicatedWorkerGlobalScope: true, EventSource: true, FileReader: true, FontFaceSet: true, Gyroscope: true, XMLHttpRequest: true, XMLHttpRequestEventTarget: true, XMLHttpRequestUpload: true, LinearAccelerationSensor: true, Magnetometer: true, MediaDevices: true, MediaKeySession: true, MediaQueryList: true, MediaRecorder: true, MediaSource: true, MediaStream: true, MediaStreamTrack: true, MessagePort: true, MIDIAccess: true, MIDIInput: true, MIDIOutput: true, MIDIPort: true, NetworkInformation: true, Notification: true, OffscreenCanvas: true, OrientationSensor: true, PaymentRequest: true, Performance: true, PermissionStatus: true, PresentationAvailability: true, PresentationConnection: true, PresentationConnectionList: true, PresentationRequest: true, RelativeOrientationSensor: true, RemotePlayback: true, RTCDataChannel: true, DataChannel: true, RTCDTMFSender: true, RTCPeerConnection: true, webkitRTCPeerConnection: true, mozRTCPeerConnection: true, ScreenOrientation: true, Sensor: true, ServiceWorker: true, ServiceWorkerContainer: true, ServiceWorkerGlobalScope: true, ServiceWorkerRegistration: true, SharedWorker: true, SharedWorkerGlobalScope: true, SpeechRecognition: true, SpeechSynthesis: true, SpeechSynthesisUtterance: true, VR: true, VRDevice: true, VRDisplay: true, VRSession: true, VisualViewport: true, WebSocket: true, Worker: true, WorkerGlobalScope: true, WorkerPerformance: true, BluetoothDevice: true, BluetoothRemoteGATTCharacteristic: true, Clipboard: true, MojoInterfaceInterceptor: true, USB: true, IDBDatabase: true, IDBTransaction: true, AnalyserNode: true, RealtimeAnalyserNode: true, AudioBufferSourceNode: true, AudioDestinationNode: true, AudioNode: true, AudioScheduledSourceNode: true, AudioWorkletNode: true, BiquadFilterNode: true, ChannelMergerNode: true, AudioChannelMerger: true, ChannelSplitterNode: true, AudioChannelSplitter: true, ConstantSourceNode: true, ConvolverNode: true, DelayNode: true, DynamicsCompressorNode: true, GainNode: true, AudioGainNode: true, IIRFilterNode: true, MediaElementAudioSourceNode: true, MediaStreamAudioDestinationNode: true, MediaStreamAudioSourceNode: true, OscillatorNode: true, Oscillator: true, PannerNode: true, AudioPannerNode: true, webkitAudioPannerNode: true, ScriptProcessorNode: true, JavaScriptAudioNode: true, StereoPannerNode: true, WaveShaperNode: true, EventTarget: false, File: true, FileList: true, FileWriter: true, HTMLFormElement: true, Gamepad: true, History: true, HTMLCollection: true, HTMLFormControlsCollection: true, HTMLOptionsCollection: true, HTMLInputElement: true, KeyboardEvent: true, Location: true, MediaList: true, MIDIInputMap: true, MIDIOutputMap: true, MimeType: true, MimeTypeArray: true, PointerEvent: true, MouseEvent: false, DragEvent: false, DocumentFragment: true, ShadowRoot: true, DocumentType: true, Node: false, NodeList: true, RadioNodeList: true, Plugin: true, PluginArray: true, RTCStatsReport: true, HTMLSelectElement: true, SourceBuffer: true, SourceBufferList: true, SpeechGrammar: true, SpeechGrammarList: true, SpeechRecognitionResult: true, Storage: true, CSSStyleSheet: true, StyleSheet: true, HTMLTableElement: true, HTMLTableRowElement: true, HTMLTableSectionElement: true, HTMLTemplateElement: true, TextTrack: true, TextTrackCue: true, VTTCue: true, TextTrackCueList: true, TextTrackList: true, TimeRanges: true, Touch: true, TouchList: true, TrackDefaultList: true, CompositionEvent: true, FocusEvent: true, TextEvent: true, TouchEvent: true, UIEvent: false, URL: true, VideoTrackList: true, WheelEvent: true, Window: true, DOMWindow: true, Attr: true, CSSRuleList: true, ClientRect: true, DOMRect: true, GamepadList: true, NamedNodeMap: true, MozNamedAttrMap: true, SpeechRecognitionResultList: true, StyleSheetList: true, IDBOpenDBRequest: true, IDBVersionChangeRequest: true, IDBRequest: false, IDBVersionChangeEvent: true, SVGLength: true, SVGLengthList: true, SVGNumber: true, SVGNumberList: true, SVGPointList: true, SVGScriptElement: true, SVGStringList: true, SVGAElement: true, SVGAnimateElement: true, SVGAnimateMotionElement: true, SVGAnimateTransformElement: true, SVGAnimationElement: true, SVGCircleElement: true, SVGClipPathElement: true, SVGDefsElement: true, SVGDescElement: true, SVGDiscardElement: true, SVGEllipseElement: true, SVGFEBlendElement: true, SVGFEColorMatrixElement: true, SVGFEComponentTransferElement: true, SVGFECompositeElement: true, SVGFEConvolveMatrixElement: true, SVGFEDiffuseLightingElement: true, SVGFEDisplacementMapElement: true, SVGFEDistantLightElement: true, SVGFEFloodElement: true, SVGFEFuncAElement: true, SVGFEFuncBElement: true, SVGFEFuncGElement: true, SVGFEFuncRElement: true, SVGFEGaussianBlurElement: true, SVGFEImageElement: true, SVGFEMergeElement: true, SVGFEMergeNodeElement: true, SVGFEMorphologyElement: true, SVGFEOffsetElement: true, SVGFEPointLightElement: true, SVGFESpecularLightingElement: true, SVGFESpotLightElement: true, SVGFETileElement: true, SVGFETurbulenceElement: true, SVGFilterElement: true, SVGForeignObjectElement: true, SVGGElement: true, SVGGeometryElement: true, SVGGraphicsElement: true, SVGImageElement: true, SVGLineElement: true, SVGLinearGradientElement: true, SVGMarkerElement: true, SVGMaskElement: true, SVGMetadataElement: true, SVGPathElement: true, SVGPatternElement: true, SVGPolygonElement: true, SVGPolylineElement: true, SVGRadialGradientElement: true, SVGRectElement: true, SVGSetElement: true, SVGStopElement: true, SVGStyleElement: true, SVGSVGElement: true, SVGSwitchElement: true, SVGSymbolElement: true, SVGTSpanElement: true, SVGTextContentElement: true, SVGTextElement: true, SVGTextPathElement: true, SVGTextPositioningElement: true, SVGTitleElement: true, SVGUseElement: true, SVGViewElement: true, SVGGradientElement: true, SVGComponentTransferFunctionElement: true, SVGFEDropShadowElement: true, SVGMPathElement: true, SVGElement: false, SVGTransform: true, SVGTransformList: true, AudioBuffer: true, AudioParamMap: true, AudioTrackList: true, AudioContext: true, webkitAudioContext: true, BaseAudioContext: false, OfflineAudioContext: true, WebGLBuffer: true, WebGLFramebuffer: true, WebGLProgram: true, WebGLRenderingContext: true, WebGL2RenderingContext: true, WebGLShader: true, WebGLTexture: true, WebGLUniformLocation: true, WebGLVertexArrayObject: true, SQLResultSetRowList: true});
    H.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
    W._SourceBufferList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
    W._TextTrackList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
  })();
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(L.main, []);
    else
      L.main([]);
  });
})();

//# sourceMappingURL=shadow.dart.js.map
